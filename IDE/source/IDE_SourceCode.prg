/*----------------------------------------------------------------------------
 HMG - Harbour Windows GUI library source code

 Copyright 2002-2016 Roberto Lopez <mail.box.hmg@gmail.com>
 http://sites.google.com/site/hmgweb/

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation; either version 2 of the License, or (at your option) any later
 version.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along with
 this software; see the file COPYING. If not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA (or
 visit the web site http://www.gnu.org/).

 As a special exception, you have permission for additional uses of the text
 contained in this release of HMG.

 The exception is that, if you link the HMG library with other
 files to produce an executable, this does not by itself cause the resulting
 executable to be covered by the GNU General Public License.
 Your use of that executable is in no way restricted on account of linking the
 HMG library code into it.

 Parts of this project are based upon:

   "Harbour GUI framework for Win32"
   Copyright 2001 Alexander S.Kresin <alex@belacy.belgorod.su>
   Copyright 2001 Antonio Linares <alinares@fivetech.com>
   www - http://www.harbour-project.org

   "Harbour Project"
   Copyright 1999-2008, http://www.harbour-project.org/

   "WHAT32"
   Copyright 2002 AJ Wos <andrwos@aust1.net>

   "HWGUI"
   Copyright 2001-2008 Alexander S.Kresin <alex@belacy.belgorod.su>

---------------------------------------------------------------------------*/

#pragma DEBUGINFO=OFF   // ADD, march 2017

// PUBLIC vars defined in Main()
MEMVAR CompilerVersion
MEMVAR Author
MEMVAR cFileLanguage
MEMVAR cFileBuildBat

MEMVAR _HMG_SYSDATA
MEMVAR _HMG_MainWindowFirst

MEMVAR RESETINCREMENTAL
MEMVAR ENABLEDEBUGGER
MEMVAR docpath
MEMVAR aMsgs
MEMVAR cSourceBuffer
MEMVAR nParameterCount
MEMVAR cParameters
MEMVAR lForceFullWarning
MEMVAR nVersion
MEMVAR _InsertActive
MEMVAR _REPORTTYPE
MEMVAR aTables
MEMVAR cCurrentReportFileName
MEMVAR _ReportFontName
MEMVAR _ReportFontSize
MEMVAR _ReportFontBold
MEMVAR _ReportFontItalic
MEMVAR _ReportBuilderActive
MEMVAR _EAT
MEMVAR _GCN
MEMVAR _HLK
MEMVAR cUserLog
MEMVAR lVirtualForm
MEMVAR ResetProjectInfo
MEMVAR _hmgide_aDropDownMenus
MEMVAR _hmgide_CurrentNotifyMenu
MEMVAR _hmgide_CurrentMainMenu
MEMVAR _hmgide_CurrentContextMenu
MEMVAR _hmgide_CurrentStatusBar
MEMVAR _hmgide_CurrentToolBar
MEMVAR Processing
MEMVAR StartUpFolder
MEMVAR DebuggerSupport
MEMVAR MiniGUIFolder
MEMVAR ProgramEditor
MEMVAR Language
MEMVAR cHmgFolder
MEMVAR MixedMode
MEMVAR AddIncPaths
MEMVAR BccFolder
MEMVAR AddLibs
MEMVAR RunAfetrBuild
MEMVAR SnapToGrid
MEMVAR ProjectName
MEMVAR DesignFormModified
MEMVAR OpenFormName
MEMVAR _pr
MEMVAR _pc
MEMVAR WindowWidth
MEMVAR WindowHeight
MEMVAR SelectedControlName
MEMVAR SelectedControlType
MEMVAR MoveIndex
MEMVAR SizeStarted
MEMVAR MoveStarted
MEMVAR MoveCol
MEMVAR MoveRow
MEMVAR MoveWidth
MEMVAR MoveHeight
MEMVAR BrowseCount
MEMVAR TreeCount
MEMVAR DesignFormhandle
MEMVAR DesignForm
MEMVAR CurrentControl
MEMVAR ButtonCount
MEMVAR CheckBoxCount
MEMVAR ListBoxCount
MEMVAR ComboBoxCount
MEMVAR CheckButtonCount
MEMVAR GridCount
MEMVAR FrameCount
MEMVAR TabCount
MEMVAR ImageCount
MEMVAR AnimateCount
MEMVAR DatepickerCount
MEMVAR TextBoxCount
MEMVAR EditBoxCount
MEMVAR LabelCount
MEMVAR PlayerCount
MEMVAR ProgressBarCount
MEMVAR RadioGroupCount
MEMVAR SliderCount
MEMVAR SpinnerCount
MEMVAR HyperLinkCount
MEMVAR MonthCalendarCount
MEMVAR RichEditCount
MEMVAR IpAddressCount
MEMVAR TimerCount
MEMVAR ActivexCount
MEMVAR ChildWindowCount
MEMVAR SelectedControlIndex
MEMVAR MainHeight
MEMVAR ProjectHeight

// PRIVATE vars defined in StatusBarBuilder()
MEMVAR _StCaptions
MEMVAR _StActions
MEMVAR _StWidths
MEMVAR _StIcons
MEMVAR _StToolTips
MEMVAR _StStyles
MEMVAR _StFont
MEMVAR _StTop

// PUBLIC vars defined in LoadUserComponents()
MEMVAR nComponentCount
MEMVAR aComponentFileNames
MEMVAR aComponentNames
MEMVAR aComponentProperties
MEMVAR aComponentEvents
MEMVAR aComponentPropValues
MEMVAR aComponentEvtValues

// PRIVATE vars defined in _Open()
MEMVAR Name
MEMVAR MacroVar
* MEMVAR _hmgide_CurrentMainMenu
* MEMVAR _hmgide_CurrentContextMenu
* MEMVAR _hmgide_CurrentNotifyMenu
* MEMVAR _hmgide_CurrentStatusBar
* MEMVAR _hmgide_CurrentToolBar
* MEMVAR _hmgide_CurrentToolBar
* MEMVAR _hmgide_aDropDownMenus
MEMVAR _hmgide_CurrentSplitBox

// PRIVATE var defined in AddControl()
* MEMVAR MacroVar

// PRIVATE vars defined in EditTabOrder()
MEMVAR aTree
MEMVAR aTreeTabIndex
MEMVAR aTreeTabPage
MEMVAR aTreeTabPos
MEMVAR aTreeTabPageLength

// PRIVATE vars defined in ContextMenuBuilder()
MEMVAR _MenuCaptions
MEMVAR _MenuActions
MEMVAR _MenuNames
MEMVAR _MenuImages
MEMVAR _MenuChecked

// PRIVATE vars defined in MainMenuBuilder()
* MEMVAR _MenuCaptions
* MEMVAR _MenuActions
* MEMVAR _MenuNames
* MEMVAR _MenuImages
* MEMVAR _MenuChecked

// PRIVATE vars defined in ToolBarBuilder()
MEMVAR _TbName
MEMVAR _TbNames
MEMVAR _TbCaptions
MEMVAR _TbPictures
MEMVAR _TbActions
MEMVAR _TbToolTips
MEMVAR _TbSeparators
MEMVAR _TbChecks
MEMVAR _TbAutoSizes
MEMVAR _TbGroups
MEMVAR _TbDropDowns
MEMVAR _TbWholeDropDowns
MEMVAR _TbFontName
MEMVAR _TbFontSize
MEMVAR _TbFontBold
MEMVAR _TbFontItalic
MEMVAR _TbFontUnderLine
MEMVAR _TbFontStrikeout
MEMVAR _TbButtonWidth
MEMVAR _TbButtonHeight
MEMVAR _TbButtonImageWidth
MEMVAR _TbButtonImageHeight
MEMVAR _TbToolTip
MEMVAR _TbFlat
MEMVAR _TbBottom
MEMVAR _TbRightText
MEMVAR _TbBorder
MEMVAR _TbStrictWidth

// PUBLIC vars defined in hmgMake()
MEMVAR cProjectFile
MEMVAR cLibraries
MEMVAR cLinkerLibraries
MEMVAR lDebuggerSupport
MEMVAR lFullBuild
MEMVAR FullBuild
MEMVAR aParams
MEMVAR cProjectBaseName
MEMVAR aModifiedFiles
MEMVAR aFilesToCompile
MEMVAR aFormsModified
MEMVAR aProjectModuleFiles
MEMVAR cProjectFolder
MEMVAR cBackupFolder
MEMVAR aDependences
MEMVAR nstd
MEMVAR nstx
MEMVAR lConsoleMode
MEMVAR cInclude

// PRIVATE vars defined in _Spx_ToolBarBuilder()
* MEMVAR _TbName
* MEMVAR _TbNames
* MEMVAR _TbCaptions
* MEMVAR _TbPictures
* MEMVAR _TbActions
* MEMVAR _TbToolTips
* MEMVAR _TbSeparators
* MEMVAR _TbChecks
* MEMVAR _TbAutoSizes
* MEMVAR _TbGroups
* MEMVAR _TbDropDowns
* MEMVAR _TbWholeDropDowns
* MEMVAR _TbFontName
* MEMVAR _TbFontSize
* MEMVAR _TbFontBold
* MEMVAR _TbFontItalic
* MEMVAR _TbFontUnderLine
* MEMVAR _TbFontStrikeout
* MEMVAR _TbButtonWidth
* MEMVAR _TbButtonHeight
* MEMVAR _TbButtonImageWidth
* MEMVAR _TbButtonImageHeight
* MEMVAR _TbToolTip
* MEMVAR _TbFlat
* MEMVAR _TbBottom
* MEMVAR _TbRightText
* MEMVAR _TbBorder
* MEMVAR _TbStrictWidth
MEMVAR _TbBreak

// PUBLIC var defined in GetErrorProcName()
MEMVAR cCurrentFixedFile


#include "hmg.ch"
#include "Fileio.ch"

// #xcommand EXECUTE FILE <executable> WAIT HIDE   =>   WaitRun (<executable> , 0)

#define CRLF  CHR(13) + CHR(10)
#define SB_HORZ         0
#define SB_VERT         1
#define WM_VSCROLL      0x0115
#define SB_LINEUP       0
#define SB_LINEDOWN     1
#define SB_TOP          6
#define SB_PAGEUP       2
#define SB_PAGELEFT     2
#define WM_HSCROLL      276
#define BST_UNCHECKED   0
#define BST_CHECKED     1
#define BM_GETCHECK     240
#define BM_SETCHECK     241


DECLARE WINDOW rep_build_step_1
DECLARE WINDOW rep_build_step_2
DECLARE WINDOW rep_build_step_3
DECLARE WINDOW reportsummaryoptions
DECLARE WINDOW reporttitlesoptions
DECLARE WINDOW ReportFormatOptions
declare window fieldselector


#define IDE_NUMBER_VERSION "ver 1.3b" // 'Version: 2011.06.24'

PROCEDURE CreateScreenSplash (cFileName)

LOCAL Image_Width, Image_Height, Image_BackColor

   IF HMG_GetImageInfo (cFileName, @Image_Width, @Image_Height, @Image_BackColor) == .F.
      MsgHMGError ("File Opening Error. Program Terminated" )
   ENDIF

   #define IMAGEZOOM 1.5

   DEFINE WINDOW FormSplash;
         AT 0,0;
         WIDTH Image_Width * IMAGEZOOM;
         HEIGHT Image_Height * IMAGEZOOM;
         BACKCOLOR WHITE;
         NOSYSMENU;
         NOSIZE;
         NOMINIMIZE;
         NOMAXIMIZE;
         NOCAPTION;
         TOPMOST;
         CHILD

         SET WINDOW FormSplash TRANSPARENT TO COLOR WHITE

         @ 0, 0  IMAGE Image_1 PICTURE cFileName  WIDTH Image_Width * IMAGEZOOM  HEIGHT Image_Height * IMAGEZOOM
         //@ 0, 0 LABEL Label_1 VALUE "ide" AUTOSIZE FONT "Comic Sans MS" SIZE 24 FONTCOLOR YELLOW TRANSPARENT
   END WINDOW

   CENTER WINDOW FormSplash
   SHOW WINDOW FormSplash

RETURN

Function Main ( xProject , cPar )

Local hFactor
Local nDeltaProp
LOCAL cTemp, nTemp
LOCAL lFlagBuildLog := .F.
LOCAL cFileName, cIconName

PUBLIC cFileBuildBat := 'UseBuildBat.ini'
PUBLIC cFileLanguage

#ifdef COMPILE_HMG_UNICODE

   IF HMG SUPPORT UNICODE RUN
   #define IDE_VERSION  "UNICODE  " + IDE_NUMBER_VERSION
   cFileName := "HMG-UNICODE"
   cIconName := "HMG-UNICODE_icon"
   PUBLIC _GCN := '* HMG-IDE UNICODE Form Designer Generated Code' + CRLF + '* (c) Roberto Lopez - http://sites.google.com/site/hmgweb'
   cFileLanguage := "language_UNI.ini"

#else

   IF HMG SUPPORT UNICODE STOP
   #define IDE_VERSION  "ANSI  " + IDE_NUMBER_VERSION
   cFileName := "HMG-ANSI"
   cIconName := "HMG-ANSI_icon"
   PUBLIC _GCN := '* HMG-IDE ANSI Form Designer Generated Code' + CRLF + '* (c) Roberto Lopez - http://sites.google.com/site/hmgweb'
   cFileLanguage := "language_ANS.ini"

#endif

   SET WINDOW MAIN OFF
      CreateScreenSplash (cFileName)
   SET WINDOW MAIN ON

   _HMG_SYSDATA [321] := .T.

   PUBLIC RESETINCREMENTAL := .F.
   PUBLIC ENABLEDEBUGGER   := .F.

   PUBLIC docpath
   PUBLIC aMsgs [512]
   PUBLIC cSourceBuffer       := ''
   PUBLIC nParameterCount     := PCOUNT()
   PUBLIC cParameters         := {}
   PUBLIC lForceFullWarning   := .T.
   PUBLIC nVersion            := WINMAJORVERSIONNUMBER() + (WINMINORVERSIONNUMBER() / 10)
   PUBLIC _InsertActive       := .F.
   PUBLIC _REPORTTYPE         := 'NEW'
   PUBLIC aTables
   PUBLIC cCurrentReportFileName

   PUBLIC _ReportFontName       := 'Arial'
   PUBLIC _ReportFontSize       := 9
   PUBLIC _ReportFontBold       := .F.
   PUBLIC _ReportFontItalic     := .F.
   PUBLIC _ReportBuilderActive  := .F.

   if (VALTYPE(xProject) == 'C' .and. ALLTRIM(HMG_UPPER(xProject)) == '/C' ) .or. (VALTYPE(cPar) == 'C' .and. ALLTRIM(HMG_UPPER(cPar)) == '/C' )
       REQUEST DBFCDX , DBFFPT
       RDDSETDEFAULT( "DBFCDX" )

       if nParameterCount == 1
          nParameterCount := 0
       endif
   endif

   AADD ( cParameters , xProject )

   SET CENTURY ON
   SET DATE ANSI
   SET AUTOSCROLL OFF

   PUBLIC _EAT   := "HMG-IDE  "+ IDE_VERSION + "  "
   PUBLIC Author := '(c) Roberto Lopez - FREEWARE -'
   PUBLIC _HLK   := 'http://sites.google.com/site/hmgweb'

   PUBLIC cUserLog                   := ''
   PUBLIC lVirtualForm               := .F.
   PUBLIC ResetProjectInfo           := .F.
   PUBLIC _hmgide_aDropDownMenus     := {}
   PUBLIC _hmgide_CurrentNotifyMenu  := ''
   PUBLIC _hmgide_CurrentMainMenu    := ''
   PUBLIC _hmgide_CurrentContextMenu := ''
   PUBLIC _hmgide_CurrentStatusBar   := ''
   PUBLIC _hmgide_CurrentToolBar     := ''
   PUBLIC _hmgide_CurrentToolBar     := ''
   PUBLIC Processing                 := .F.
   PUBLIC StartUpFolder              := GETMODULEFILENAME()
   PUBLIC DebuggerSupport            := .F.

   StartUpFolder := HB_ULEFT (StartUpFolder, HB_UTF8RAT ('\', StartUpFolder))

   if .not. file (StartUpFolder + 'hmg.ini')

      cTemp := ALLTRIM( StartUpFolder)

      if HB_URIGHT ( cTemp ,1 ) == '\'
         cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 1)
      endif

      nTemp := HB_UTF8RAT ( '\' , cTemp )
      cTemp := HB_ULEFT ( cTemp , nTemp )

      if HB_URIGHT ( cTemp ,1 ) == '\'
         cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 1)
      endif

      SaveString ( StartUpFolder + 'hmg.ini' , cTemp )

   endif

   if .not. file (StartUpFolder + 'editor.ini')

      cTemp := ALLTRIM( StartUpFolder)

      if HB_URIGHT ( cTemp ,1 ) == '\'
         cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 1)
      endif

      nTemp := HB_UTF8RAT ( '\' , cTemp )
      cTemp := HB_ULEFT ( cTemp , nTemp )

      if HB_URIGHT ( cTemp ,1 ) == '\'
         cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 1)
      endif

      ProgramEditor := HMG_GetFileAssociatedWithExtension ( ".prg" )
      IF .NOT. FILE (ProgramEditor)
         ProgramEditor :=  GetSystemDir()+"\notepad.exe"   // Note Block of Windows
      ENDIF
   // SaveString ( StartUpFolder + 'editor.ini' , cTemp + '\notepad++\notepad++.exe' )
      SaveString ( StartUpFolder + 'editor.ini' , ProgramEditor )
   endif

   if .not. file (StartUpFolder + cFileLanguage)
      #ifdef COMPILE_HMG_UNICODE
          SaveString (StartUpFolder + cFileLanguage , 'english.UNI' )
      #else
          SaveString (StartUpFolder + cFileLanguage , 'english.ANS' )
      #endif
   endif

   PUBLIC MiniGUIFolder     := ALLTRIM (HB_UTF8STRTRAN (HB_MEMOREAD (StartUpFolder + 'hmg.ini'), chr(26), ' '))
   PUBLIC ProgramEditor     := ALLTRIM (HB_UTF8STRTRAN (HB_MEMOREAD (StartUpFolder + 'editor.ini'), chr(26), ' '))
   PUBLIC Language          := ALLTRIM (HB_UTF8STRTRAN (HB_MEMOREAD (StartUpFolder + cFileLanguage), chr(26), ' '))

   IF .NOT. FILE (ProgramEditor)
      ProgramEditor := HMG_GetFileAssociatedWithExtension ( ".prg" )
      IF .NOT. FILE (ProgramEditor)
         ProgramEditor :=  GetSystemDir()+"\notepad.exe"   // Note Block of Windows
      ENDIF
   ENDIF

   PUBLIC cHmgFolder   := MiniGUIFolder

   PUBLIC CompilerVersion := ""

	PUBLIC MixedMode	:= .F.

	PUBLIC AddIncPaths	:= ''
	PUBLIC BccFolder 	:= ''
	PUBLIC AddLibs		:= ''

	PUBLIC RunAfetrBuild 	:= .F.

	PUBLIC SnapToGrid	:= .T.

	PUBLIC ProjectName	:= ''
	PUBLIC DesignFormModified := .F.

	PUBLIC OpenFormName		:= ''
	PUBLIC _pr			:= 0
	PUBLIC _pc			:= 0
	PUBLIC WindowWidth		:= 550
	PUBLIC WindowHeight		:= 550
	PUBLIC SelectedControlName	:= ''
	PUBLIC SelectedControlType	:= ''
	PUBLIC MoveIndex		:= 0
	PUBLIC SizeStarted		:= .F.
	PUBLIC MoveStarted		:= .F.
	PUBLIC MoveCol			:= 0
	PUBLIC MoveRow			:= 0
	PUBLIC MoveWidth		:= 0
	PUBLIC MoveHeight		:= 0
	PUBLIC BrowseCount		:= 0
	PUBLIC TreeCount		:= 0
	PUBLIC DesignFormhandle		:= 0
	PUBLIC DesignForm		:= 'Form_1'
	PUBLIC CurrentControl 		:= 0
	PUBLIC ButtonCount		:= 0
	PUBLIC CheckBoxCount		:= 0
	PUBLIC ListBoxCount		:= 0
	PUBLIC ComboBoxCount		:= 0
	PUBLIC CheckButtonCount		:= 0
	PUBLIC GridCount		:= 0
	PUBLIC FrameCount		:= 0
	PUBLIC TabCount			:= 0
	PUBLIC ImageCount		:= 0
	PUBLIC AnimateCount		:= 0
	PUBLIC DatepickerCount		:= 0
	PUBLIC TextBoxCount		:= 0
	PUBLIC EditBoxCount		:= 0
	PUBLIC LabelCount		:= 0
	PUBLIC PlayerCount		:= 0
	PUBLIC ProgressBarCount		:= 0
	PUBLIC RadioGroupCount		:= 0
	PUBLIC SliderCount		:= 0
	PUBLIC SpinnerCount		:= 0
	PUBLIC HyperLinkCount		:= 0
	PUBLIC MonthCalendarCount	:= 0
	PUBLIC RichEditCount		:= 0
	PUBLIC IpAddressCount		:= 0
	PUBLIC TimerCount		:= 0
	PUBLIC ActivexCount		:= 0
	PUBLIC ChildWindowCount		:= 0

	PUBLIC SelectedControlIndex	:= 0

	PUBLIC MainHeight 		:= 89 + GetTitleHeight() + GetBorderHeight() + GetMenuBarHeight()

   __MVPUBLIC ( DesignForm + 'WindowType' )

   LoadUserComponents()

   LOAD_LANGUAGE_MESSAGE()


	docpath := MiniGUIFolder + '\doc\hmgdoc.htm'
	HB_UTF8STRTRAN ( docpath , '\\' , '\' )


	DEFINE WINDOW Form_Main ;
		AT 0,0 ;
		WIDTH GetDeskTopWidth() ;
		HEIGHT MainHeight ;
		TITLE _EAT ;
      ICON cIconName;
		MAIN ;
		NOMAXIMIZE ;
		NOSIZE ;
		ON RELEASE SaveProject() ;
		ON INTERACTIVECLOSE MsgYesNo( aMsgs [ 099 ] , aMsgs [ 006 ] ) ;
		ON INIT {|| FormSplash.HIDE , AutoBuild()}

		ON KEY F2		OF Form_Main ACTION OpenProject()
		ON KEY F5		OF Form_Main ACTION RunApplication()
		ON KEY F8		OF Form_Main ACTION ( ENABLEDEBUGGER := .T. , RunApplication() ) // ACTION ( RunAfetrBuild := .T. , DebuggerSupport := .T. , BuildProjectM() )
		ON KEY F9		OF Form_Main ACTION NewForm()
		ON KEY F11		OF Form_Main ACTION NewModule()

      DEFINE TIMER Timer_1 INTERVAL (1000 * 30) ACTION hb_GCall()  // ADD, 1-10-2020

		DEFINE FRAME FRAME_1
			ROW	33
			COL	575
			WIDTH	210
			HEIGHT	30
		END FRAME

		DEFINE LABEL label_User
			PARENT	Form_Main
			ROW	41
			COL	580
			WIDTH	120
			VALUE	'User Components:'
		END LABEL

		DEFINE COMBOBOX User
			PARENT		Form_Main
			ROW		37
			COL		690
			WIDTH		90
			TOOLTIP		'User Components...'
			DROPPEDWIDTH	150
		END COMBOBOX

		FillUserComponents()

		Form_main.user.value := 0
		Form_main.user.enabled := .F.

#define STATUSITEM_OFFSET 1

		DEFINE STATUSBAR
         STATUSITEM CompilerVersion // TOOLTIP IF(EMPTY(CompilerVersion),"","HMG Compiler Version")
			STATUSITEM aMsgs [ 048 ] WIDTH 600
			STATUSITEM '' WIDTH 170
			STATUSITEM '' WIDTH 75
		END STATUSBAR

		@ 003,5 BUTTON New ;
		PICTURE 'NEW' ;
		ACTION NewProject() ;
		WIDTH 29 HEIGHT 29 ;
		TOOLTIP aMsgs [ 049 ] ;

		@ 003,35 BUTTON Open ;
		PICTURE 'OPEN' ;
		ACTION OpenProject() ;
		WIDTH 29 HEIGHT 29 ;
		TOOLTIP aMsgs [ 050 ] ;

		@ 003,65 BUTTON Close ;
		PICTURE 'XCLOSE' ;
		ACTION CloseProject() ;
		WIDTH 29 HEIGHT 29 ;
		TOOLTIP aMsgs [ 051 ] ;

		@ 033,5 BUTTON NewForm ;
		PICTURE 'NEWFORM' ;
		ACTION  ( lVirtualForm := .F. , NewForm() ) ;
		WIDTH 29 HEIGHT 29 ;
		TOOLTIP aMsgs [ 052 ]

		@ 033,35 BUTTON NewModule ;
		PICTURE 'NMODULE' ;
		ACTION  NewModule() ;
		WIDTH 29 HEIGHT 29 ;
		TOOLTIP aMsgs [ 053 ]

*-*-*-

		@ 033,65 BUTTON NewReport ;
		PICTURE 'REPORT' ;
		ACTION  NewReport() ;
		WIDTH 29 HEIGHT 29 ;
		TOOLTIP aMsgs [ 028 ]

*-*-*-


		@ 003,105 BUTTON Run ;
		PICTURE 'RUN' ;
		ACTION RunApplication() ;
		WIDTH 29 HEIGHT 29 ;
		TOOLTIP aMsgs [ 054 ] ;


		@ 033,105 CHECKBUTTON Control_01 ;
			PICTURE 'SELECT' ;
			VALUE .T. WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 055 ] ;
			ON CHANGE Control_01_Click()

		// Form Controls ToolBar

		@ 003,145 CHECKBUTTON Control_36 ;
			PICTURE 'CHILDWINDOW' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Panel Window' ;
			ON CHANGE Control_36_Click()

		@ 033,145 CHECKBUTTON Control_35 ;
			PICTURE 'ACTIVEX' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Activex' ;
			ON CHANGE Control_35_Click()

		@ 003,175 CHECKBUTTON Control_02 ;
			PICTURE 'ZBUTTON' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Button' ;
			ON CHANGE Control_02_Click()

		@ 003,205 CHECKBUTTON Control_03 ;
			PICTURE 'XCHECK' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'CheckBox' ;
			ON CHANGE Control_03_Click()

		@ 003,235 CHECKBUTTON Control_04 ;
			PICTURE 'XLIST' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'ListBox' ;
			ON CHANGE Control_04_Click()

		@ 003,265 CHECKBUTTON Control_05 ;
			PICTURE 'XCOMBO' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'ComboBox' ;
			ON CHANGE Control_05_Click()

		@ 003,295 CHECKBUTTON Control_06 ;
			PICTURE 'CHECKBUTTON' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'CheckButton' ;
			ON CHANGE Control_06_Click()

		@ 003,325 CHECKBUTTON Control_07 ;
			PICTURE 'GRID' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Grid' ;
			ON CHANGE Control_07_Click()

		@ 003,355 CHECKBUTTON Control_08 ;
			PICTURE 'SLIDER' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Slider' ;
			ON CHANGE Control_08_Click()

		@ 003,385 CHECKBUTTON Control_09 ;
			PICTURE 'SPINNER' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Spinner' ;
			ON CHANGE Control_09_Click()

		@ 003,415 CHECKBUTTON Control_10 ;
			PICTURE 'IMAGE' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Image' ;
			ON CHANGE Control_10_Click()

		@ 003,445 CHECKBUTTON Control_11 ;
			PICTURE 'TREE' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Tree' ;
			ON CHANGE Control_11_Click()

		@ 003,475 CHECKBUTTON Control_12 ;
			PICTURE 'DATEPICKER' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'DatePicker' ;
			ON CHANGE Control_12_Click()

		@ 003,505 CHECKBUTTON Control_13 ;
			PICTURE 'TEXTBOX' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'TextBox' ;
			ON CHANGE Control_13_Click()

		@ 003,535 CHECKBUTTON Control_14 ;
			PICTURE 'EDITBOX' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'EditBox' ;
			ON CHANGE Control_14_Click()

		@ 033,175 CHECKBUTTON Control_15 ;
			PICTURE 'LABEL' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Label' ;
			ON CHANGE Control_15_Click()

		@ 033,235 CHECKBUTTON Control_17 ;
			PICTURE 'RADIOGROUP' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'RadioGroup' ;
			ON CHANGE Control_17_Click()

		@ 033,265 CHECKBUTTON Control_18 ;
			PICTURE 'FRAME' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Frame' ;
			ON CHANGE Control_18_Click()

		@ 033,295 CHECKBUTTON Control_19 ;
			PICTURE 'TAB' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Tab' ;
			ON CHANGE Control_19_Click()

		@ 033,325 CHECKBUTTON Control_20 ;
			PICTURE 'ANIMATEBOX' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'AnimateBox' ;
			ON CHANGE Control_20_Click()

		@ 033,355 CHECKBUTTON Control_21 ;
			PICTURE 'HYPERLINK' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Hyperlink' ;
			ON CHANGE Control_21_Click()

		@ 033,385 CHECKBUTTON Control_22 ;
			PICTURE 'MonthCalendar' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'MonthCalendar' ;
			ON CHANGE Control_22_Click()

		@ 033,415 CHECKBUTTON Control_23 ;
			PICTURE 'RICHEDIT' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'RichEditBox' ;
			ON CHANGE Control_23_Click()

		@ 033,445 CHECKBUTTON Control_24 ;
			PICTURE 'PROGRESSBAR' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'ProgressBar' ;
			ON CHANGE Control_24_Click()

		@ 033,475 CHECKBUTTON Control_25 ;
			PICTURE 'PLAYER' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Player' ;
			ON CHANGE Control_25_Click()

		@ 033,505 CHECKBUTTON Control_26 ;
			PICTURE 'IPADDRESS' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'IP Address' ;
			ON CHANGE Control_26_Click()

		@ 033,205 CHECKBUTTON Control_27 ;
			PICTURE 'TIMER' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Timer' ;
			ON CHANGE Control_27_Click()

		@ 033,535 CHECKBUTTON Control_16 ;
			PICTURE 'BROWSE' ;
			VALUE .F. WIDTH 29 HEIGHT 29 ;
			TOOLTIP 'Browse' ;
			ON CHANGE Control_16_Click()

/*
		@ 003,535 BUTTON DeleteControl ;
			PICTURE 'DELETE' ;
			ACTION  DeleteControl() ;
			WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 056 ]

		@ 033,535 BUTTON TabOrder ;
			PICTURE 'TABORDER' ;
			ACTION EditTabOrder()  ;
			WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 057 ]
*/

		@ 003,575 BUTTON Control_28 ;
			PICTURE 'XMENU' ;
			ACTION MainMenuBuilder() ;
			WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 058 ]

		@ 003,605 BUTTON Control_31 ;
			PICTURE 'CONTEXTMENU' ;
			ACTION ContextMenuBuilder() ;
			WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 059 ]

		@ 003,635 BUTTON Control_30 ;
			PICTURE 'STATUSBAR' ;
			ACTION StatusBarBuilder() ;
			WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 060 ]

		@ 003,665 BUTTON Control_29 ;
			PICTURE 'TLBAR' ;
			ACTION ToolBarBuilder() ;
			WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 061 ]

		@ 003,695 BUTTON Control_32 ;
			PICTURE 'NOTIFY' ;
			ACTION ContextMenuBuilder('N')	 ;
			WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 062 ]

		@ 003,725 BUTTON Control_33 ;
			PICTURE 'DROPDOWN' ;
			ACTION DropDownMenuBuilder()	 ;
			WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 063 ]

		@ 003,755 BUTTON Control_34 ;
			PICTURE 'SPLITBOX' ;
			ACTION SplitBoxBuilder() ;
			WIDTH 29 HEIGHT 29 ;
			TOOLTIP aMsgs [ 064 ]

		// End

      DECLARE WINDOW FormBuildLog

      @  003, 800 BUTTON Button_BuildLog CAPTION " Build   Log "  WIDTH 59 HEIGHT 59 MULTILINE ;
         ACTION {|| lFlagBuildLog := .NOT.(lFlagBuildLog), IF (lFlagBuildLog, FormBuildLog.SHOW, FormBuildLog.HIDE)}

      Form_Main.Button_BuildLog.ENABLED := .F.

      @  003, 875 BUTTON Button_Debug PICTURE "_dbgbutton" WIDTH 59 HEIGHT 59 TOOLTIP "Debug" ACTION ( ENABLEDEBUGGER := .T. , RunApplication() )

      Proc_DEFINE_MAIN_MENU ()
      Form_Main.SnapToGrid.Checked := .T.

   END WINDOW

   DEFINE WINDOW FormBuildLog;
      AT 0,0;
      WIDTH  600;
      HEIGHT 400;
      FONTNAME "Courier New" FONTSIZE 10;
      TITLE "HMG-IDE: Build.log";
      NOMINIMIZE NOMAXIMIZE;
      NOAUTORELEASE;
      NOSHOW;
      ON INTERACTIVECLOSE {|| lFlagBuildLog := .F., .T.};
      ON SIZE     {|| FormBuildLog.EditBox1.WIDTH := (FormBuildLog.WIDTH-30), FormBuildLog.EditBox1.HEIGHT := (FormBuildLog.HEIGHT-60) };
      ON MAXIMIZE {|| FormBuildLog.EditBox1.WIDTH := (FormBuildLog.WIDTH-30), FormBuildLog.EditBox1.HEIGHT := (FormBuildLog.HEIGHT-60) }
      @ 10 , 10 EDITBOX EditBox1  WIDTH (FormBuildLog.WIDTH-30)  HEIGHT (FormBuildLog.HEIGHT-60)  VALUE ""
   END WINDOW
   FormBuildLog.CENTER

	define window loading at 0,0 width 310 height 85 + IF ( ISVISTA()  .And. IsAppThemed() , 5 , 0 ) title '' child noshow nocaption

		define label label_1
			row 12
			col 86
			width 200
			height 30
			value aMsgs [ 083 ]
		end label

		define progressbar progress_1
			row		35
			col		15
			width		272
			height		30
			RangeMin	1
			RangeMax	100
			value		1
			smooth		.t.
		end progressbar

	end window

	loading.center

	define window building at 0,0 width 310 height 85 + IF ( ISVISTA()  .And. IsAppThemed() , 5 , 0 ) title '' child noshow nocaption
		define label label_1
			row 30
			col 85
			width 200
			height 30
			value aMsgs [ 084 ]
		end label
	end window

	Building.Center

	PUBLIC ProjectHeight := 130 + GetTitleHeight() + GetBorderHeight()

   hFactor := ( GetDesktopHeight() - 600 ) / 2

	DEFINE WINDOW Project ;
		AT MainHeight + 1 + IF ( ISVISTA() .And. IsAppThemed() , 10 , 0 ) , 0 ;
		WIDTH 302 ;
		HEIGHT ProjectHeight + hFactor ;
		TITLE aMsgs [ 065 ]  ;
		CHILD ;
		NOMAXIMIZE ;
		NOMINIMIZE ;
		NOSYSMENU ;
		NOSIZE

		ON KEY ALT+F4 OF PROJECT ACTION NIL

		ON KEY F2		OF project ACTION OpenProject()
		ON KEY F5		OF project ACTION RunApplication()
		ON KEY F8		OF project ACTION ( ENABLEDEBUGGER := .T. , RunApplication() ) // ACTION ( RunAfetrBuild := .T. , DebuggerSupport	:= .T. , BuildProjectM() )
		ON KEY F9		OF project ACTION NewForm()
		ON KEY F11		OF project ACTION NewModule()

		DEFINE TAB Tab_1 AT 3,3 WIDTH 290 HEIGHT 123  + hFactor MULTILINE

			PAGE aMsgs [ 066 ]

				DEFINE LISTBOX List_1
					ROW 47
					COL 5
					WIDTH 278
					HEIGHT 70  + hFactor
					ON DBLCLICK EditFile()
					TOOLTIP aMsgs [ 070 ]
				END LISTBOX

				Project.List_1.DeleteAllItems

			END PAGE

			PAGE aMsgs [ 067 ]

				DEFINE LISTBOX List_2
					ROW 47
					COL 5
					WIDTH 278
					HEIGHT 70  + hFactor
					ON DBLCLICK EditFile()
					TOOLTIP aMsgs [ 070 ]
				END LISTBOX

				Project.List_2.DeleteAllItems

			END PAGE

			PAGE aMsgs [ 068 ]

				DEFINE EDITBOX Edit_1
					ROW		47
					COL		5
					WIDTH		278
					HEIGHT		70 + hFactor
					FONTNAME	"COURIER NEW"
					FONTSIZE	9
					TOOLTIP aMsgs [ 072 ]
				END EDITBOX

			END PAGE

			PAGE aMsgs [ 069 ]

				DEFINE LISTBOX List_3
					ROW 47
					COL 5
					WIDTH 278
					HEIGHT 70 + hFactor
					ON DBLCLICK EditFile()
					TOOLTIP aMsgs [ 070 ]
				END LISTBOX

			END PAGE

			PAGE aMsgs [ 278 ]

				DEFINE EDITBOX config
					ROW		47
					COL		5
					WIDTH		278
					HEIGHT		70 + hFactor
					FONTNAME	"COURIER NEW"
					FONTSIZE	9
					TOOLTIP		'.hbc options (they should come in separate lines): libs=[<libname[s]>],hbcs=[<.hbc file[s]>], gt=[gtname], syslibs=[<libname[s]>],frameworks=[<framework[s]>], prgflags=[Harbour flags], cflags=[C compilerflags], resflags=[resource compiler flags], ldflags=[linker flags], pflags=[flags for plugins], libpaths=[paths], sources=[source files],psources=[source files for plugins], incpaths=[paths], requests=[func],instfiles=[files], instpaths=[paths], autohbcs=[<.ch>:<.hbc>],plugins=[plugins],gui|mt|pic|shared|nulrdd|nodefgt|debug|opt|map|strip|hbcppmm|winuni|implib|run|inc=[yes|no], cpp=[yes|no|def], warn=[max|yes|low|no|def],compr=[yes|no|def|min|max], head=[off|full|native|dep], skip=<reason>,stop=<reason>, echo=<text>'
				END EDITBOX

			END PAGE

			PAGE aMsgs [ 279 ]

				DEFINE LISTBOX List_4
					ROW 47
					COL 5
					WIDTH 278
					HEIGHT 70 + hFactor
					ON DBLCLICK EditFile()
					TOOLTIP aMsgs [ 070 ]
				END LISTBOX

			END PAGE

			PAGE aMsgs [ 095 ]

				DEFINE LISTBOX tables
					ROW 47
					COL 5
					WIDTH 278
					HEIGHT 70  + hFactor
					ON DBLCLICK EditFile()
					TOOLTIP aMsgs [ 070 ]
				END LISTBOX

				Project.tables.DeleteAllItems

			END PAGE

		END TAB

	END WINDOW

	If WinMajorVersionNumber() >= 6 .and. WinMinorVersionNumber() >= 1

		nDeltaProp := 25

	Else

		nDeltaProp := 0

	EndIf

	DEFINE WINDOW Properties ;
		AT mainHeight +  ProjectHeight + 1 + IF ( ISVISTA()  .And. IsAppThemed() , 20 , 0 )  + hFactor , 0 ;
		WIDTH 302 ;
		HEIGHT 230 + GetTitleHeight() + GetBorderHeight() + 1 + hFactor - nDeltaProp ;
		TITLE aMsgs [ 074 ] ;
		CHILD ;
		NOMAXIMIZE ;
		NOMINIMIZE ;
		NOSYSMENU ;
		NOSIZE

		ON KEY ALT+F4 OF PROPERTIES ACTION NIL

		ON KEY F2		OF properties ACTION OpenProject()
		ON KEY F5		OF properties ACTION RunApplication()
		ON KEY F8		OF properties ACTION ( ENABLEDEBUGGER := .T. , RunApplication() ) // ACTION ( RunAfetrBuild := .T. , DebuggerSupport	:= .T. , BuildProjectM() )
		ON KEY F9		OF properties ACTION NewForm()
		ON KEY F11		OF properties ACTION NewModule()

		DEFINE COMBOBOX Combo_1
			ROW 3
			COL 3
			WIDTH	290
			ITEMS { '' }
			VALUE 1
			ONCHANGE if ( Properties.Combo_1.Item ( Properties.Combo_1.Value ) = 'Form' , ( UpdateDesignFormProperties() , SelectControl ('') ) , SelectControl ( Properties.Combo_1.Item ( Properties.Combo_1.Value ) ) )
		END COMBOBOX

		Properties.Combo_1.DeleteAllItems

		DEFINE TAB Tab_1 AT 29,3 WIDTH 290 HEIGHT 198 + hFactor - nDeltaProp

			PAGE aMsgs [ 075 ]

				DEFINE GRID Grid_1
					ROW	27
					COL	5
					WIDTH	278
					HEIGHT	164  + hFactor - nDeltaProp
					HEADERS	{ aMsgs [ 077 ] , aMsgs [ 078 ] }
					WIDTHS	{125,122}
					ITEMS	{ {'',''},{'',''},{'',''},{'',''},{'',''} }
					FONTNAME 'Arial'
					FONTSIZE 9
					ON DBLCLICK PropertyEdit()
					TOOLTIP aMsgs [ 079 ]
				END GRID

				Properties.Grid_1.DeleteAllItems

			END PAGE

			PAGE aMsgs [ 076 ]

				DEFINE GRID Grid_2
					ROW	27
					COL	5
					WIDTH	278
					HEIGHT	164  + hFactor - nDeltaProp
					HEADERS	{ aMsgs [ 080 ] , aMsgs [ 081 ] , '' , '' , '' }
					WIDTHS	{105,90,20,20,20}
					ITEMS	{ {'','','','',''},{'','','','',''},{'','','','',''},{'','','','',''},{'','','','',''} }
					FONTNAME 'Arial'
					FONTSIZE 9
					ON DBLCLICK EventEdit()
					TOOLTIP aMsgs [ 082 ]
				END GRID

				Properties.Grid_2.DeleteAllItems

			END PAGE

		END TAB

	END WINDOW


	LOAD WINDOW rep_build_step_1
	LOAD WINDOW rep_build_step_2
	LOAD WINDOW rep_build_step_3
	LOAD WINDOW reportsummaryoptions
	LOAD WINDOW reporttitlesoptions
	LOAD WINDOW ReportFormatOptions
	LOAD WINDOW groupingOptions

	ACTIVATE WINDOW Building , Loading , Properties , Project , rep_build_step_1 , rep_build_step_2 , rep_build_step_3 , reportsummaryoptions , reporttitlesoptions , ReportFormatOptions , groupingoptions , Form_Main


Return Nil

PROCEDURE BuildIn64bits ( lBuild64 )

   IF lBuild64 == .T.
      Form_Main.IsBuild32.CHECKED := .F.
      Form_Main.IsBuild64.CHECKED := .T.
      SaveString (StartUpFolder + cFileBuildBat, '64-bits')
      CompilerVersion := HMG_GetCompileVersion64 ( cHmgFolder )

      //CompilerVersion := " Compiler: HMG (64 bits)  "
      //IF FILE (cHmgFolder + '\version64.txt')
      //   CompilerVersion := CompilerVersion + ALLTRIM (HB_UTF8STRTRAN (HB_MEMOREAD (cHmgFolder + '\version64.txt'), chr(26), ' '))
      //ENDIF

   ELSE
      Form_Main.IsBuild32.CHECKED := .T.
      Form_Main.IsBuild64.CHECKED := .F.
      SaveString (StartUpFolder + cFileBuildBat, '32-bits')
      CompilerVersion := HMG_GetCompileVersion32 ( cHmgFolder )

      //CompilerVersion := " Compiler: HMG (32 bits)  "
      //IF FILE (cHmgFolder + '\version.txt')
      //   CompilerVersion := CompilerVersion + ALLTRIM (HB_UTF8STRTRAN (HB_MEMOREAD (cHmgFolder + '\version.txt'), chr(26), ' '))
      //ENDIF

   ENDIF
   Form_Main.StatusBar.Item (0 + STATUSITEM_OFFSET) := CompilerVersion
RETURN

PROCEDURE CHANGE_TITLES()

   Form_Main.StatusBar.Item (1 + STATUSITEM_OFFSET) := aMsgs [ 048 ]

   Project.TITLE := aMsgs [ 065 ]
   Project.Tab_1.CAPTION (1) := aMsgs [ 066 ]
   Project.Tab_1.CAPTION (2) := aMsgs [ 067 ]
   Project.Tab_1.CAPTION (3) := aMsgs [ 068 ]
   Project.Tab_1.CAPTION (4) := aMsgs [ 069 ]
   Project.Tab_1.CAPTION (5) := aMsgs [ 278 ]
   Project.Tab_1.CAPTION (6) := aMsgs [ 279 ]
   Project.Tab_1.CAPTION (7) := aMsgs [ 095 ]

   Properties.TITLE := aMsgs [ 074 ]
   Properties.Tab_1.CAPTION (1) := aMsgs [ 075 ]
   Properties.Tab_1.CAPTION (2) := aMsgs [ 076 ]
   Properties.Grid_1.ColumnHEADER (1) := aMsgs [ 077 ]
   Properties.Grid_1.ColumnHEADER (2) := aMsgs [ 078 ]
   Properties.Grid_2.ColumnHEADER (1) := aMsgs [ 080 ]
   Properties.Grid_2.ColumnHEADER (2) := aMsgs [ 081 ]

   Form_Main.New.TOOLTIP := aMsgs [ 049 ]
   Form_Main.Open.TOOLTIP := aMsgs [ 050 ]
   Form_Main.Close.TOOLTIP := aMsgs [ 051 ]
   Form_Main.NewForm.TOOLTIP := aMsgs [ 052 ]
   Form_Main.NewModule.TOOLTIP := aMsgs [ 053 ]
   Form_Main.NewReport.TOOLTIP := aMsgs [ 028 ]
   Form_Main.Run.TOOLTIP := aMsgs [ 054 ]
   Form_Main.Control_01.TOOLTIP := aMsgs [ 055 ]
   Form_Main.Control_28.TOOLTIP := aMsgs [ 058 ]
   Form_Main.Control_31.TOOLTIP := aMsgs [ 059 ]
   Form_Main.Control_30.TOOLTIP := aMsgs [ 060 ]
   Form_Main.Control_29.TOOLTIP := aMsgs [ 061 ]
   Form_Main.Control_32.TOOLTIP := aMsgs [ 062 ]
   Form_Main.Control_33.TOOLTIP := aMsgs [ 063 ]
   Form_Main.Control_34.TOOLTIP := aMsgs [ 064 ]

   Project.List_1.TOOLTIP := aMsgs [ 070 ]
   Project.List_2.TOOLTIP := aMsgs [ 070 ]
   Project.Edit_1.TOOLTIP := aMsgs [ 072 ]
   Project.List_3.TOOLTIP := aMsgs [ 070 ]
   Project.List_4.TOOLTIP := aMsgs [ 070 ]
   Project.tables.TOOLTIP := aMsgs [ 070 ]

   Properties.Grid_1.TOOLTIP := aMsgs [ 079 ]
   Properties.Grid_2.TOOLTIP := aMsgs [ 082 ]

RETURN

PROCEDURE LOAD_LANGUAGE_MESSAGE()

LOCAL i, nNum, cText, cMsgs, cLin

   cMsgs := HB_MEMOREAD (StartUpFolder + ALLTRIM ( HB_UTF8STRTRAN (HB_MEMOREAD (StartUpFolder + cFileLanguage), chr(26), ' ')))

   AFILL (aMsgs, "XXX")

   for i := 1 To HMG_LEN ( cMsgs )
      cLin := ALLTRIM(memoline ( cMsgs , 254 , i ))
      nNum := VAL ( HB_ULEFT ( cLin , 3 ) )
      if nNum > 0
         cText := ALLTRIM ( HB_USUBSTR ( cLin , 5 , 254 ) )
         aMsgs [ nNum ] := cText
      endif
   next i

RETURN

PROCEDURE Proc_DEFINE_MAIN_MENU()

LOCAL cMsgs, lBuild64Bits

   IF IsMainMenuDefined ("Form_Main") == .T.
      lBuild64Bits := Form_Main.IsBuild64.CHECKED
      RELEASE MAIN MENU OF Form_Main
   ELSE
      cMsgs := HB_USUBSTR (ALLTRIM (HB_MEMOREAD (StartUpFolder + cFileBuildBat)), 1 ,7)
      IF HMG_UPPER (cMsgs) == HMG_UPPER ("64-bits")
         lBuild64Bits := .T.
      ELSE
         lBuild64Bits := .F.
      ENDIF
   ENDIF

   DEFINE MAIN MENU OF Form_Main

         POPUP aMsgs [ 045 ]
            ITEM aMsgs [ 001 ]                  IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'MNEW' , 'NEW' )         ACTION NewProject()
            ITEM aMsgs [ 002 ] + chr(8) + 'F2'  IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'MOPEN' , 'OPEN' )       ACTION OpenProject()
            ITEM aMsgs [ 003 ]                  IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'MXCLOSE' , 'XCLOSE' )   ACTION CloseProject()
            SEPARATOR
            ITEM aMsgs [ 006 ]                  IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'XEXIT' , 'EXIT' )       ACTION Exit()
         END POPUP

         POPUP aMsgs [ 046 ]
            ITEM aMsgs [ 007 ]                  IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'XDELETE' , 'DELETE' )   ACTION DeleteControl()
            SEPARATOR
            ITEM aMsgs [ 008 ]      ACTION   EditTabOrder()
            SEPARATOR
            ITEM aMsgs [ 009 ]      ACTION   if ( SnapToGrid == .T. , ( SnapToGrid := .F. , Form_Main.SnapToGrid.Checked := .F. ) , ( SnapToGrid := .T. , Form_Main.SnapToGrid.Checked := .T. ) ) NAME SnapToGrid
            SEPARATOR
            POPUP aMsgs [ 010 ]
               ITEM aMsgs [ 011 ]   ACTION Proc_DeleteMainMenu()
               ITEM aMsgs [ 012 ]   ACTION Proc_DeleteToolBar()
               ITEM aMsgs [ 013 ]   ACTION Proc_DeleteContextMenu()
               ITEM aMsgs [ 014 ]   ACTION Proc_DeleteStatusBar()
               ITEM aMsgs [ 015 ]   ACTION Proc_DeleteNotifyMenu()
               ITEM aMsgs [ 016 ]   ACTION Proc_DeleteSplitBox()
            END POPUP
         END POPUP

         POPUP aMsgs [ 017 ]
            ITEM aMsgs [ 018 ]                  IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'XVIEW' , 'VIEW' )    ACTION ViewCode()
         END POPUP

         POPUP aMsgs [ 019 ]
            ITEM aMsgs [ 021 ] + chr(8) +'F5'   IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'XRUN' , 'RUN' )      ACTION ( MixedMode := .F. , RunApplication() )
            ITEM aMsgs [ 023 ]                ACTION ( RESETINCREMENTAL := .T. , RunApplication() , MsgInfo('Operation Completed.'))
            SEPARATOR
            ITEM aMsgs [ 022 ] + chr(8) +'F8' ACTION ( ENABLEDEBUGGER := .T. , RunApplication() )
            SEPARATOR
            ITEM aMsgs [ 026 ] + chr(8) +'F11'  IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'XNMODULE' , 'NMODULE' )    ACTION NewModule()
            ITEM aMsgs [ 024 ] + chr(8) +'F9'   IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'XNEWFORM' ,  'NEWFORM' )   ACTION ( lVirtualForm := .F. , NewForm() )
            ITEM aMsgs [ 028 ]                ACTION NewReport()
            ITEM aMsgs [ 280 ]                ACTION NewInclude()
            ITEM aMsgs [ 096 ]                ACTION NewTable()
            SEPARATOR
            ITEM aMsgs [ 027 ]               ACTION AddItem()
            ITEM aMsgs [ 030 ]               ACTION EditFile()
            ITEM aMsgs [ 031 ]               ACTION ExcludeFile()
            ITEM aMsgs [ 029 ]               ACTION refreshproject()
            SEPARATOR
            ITEM aMsgs [ 004 ]                  IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'XSAVE' , 'SAVE' )	ACTION Save()
            ITEM aMsgs [ 005 ]               ACTION if ( _IsWIndowDefined (DesignForm) , DoMethod ( DesignForm , 'Release' ) , MsgStop( aMsgs [ 086 ] , 'HMG IDE' ) )
            SEPARATOR
            ITEM aMsgs [ 032 ]               ACTION SetMain()
         END POPUP

         POPUP aMsgs [ 033 ]
            POPUP aMsgs [ 034 ]
               ITEM aMsgs [ 035 ]   ACTION MainMenuBuilder()
               ITEM aMsgs [ 036 ]   ACTION StatusBarBuilder()
               ITEM aMsgs [ 037 ]   ACTION ContextMenuBuilder()
               ITEM aMsgs [ 038 ]   ACTION ToolBarBuilder()
               ITEM aMsgs [ 039 ]   ACTION DropDownMenuBuilder()
               ITEM aMsgs [ 040 ]   ACTION ContextMenuBuilder('N')
               ITEM aMsgs [ 041 ]   ACTION SplitBoxBuilder()
            END POPUP
            SEPARATOR
            ITEM aMsgs [ 042 ]      IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'XPREFERENCES' , 'PREFERENCES' )  ACTION Preferences()
         END POPUP

         POPUP "Build"
            ITEM "32-bits"   ACTION BuildIn64bits(.F.) NAME IsBuild32 CHECKED
            ITEM "64-bits"   ACTION BuildIn64bits(.T.) NAME IsBuild64 CHECKED
         END POPUP

         POPUP aMsgs [ 043 ]
            ITEM aMsgs [ 020 ]      ACTION {||ShellExecute(0, "open", "rundll32.exe", "url.dll,FileProtocolHandler " + docpath , ,1)}
            ITEM aMsgs [ 044 ]      IMAGE If ( nVersion < 6.0 .Or. .Not. IsAppThemed() , 'XXHELP' , 'XHELP' )  ACTION   msginfo ( Author + CRLF + _HLK , 'HMG-IDE' )
         END POPUP

   END MENU

   BuildIn64bits ( lBuild64Bits )

RETURN


Procedure AutoBuild()

   If nParameterCount == 1
      OpenProject()
   EndIf
Return

Procedure ResetProjectIncrementalBuildData()

   If Empty ( Projectname )
      MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
      Return
   EndIf
   If lForceFullWarning == .T.
      if MsgYesNo ( aMsgs [ 098 ] + CRLF + CRLF + aMsgs [ 099 ] )
         ResetProjectInfo	:= .T.
      endif
   Else
      ResetProjectInfo	:= .T.
   EndIf
return

Procedure LoadUserComponents()

LOCAL cCurrentDataType, cTemp
Local i
Local cComponentInfo
Local j
Local cComponentLine

	*** User Componets Load

	PUBLIC nComponentCount := ADIR (StartUpFolder + "*.UCI")

	PUBLIC aComponentFileNames	[ nComponentCount ]
	PUBLIC aComponentNames		[ nComponentCount ]
	PUBLIC aComponentProperties	[ nComponentCount ]
	PUBLIC aComponentEvents		[ nComponentCount ]

	PUBLIC aComponentPropValues	[ nComponentCount ]
	PUBLIC aComponentEvtValues	[ nComponentCount ]

	aDir ( StartUpFolder + '*.UCI' , aComponentFileNames )

	For i := 1 To nComponentCount

		aComponentNames		[ i ] := HB_ULEFT ( aComponentFileNames [i] , HMG_LEN ( aComponentFileNames [i] ) - 4 )
		aComponentProperties	[ i ] := {}
		aComponentEvents	[ i ] := {}

		aComponentPropValues	[ i ] := {}

		aComponentEvtValues	[ i ] := {}

		__MVPUBLIC ( aComponentNames [ i ] + 'Count' )
		__MVPUT ( aComponentNames [ i ] + 'Count' , 0 )

		cComponentInfo := HB_MEMOREAD ( aComponentFileNames [i] )

		For j := 1 To mlCount (cComponentInfo)

			cComponentLine := ALLTRIM ( MemoLine ( cComponentInfo , , j ) )

			If HMG_UPPER ( cComponentLine ) == '[PROPERTIES]'

				cCurrentDataType := 'Property'

			ElseIf HMG_UPPER ( cComponentLine ) == '[EVENTS]'

				cCurrentDataType := 'Event'

			Else

				If .Not. Empty ( cComponentLine )

					If cCurrentDataType == 'Property'

						if HB_UAT( "," , cComponentLine ) <> 0

							cTemp := HB_ULEFT ( cComponentLine , HB_UAT( "," , cComponentLine ) - 1 )
							aadd ( aComponentProperties [i] , cTemp )

							cTemp := HB_USUBSTR ( cComponentLine , HB_UAT( "," , cComponentLine ) + 1 , 255 )
							aadd ( aComponentPropValues [i] , cTemp )

						else

							cTemp := cComponentLine

							aadd ( aComponentProperties [i] , cTemp )

							aadd ( aComponentPropValues [i] , '' )

						endif

					ElseIf cCurrentDataType == 'Event'


						if HB_UAT( "," , cComponentLine ) <> 0

							cTemp := HB_ULEFT ( cComponentLine , HB_UAT( "," , cComponentLine ) - 1 )
							aadd ( aComponentEvents [i] , cTemp )

							cTemp := HB_USUBSTR ( cComponentLine , HB_UAT( "," , cComponentLine ) + 1 , 255 )
							aadd ( aComponentEvtValues [i] , cTemp )

						else

							cTemp := cComponentLine

							aadd ( aComponentEvents [i] , cTemp )

							aadd ( aComponentEvtValues [i] , '' )

						endif

					EndIf

				EndIf

			EndIf

		Next j

	Next i

Return

Procedure FillUserComponents()

Local i

	If nComponentCount > 0

		Form_main.user.deleteallitems

		For i := 1 To nComponentCount
			Form_main.user.additem ( aComponentNames [i] )
		Next i

	EndIf

Return

Procedure Proc_DeleteMainMenu()

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	if Empty(_hmgide_CurrentMainMenu  )
		MsgStop ( aMsgs [ 100 ] ,'HMG IDE')
	else
		if MsgYesNo( aMsgs [ 099 ] ,'HMG IDE')
			_hmgide_CurrentMainMenu := ''
			DesignFormModified := .T.
		endif
	endif

Return

Procedure Proc_DeleteToolBar()

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	if Empty(_hmgide_CurrentToolBar )
		MsgStop ( aMsgs [ 100 ] ,'HMG IDE')
	else
		if MsgYesNo( aMsgs [ 99 ] ,'HMG IDE')
			_hmgide_CurrentToolBar := ''
			DesignFormModified := .T.
		endif
	endif

Return

Procedure Proc_DeleteContextMenu()

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	if Empty(_hmgide_CurrentContextMenu )
		MsgStop ( aMsgs [ 100 ] ,'HMG IDE')
	else
		if MsgYesNo( aMsgs [ 099 ] ,'HMG IDE')
			_hmgide_CurrentContextMenu := ''
			DesignFormModified := .T.
		endif
	endif

Return

Procedure Proc_DeleteStatusBar()

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	if Empty(_hmgide_CurrentStatusBar )
		MsgStop ( aMsgs [ 100 ] ,'HMG IDE')
	else
		if MsgYesNo( aMsgs [ 099 ] ,'HMG IDE')
			_hmgide_CurrentStatusBar := ''
			DesignFormModified := .T.
		endif
	endif

Return

Procedure Proc_DeleteNotifyMenu()

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	if Empty(_hmgide_CurrentNotifyMenu )
		MsgStop ( aMsgs [ 100 ] ,'HMG IDE')
	else
		if MsgYesNo( aMsgs [ 099 ] ,'HMG IDE')
			_hmgide_CurrentNotifyMenu := ''
			DesignFormModified := .T.
		endif
	endif

Return

Procedure Proc_DeleteSplitBox()

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	if Empty(_hmgide_CurrentSplitBox )
		MsgStop ( aMsgs [ 100 ] ,'HMG IDE')
	else
		if MsgYesNo( aMsgs [ 099 ] ,'HMG IDE')
			_hmgide_CurrentSplitBox := ''
			DesignFormModified := .T.
		endif
	endif

Return

Procedure SetPropertyVirtualOn

Local k
Local wh
Local VirtualHeight
Local VirtualWidth
Local w
Local h

	VirtualHeight	:= GetProperty ( DesignForm , 'Height' )  * 2
	VirtualWidth	:= GetProperty ( DesignForm , 'Width' )  * 2

	lVirtualForm := .T.

	__MVPUT ( DesignForm + 'VirtualWidth' , ALLTRIM ( STR ( VirtualWidth ) ) )
	__MVPUT ( DesignForm + 'VirtualHeight' , ALLTRIM ( STR ( VirtualHeight ) ) )
	__MVPUT		( DesignForm + 'VirtualSized' , '.T.' )

	k := GetFormIndex ( DesignForm )
	wh := GetFormHandle ( DesignForm )

	w := GetWIndowWidth ( wh )
	h := GetWindowHeight ( wh )

	_HMG_SYSDATA [ 91 ]	 [k] :=  VirtualHeight
	_HMG_SYSDATA [ 92 ]	 [k] :=  VirtualWidth

	SetVirtualOn ( GetFormHandle ( DesignForm ) )

	SetScrollRange ( wh , SB_VERT , 0 , VirtualHeight - h , 1 )

	SetScrollRange ( wh , SB_HORZ , 0 , VirtualWidth - w , 1 )

	UpdateDesignFormProperties()

Return

Procedure SetPropertyVirtualOff

Local k

	do while .t.

		if GetScrollPos ( DesignFormhandle , SB_HORZ ) == 0 .and. GetScrollPos ( DesignFormhandle , SB_VERT ) == 0
			exit
		endif

		SendMessage ( DesignFormHandle , WM_VSCROLL , SB_PAGEUP , 0 )
		DO EVENTS

		SendMessage ( DesignFormHandle , WM_HSCROLL , SB_PAGELEFT , 0 )
		DO EVENTS

	enddo

	lVirtualForm := .F.

	__MVPUT ( DesignForm + 'VirtualWidth' , 'Nil' )
	__MVPUT ( DesignForm + 'VirtualHeight' , 'Nil' )
	__MVPUT	( DesignForm + 'VirtualSized' , '.F.' )

	k := GetFormIndex ( DesignForm )

	SetVirtualOff ( GetFormHandle ( DesignForm ) )

	_HMG_SYSDATA [ 91 ]	 [k] :=  0
	_HMG_SYSDATA [ 92 ]	 [k] :=  0

	UpdateDesignFormProperties()

Return

Procedure DropDownMenuBuilder()

Local aList

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	aList := FillDropDownMenuList()

	Define Window DropDownMenuBuilder ;
		At 0,0 ;
		Width 305 ;
		Height 250 + GetTitleHeight() + GetBorderHeight() ;
		Title aMsgs [ 101 ] ;
		Modal ;
		NoSize

		Define ListBox List1
			Row		10
			Col		10
			Width		170
			Height		227
			Items		aList
			Value 		1
			On DblClick	ContextMenuBuilder( 'D' , DropDownMenuBuilder.List1.Value , DropDownMenuBuilder.List1.Item (DropDownMenuBuilder.List1.Value) )
		End ListBox

		Define Button New
			Row	10
			Col	190
			Caption	aMsgs [ 102 ]
			Action	NewDropDownMenu()
		End Button

		Define Button Edit
			Row	40
			Col	190
			Caption	aMsgs [ 103 ]
			Action	ContextMenuBuilder( 'D' , DropDownMenuBuilder.List1.Value , DropDownMenuBuilder.List1.Item (DropDownMenuBuilder.List1.Value) )
		End Button

		Define Button Delete
			Row	70
			Col	190
			Caption	aMsgs [ 104 ]
			Action	DeleteDropDownMenu()
		End Button

		Define Button ChangeOwner
			Row	100
			Col	190
			Caption	aMsgs [ 105 ]
			Action	ChangeDropDownOwner()
		End Button

		Define Button Close
			Row	210
			Col	190
			Caption	aMsgs [ 106 ]
			Action	ThisWindow.Release
		End Button

	End Window

	DropDownMenuBuilder.Center

	DropDownMenuBuilder.Activate

	DoMethod ( DesignForm , 'SetFocus' )

	DrawGrid()

Return

Procedure ChangeDropDownOwner()

Local i
Local x
Local cOldName
Local cNewName
Local cNewMenu := ''
Local Line
Local LineCount

	i := DropDownMenuBuilder.List1.Value

	if i == 0
		Return
	endif

	cOldName := DropDownMenuBuilder.List1.Item(i)

	cNewName := ALLTRIM ( InputBox( aMsgs [ 107 ]  , aMsgs [ 108 ]  , cOldName ) )

	cNewName := ALLTRIM ( cNewName )

	if Empty ( cNewName )
		Return
	endif

	DropDownMenuBuilder.List1.Item(i) := cNewName

	DropDownMenuBuilder.List1.Value := i

	* Update Menu

	LineCount := MlCount ( _hmgide_aDropDownMenus [ i ] )

	For x := 1 To LineCount

		If x == 1

			cNewMenu := cNewMenu + '    DEFINE DROPDOWN MENU BUTTON ' + cNewName + CRLF

		Else

			Line := MemoLine ( _hmgide_aDropDownMenus [ i ] , 1024 , x , 4 , .t. )

			cNewMenu := cNewMenu + Line  + CRLF

		EndIf

	Next x

	_hmgide_aDropDownMenus [ i ] := cNewMenu

Return

Procedure NewDropDownMenu()

Local cNewName := ''
Local nBackItem

	cNewName := ALLTRIM ( InputBox( aMsgs [ 107 ] , aMsgs [ 110 ] ) )

	if Empty ( cNewName )
		Return
	endif

	nBackItem := DropDownMenuBuilder.List1.Value

	aadd ( _hmgide_aDropDownMenus , '' )

	DropDownMenuBuilder.List1.AddItem(cNewName)

	DropDownMenuBuilder.List1.Value := DropDownMenuBuilder.List1.ItemCount

	ContextMenuBuilder( 'D' , HMG_LEN ( _hmgide_aDropDownMenus ) , cNewName )

	if _HMG_SYSDATA [ 257 ] == .T.

		DropDownMenuBuilder.List1.DeleteItem ( HMG_LEN (_hmgide_aDropDownMenus) )

		adel ( _hmgide_aDropDownMenus , HMG_LEN (_hmgide_aDropDownMenus) )
		asize ( _hmgide_aDropDownMenus , HMG_LEN (_hmgide_aDropDownMenus) - 1 )

		DropDownMenuBuilder.List1.Value := nBackItem

	endif

Return

Procedure DeleteDropDownMenu()

Local i

	i := DropDownMenuBuilder.List1.Value

	if i == 0
		Return
	endif

	if !MsgYesNo( aMsgs [ 099 ] )
		Return
	endif

	adel ( _hmgide_aDropDownMenus , i )
	asize ( _hmgide_aDropDownMenus , HMG_LEN ( _hmgide_aDropDownMenus ) - 1 )

	DropDownMenuBuilder.List1.DeleteItem(i)
	DropDownMenuBuilder.List1.Value := 1

Return

Function FillDropDownMenuList

Local i
Local cName
Local aTemp := {}

	For i := 1 To HMG_LEN ( _hmgide_aDropDownMenus )

		cName := ALLTRIM ( MemoLine ( _hmgide_aDropDownMenus[i] , 1024 , 1 , 4 , .t. ) )

		cName := HB_URIGHT ( cName , HMG_LEN ( cName ) - 28 )

		aadd ( atemp , cName )

	Next i

Return aTemp

Procedure Dummy()

Return

Procedure New ( Activate )


	if IsWindowDefined(&DesignForm)
		DoMethod ( DesignForm , 'Release' )
	EndIf


	OpenFormName := ''
	DesignFormModified := .T.

*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

	Properties.Combo_1.DeleteAllItems
	Properties.Combo_1.AddItem ( 'Form' )
	*Properties.Combo_1.Value := 1

*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

	__MVPUBLIC	( DesignForm + 'Icon' )
	__MVPUT		( DesignForm + 'Icon' , '' )

	__MVPUBLIC	( DesignForm + 'GripperText' )
	__MVPUT		( DesignForm + 'GripperText' , '' )

	__MVPUBLIC	( DesignForm + 'Break' )
	__MVPUT		( DesignForm + 'Break' , '.F.' )

	__MVPUBLIC	( DesignForm + 'Focused' )
	__MVPUT		( DesignForm + 'Focused' , '.F.' )

	__MVPUBLIC	( DesignForm + 'TitleBar' )
	__MVPUT		( DesignForm + 'TitleBar' , '.T.' )

	__MVPUBLIC	( DesignForm + 'SysMenu' )
	__MVPUT		( DesignForm + 'SysMenu' , '.T.' )

	__MVPUBLIC	( DesignForm + 'Sizable' )
	__MVPUT		( DesignForm + 'Sizable' , '.T.' )

	__MVPUBLIC	( DesignForm + 'Visible' )
	__MVPUT		( DesignForm + 'Visible' , '.T.' )

	__MVPUBLIC	( DesignForm + 'Topmost' )
	__MVPUT		( DesignForm + 'Topmost' , '.F.' )

	__MVPUBLIC	( DesignForm + 'AutoRelease' )
	__MVPUT		( DesignForm + 'AutoRelease' , '.T.' )

	__MVPUBLIC	( DesignForm + 'MaxButton' )
	__MVPUT		( DesignForm + 'MaxButton' , '.T.' )

	__MVPUBLIC	( DesignForm + 'MinButton' )
	__MVPUT		( DesignForm + 'MinButton' , '.T.' )

	__MVPUBLIC	( DesignForm + 'Cursor' )
	__MVPUT		( DesignForm + 'Cursor' , '' )

	__MVPUBLIC	( DesignForm + 'OnInit' )
	__MVPUT		( DesignForm + 'OnInit' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnRelease' )
	__MVPUT		( DesignForm + 'OnRelease' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnInteractiveClose' )
	__MVPUT		( DesignForm + 'OnInteractiveClose' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnMouseClick' )
	__MVPUT		( DesignForm + 'OnMouseClick' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnMouseDrag' )
	__MVPUT		( DesignForm + 'OnMouseDrag' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnMouseMove' )
	__MVPUT		( DesignForm + 'OnMouseMove' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnSize' )
	__MVPUT		( DesignForm + 'OnSize' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnMaximize' )
	__MVPUT		( DesignForm + 'OnMaximize' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnMinimize' )
	__MVPUT		( DesignForm + 'OnMinimize' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnPaint' )
	__MVPUT		( DesignForm + 'OnPaint' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'BackColor' )
	__MVPUT		( DesignForm + 'BackColor' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'NotifyIcon' )
	__MVPUT		( DesignForm + 'NotifyIcon' , '' )

	__MVPUBLIC	( DesignForm + 'NotifyToolTip' )
	__MVPUT		( DesignForm + 'NotifyToolTip' , '' )

	__MVPUBLIC	( DesignForm + 'OnNotifyClick' )
	__MVPUT		( DesignForm + 'OnNotifyClick' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnGotFocus' )
	__MVPUT		( DesignForm + 'OnGotFocus' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnLostFocus' )
	__MVPUT		( DesignForm + 'OnLostFocus' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnScrollUp' )
	__MVPUT		( DesignForm + 'OnScrollUp' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnScrollDown' )
	__MVPUT		( DesignForm + 'OnScrollDown' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnScrollLeft' )
	__MVPUT		( DesignForm + 'OnScrollLeft' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnScrollRight' )
	__MVPUT		( DesignForm + 'OnScrollRight' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnHScrollBox' )
	__MVPUT		( DesignForm + 'OnHScrollBox' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'OnVScrollBox' )
	__MVPUT		( DesignForm + 'OnVScrollBox' , 'Nil' )

	__MVPUBLIC	( DesignForm + 'HelpButton' )
	__MVPUT		( DesignForm + 'HelpButton' , '.F.' )

	if ! lVirtualForm

		DEFINE WINDOW Form_1 AT mainHeight + 1 , 235 WIDTH 550 HEIGHT 350 ;
			TITLE '' ;
			CHILD ;
			NOMAXIMIZE ;
			NOMINIMIZE ;
			ON MOUSECLICK AddControl() ;
			ON SIZE ( UpdateDesignFormProperties() , DesignFormModified := .T. ) ;
			ON INIT DrawGrid() ;
			ON MOUSEDRAG MoveControl() ;
			ON MOUSEMOVE CursorUpdate() ;
			ON PAINT DrawGrid() ;
			ON RELEASE ( Properties.Grid_1.DeleteAllItems , Properties.Grid_2.DeleteAllItems , Properties.Combo_1.DeleteAllItems , Properties.Title := aMsgs [ 074 ] , SelectedControlName := '' , if ( DesignFormModified == .T. , if ( MsgYesNo (aMsgs [ 004 ] + ' ' + OpenFormName + '?' ) == .T. , Save() , Nil ) , Nil ) , OpenFormName := '' ) ;
			ON GOTFOCUS DrawSelectedControlFrame() ;
			ON SCROLLUP SelectControl ( SelectedControlName ) ;
			ON SCROLLDOWN SelectControl ( SelectedControlName ) ;
			ON SCROLLLEFT SelectControl ( SelectedControlName ) ;
			ON SCROLLRIGHT SelectControl ( SelectedControlName );
			ON HSCROLLBOX SelectControl ( SelectedControlName ) ;
			ON VSCROLLBOX SelectControl ( SelectedControlName )

			DEFINE TEXTBOX TEXT_DUMMY
				ROW 1000
				COL 1000
				WIDTH 0
				HEIGHT 0
			END TEXTBOX

			ON KEY DELETE ACTION DeleteControl()

			DEFINE TIMER internal_timer_1 INTERVAL 1 ACTION TimerTest()

			ON KEY F2		OF Form_1 ACTION OpenProject()
			ON KEY F5		OF Form_1 ACTION RunApplication()
			ON KEY F8		OF Form_1 ACTION ( ENABLEDEBUGGER := .T. , RunApplication() ) // ACTION ( RunAfetrBuild := .T. , DebuggerSupport	:= .T. , BuildProjectM() )
			ON KEY F9		OF Form_1 ACTION NewForm()
			ON KEY F11		OF Form_1 ACTION NewModule()

		END WINDOW

	else

		*msginfo ( __MVGET(DesignForm + 'VirtualWidth') , 'VirtualWidth' )
		*msginfo ( __MVGET(DesignForm + 'VirtualHeight') , 'VirtualHeight' )

		DEFINE WINDOW Form_1 AT mainHeight + 1 , 235 WIDTH 10 HEIGHT 10 ;
			VIRTUAL WIDTH VAL ( __MVGET(DesignForm + 'VirtualWidth') ) VIRTUAL HEIGHT VAL ( __MVGET(DesignForm + 'VirtualHeight') ) ;
			TITLE '' ;
			CHILD ;
			NOMAXIMIZE ;
			NOMINIMIZE ;
			ON MOUSECLICK AddControl() ;
			ON SIZE ( UpdateDesignFormProperties() , DesignFormModified := .T. ) ;
			ON INIT DrawGrid() ;
			ON MOUSEDRAG MoveControl() ;
			ON MOUSEMOVE CursorUpdate() ;
			ON PAINT DrawGrid() ;
			ON RELEASE ( Properties.Grid_1.DeleteAllItems , Properties.Grid_2.DeleteAllItems , Properties.Combo_1.DeleteAllItems , Properties.Title := aMsgs [ 074 ]  , SelectedControlName := '' , if ( DesignFormModified == .T. , if ( MsgYesNo (aMsgs [ 004 ] + ' ' + OpenFormName + '?' ) == .T. , Save() , Nil ) , Nil ) , OpenFormName := '' ) ;
			ON GOTFOCUS DrawSelectedControlFrame() ;
			ON SCROLLUP SelectControl ( SelectedControlName ) ;
			ON SCROLLDOWN SelectControl ( SelectedControlName ) ;
			ON SCROLLLEFT SelectControl ( SelectedControlName ) ;
			ON SCROLLRIGHT SelectControl ( SelectedControlName );
			ON HSCROLLBOX SelectControl ( SelectedControlName ) ;
			ON VSCROLLBOX SelectControl ( SelectedControlName )

			DEFINE TEXTBOX TEXT_DUMMY
				ROW 1000
				COL 1000
				WIDTH 0
				HEIGHT 0
			END TEXTBOX

			ON KEY DELETE ACTION DeleteControl()

			DEFINE TIMER internal_timer_1 INTERVAL 1 ACTION TimerTest()

			ON KEY F2		OF Form_1 ACTION OpenProject()
			ON KEY F5		OF Form_1 ACTION RunApplication()
			ON KEY F8		OF Form_1 ACTION ( ENABLEDEBUGGER := .T. , RunApplication() ) // ACTION ( RunAfetrBuild := .T. , DebuggerSupport	:= .T. , BuildProjectM() )
			ON KEY F9		OF Form_1 ACTION NewForm()
			ON KEY F11		OF Form_1 ACTION NewModule()

		END WINDOW

	endif

	DesignFormHandle := GetFormHandle ( DesignForm )

	SetProperty ( DesignForm , 'Cursor' , 'arrow' )

	__MVPUT ( DesignForm + 'WIndowType' , 'STANDARD' )

	UpdateDesignFormProperties()

	If Activate
		DoMethod (DesignForm , 'Activate')
		lVirtualForm := .F.
	EndIf

Return

Procedure CursorUpdate()

Local i
Local ControlRow
Local ControlCol
Local ControlWidth
Local ControlHeight
Local Found := .f.

		Form_Main.StatusBar.Item (3 + STATUSITEM_OFFSET) := ALLTRIM(STR(_HMG_SYSDATA [ 191 ])) + ',' + ALLTRIM(STR(_HMG_SYSDATA [ 192 ]))

	        For i := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )

			If _HMG_SYSDATA [   4 ] [i] == DesignFormhandle

				If !Empty (_HMG_SYSDATA [   2 ] [ i ] ) .and. HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'INTERNAL_TIMER_1' .and.  HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'TEXT_DUMMY'  .and. _HMG_SYSDATA [ 13 ]  [i] ==  .F.

				ControlRow := _HMG_SYSDATA [ 18 ] [i]
				ControlCol := _HMG_SYSDATA [ 19 ] [i]

				ControlWidth := _HMG_SYSDATA [ 20 ] [i]
				ControlHeight := _HMG_SYSDATA [ 21 ] [i]

				// Move

				If	( _HMG_SYSDATA [ 191 ] >= ControlRow -16 .and. _HMG_SYSDATA [ 191 ] <= ControlRow ) ;
					.and. ;
					( _HMG_SYSDATA [ 192 ] >= ControlCol -16 .and. _HMG_SYSDATA [ 192 ] <= ControlCol )

					if _HMG_SYSDATA [   2 ] [i] == SelectedControlName .and. ! Empty(SelectedControlName)

						SetProperty ( DesignForm , 'Cursor' , 'Hand' )
						Found := .T.
						Exit

					endif

				EndIf

				// Size

				If	( _HMG_SYSDATA [ 191 ] >= ControlRow + ControlHeight .and. _HMG_SYSDATA [ 191 ] <= ControlRow + ControlHeight + 16 ) ;
					.and. ;
					( _HMG_SYSDATA [ 192 ] >= ControlCol + ControlWidth .and. _HMG_SYSDATA [ 192 ] <= ControlCol + ControlWidth + 16 )

					If _HMG_SYSDATA [ 1 ] [ i ] = 'MONTHCAL'
						Exit
					EndIf
					If _HMG_SYSDATA [ 1 ] [ i ] = 'BUTTON' .and. _HMG_SYSDATA [ 39 ] [ i ] == 5
						Exit
					EndIf


					If _HMG_SYSDATA [ 191 ] < 20 .and. _HMG_SYSDATA [ 192 ] < 20
						Exit
					EndIf

					if _HMG_SYSDATA [   2 ] [i] == SelectedControlName .and. ! Empty(SelectedControlName)

						SetProperty ( DesignForm , 'Cursor' , 'Size' )
						Found := .t.
						Exit

					endif

				EndIf

				EndIf

			EndIf

		Next i

		If .not. found
			SetProperty ( DesignForm , 'Cursor' , 'arrow' )
		EndIf

Procedure TimerTest()

	If _HMG_SYSDATA [ 193 ] == 0 .and. ( MoveStarted == .T. .Or. SizeStarted == .T. )
		test()
	EndIf

Return

Procedure DeleteControl()

	if !_IsWIndowDefined (DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	If ! Empty (SelectedControlName)

		If MsgYesNo( aMsgs [ 099 ] , aMsgs [ 109 ] )

			DesignFormModified := .T.
			Properties.Grid_1.DeleteAllItems
			DoMethod( DesignForm , SelectedControlName , 'Release' )
			RedrawWindow(DesignFormHandle)
			DrawGrid()
			UpdateDesignFormProperties()

			UpdateCombo()

			Properties.Combo_1.Value := 1
			SelectedControlName := ''
			SetProperty ( DesignForm , 'Cursor' , 'arrow' )

		EndIf

	EndIf

Return

Procedure Exit()

	If MsgYesNo( aMsgs [ 099 ] ,'HMG IDE') == .T.
		Release Window All
	EndIf
Return

Function ProcessContainers( ControlName )

// Empty Function
   ControlName := NIL
Return NIL

Procedure Properties_Click

// Empty Function
Return

Procedure AddControl()

LOCAL VDC, VDR, ControlName, fmb, TMPBUTTONS
Local aName
Local ControlRow
Local ControlCol
Local i
Local ControlWidth
Local ControlHeight
Local dr
Local dc
Local x
Local HitTestOk
Local SupMin
Local TabName
Local TabPage
Local TabRow
Local TabCol
Local TabIndex
Local TabWidth
Local TabHeight
Local TabCaptions
Local SupMinName
Local TabFlat
Local f
Local z
Local y
Local aNames
Local aProperties
Local aEvents
Local apValues
Local aeValues

Private macrovar

	DesignFormModified := .T.

	If MoveStarted == .T.

		MoveStarted := .F.

		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Row' , _HMG_SYSDATA [ 191 ] )
		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Col' , _HMG_SYSDATA [ 192 ] )
		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Visible' , .T. )

		SelectControl ( _HMG_SYSDATA [   2 ] [ MoveIndex ] )

		Return

	EndIf

	If SizeStarted == .T.

		SizeStarted := .F.

		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Width' , _HMG_SYSDATA [ 192 ] - MoveCol )
		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Height' , _HMG_SYSDATA [ 191 ] - MoveRow )
		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Visible' , .T. )

		SelectControl ( _HMG_SYSDATA [   2 ] [ MoveIndex ] )

		Return

	EndIf

	if CurrentControl >= 2 .and. CurrentControl <= 27

		If SnapToGrid == .T.

			dr := 10 - VAL ( HB_URIGHT ( ALLTRIM( STR ( _HMG_SYSDATA [ 191 ] ) ) , 1 ) )
			_HMG_SYSDATA [ 191 ] := _HMG_SYSDATA [ 191 ] + dr

			dc := 10 - VAL ( HB_URIGHT ( ALLTRIM( STR ( _HMG_SYSDATA [ 192 ] ) ) , 1 ) )
			_HMG_SYSDATA [ 192 ] := _HMG_SYSDATA [ 192 ] + dc

		EndIf

	EndIf

	if form_main.user.value <> 0
		CurrentControl := 99
	endif

	Do Case

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 99
	///////////////////////////////////////////////////////////////////////

		f := form_main.user.value

		If f == 0
			Return
		EndIf

		__MVPUT ( aComponentNames [ f ] + 'Count' ,  __MVGET ( aComponentNames [ f ] + 'Count' ) + 1 )

		ControlName := aComponentNames [ f ] + '_' + ALLTRIM(STR( __MVGET ( aComponentNames [ f ] + 'Count' ) ) )

		Do While _IsControlDefined (ControlName,DesignForm)

			__MVPUT ( aComponentNames [ f ] + 'Count' ,  __MVGET ( aComponentNames [ f ] + 'Count' ) + 1 )

			ControlName := aComponentNames [ f ] + '_' + ALLTRIM(STR( __MVGET ( aComponentNames [ f ] + 'Count' ) ) )

		EndDo

		@ _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] LABEL &ControlName ;
			OF &DesignForm ;
			VALUE ControlName ACTION SelectControl (This.Name) ;
			WIDTH 150 HEIGHT 150 ;
			FONT 'ARIAL' SIZE 9 ;
			BORDER

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		_HMG_SYSDATA [ 39 ] [ GetControlIndex ( ControlName , DesignForm ) ] := 10 + f

		z := _HMG_SYSDATA [ 39 ] [ GetControlIndex ( ControlName , DesignForm ) ] - 10

		aNames		:= aComponentNames	[z]
		aProperties	:= aComponentProperties	[z]
		aEvents		:= aComponentEvents	[z]
		apValues	:= aComponentPropValues [z]
		aeValues	:= aComponentEvtValues  [z]

		For y := 1 To HMG_LEN ( aProperties )

			If	HMG_UPPER( ALLTRIM( aProperties[y] ) ) <> 'NAME'

				__MVPUBLIC ( ControlName + aProperties [y] )
				__MVPUT( ControlName + aProperties [y] , apValues [y] )

			EndIf

		Next y

		SetProperty ( DesignForm , ControlName , "Width"  , VAL ( __MVGET ( ControlName + "Width"  ) ) )
		SetProperty ( DesignForm , ControlName , "Height" , VAL ( __MVGET ( ControlName + "Height" ) ) )

		For y := 1 To HMG_LEN ( aEvents )

			__MVPUBLIC ( ControlName + aEvents [y] )
			__MVPUT( ControlName + aEvents [y] , aeValues [y] )

		Next y

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 1
	///////////////////////////////////////////////////////////////////////

	        For i := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )

			If _HMG_SYSDATA [   4 ] [i] == DesignFormhandle

				If  !Empty (_HMG_SYSDATA [   2 ] [ i ] ) .and. HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'INTERNAL_TIMER_1' .and.  HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'TEXT_DUMMY'  .and. _HMG_SYSDATA [ 13 ]  [i] ==  .F.

				ControlRow := _HMG_SYSDATA [ 18 ] [i]
				ControlCol := _HMG_SYSDATA [ 19 ] [i]

				ControlWidth := _HMG_SYSDATA [ 20 ] [i]
				ControlHeight := _HMG_SYSDATA [ 21 ] [i]

				// Move

				If	( _HMG_SYSDATA [ 191 ] >= ControlRow -16 .and. _HMG_SYSDATA [ 191 ] <= ControlRow ) ;
					.and. ;
					( _HMG_SYSDATA [ 192 ] >= ControlCol -16 .and. _HMG_SYSDATA [ 192 ] <= ControlCol )

					if _HMG_SYSDATA [   2 ] [i] == SelectedControlName .and. ! Empty(SelectedControlName)

						Form_Main.StatusBar.Item (3 + STATUSITEM_OFFSET) := ''

						MoveCol		:= ControlCol
						MoveRow		:= ControlRow
						MoveWidth	:= _HMG_SYSDATA [ 20 ] [i]
						MoveHeight	:= _HMG_SYSDATA [ 21 ] [i]
						MoveIndex 	:= i

						SetProperty ( DesignForm , 'Cursor' , 'Hand' )

						SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [i] , 'Visible' , .F. )

						MoveStarted := .T.

						If SnapToGrid == .T.

							dr := 10 - VAL ( HB_URIGHT ( ALLTRIM( STR ( _HMG_SYSDATA [ 191 ] ) ) , 1 ) )
							_HMG_SYSDATA [ 191 ] := _HMG_SYSDATA [ 191 ] + dr

							dc := 10 - VAL ( HB_URIGHT ( ALLTRIM( STR ( _HMG_SYSDATA [ 192 ] ) ) , 1 ) )
							_HMG_SYSDATA [ 192 ] := _HMG_SYSDATA [ 192 ] + dc

						EndIf

						_pr := _HMG_SYSDATA [ 191 ]
						_pc := _HMG_SYSDATA [ 192 ]

						Exit

					endif

				EndIf

				// Size

				If	( _HMG_SYSDATA [ 191 ] >= ControlRow + ControlHeight .and. _HMG_SYSDATA [ 191 ] <= ControlRow + ControlHeight + 16 ) ;
					.and. ;
					( _HMG_SYSDATA [ 192 ] >= ControlCol + ControlWidth .and. _HMG_SYSDATA [ 192 ] <= ControlCol + ControlWidth + 16 )

					If _HMG_SYSDATA [ 1 ] [ i ] = 'MONTHCAL'
						Exit
					EndIf
					If _HMG_SYSDATA [ 1 ] [ i ] = 'BUTTON' .and. _HMG_SYSDATA [ 39 ] [ i ] == 5
						Exit
					EndIf

					if _HMG_SYSDATA [   2 ] [i] == SelectedControlName .and. ! Empty(SelectedControlName)

						Form_Main.StatusBar.Item (3 + STATUSITEM_OFFSET) := ''

						MoveCol		:= ControlCol
						MoveRow		:= ControlRow
						MoveWidth	:= _HMG_SYSDATA [ 20 ] [i]
						MoveHeight	:= _HMG_SYSDATA [ 21 ] [i]
						MoveIndex 	:= i

						SetProperty ( DesignForm , 'Cursor' , 'Size' )

						SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [i] , 'Visible' , .F. )

						SizeStarted := .T.

						_pr := _HMG_SYSDATA [ 191 ]
						_pc := _HMG_SYSDATA [ 192 ]

						Exit

					endif

				EndIf

				EndIf

			EndIf

		Next i

		***

		SupMin := 999999999
		SupMinName := ''

		HitTestOk := .F.

		if MoveStarted == .f. .and. SizeStarted == .f.

		        For i := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )
				If _HMG_SYSDATA [   4 ] [i] == DesignFormhandle
					If  !Empty (_HMG_SYSDATA [   2 ] [ i ] ) .and. HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'INTERNAL_TIMER_1' .and.  HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'TEXT_DUMMY'  .and. _HMG_SYSDATA [ 13 ]  [i] ==  .F.

						If _HMG_SYSDATA [ 1 ] [ i ] == 'FRAME' .OR. _HMG_SYSDATA [ 1 ] [ i ] == 'TAB' .OR. _HMG_SYSDATA [ 1 ] [ i ] == 'ANIMATEBOX'

							ControlRow := _HMG_SYSDATA [ 18 ] [i]
							ControlCol := _HMG_SYSDATA [ 19 ] [i]
							ControlWidth := _HMG_SYSDATA [ 20 ] [i]
							ControlHeight := _HMG_SYSDATA [ 21 ] [i]

							if HitTest( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] , ControlRow , ControlCol , ControlWidth , ControlHeight ) == .T.
								if ( ControlWidth * ControlHeight ) < SupMin

									if IsFrameActive(i) == .T.

										SupMin := ControlWidth * ControlHeight
										SupMinName := _HMG_SYSDATA [   2 ] [i]
										HitTestOk := .T.
										/*
										if _HMG_SYSDATA [ 1 ] [i] == 'TAB'
										        cTemp := '{ '
											For j := 1 To HMG_LEN ( _HMG_SYSDATA [ 33 ] [i] )
												cTemp := cTemp + chr(34) + _HMG_SYSDATA [ 33 ] [i] [j] + chr(34) + ' , '
											Next j
									                cTemp := ALLTRIM (cTemp)
											cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 1 )
											cTemp := cTemp + '} '
											__MVPUT (_HMG_SYSDATA [   2 ] [i] + 'Captions' , cTemp )
											__MVPUT (_HMG_SYSDATA [   2 ] [i] + 'PageCount' , ALLTRIM(STR(HMG_LEN(_HMG_SYSDATA [ 7 ][i]))) )
										endif
		                                                                */

									endif

								endif

							EndIf

						EndIf

					EndIf

				EndIf

			Next i

		endif

		if HitTestOk == .T.

			SelectControl ( SupMinName )

		EndIf
		***

		if MoveStarted == .f. .and. SizeStarted == .f. .and. HitTestOk == .F.

			If .not. empty(SelectedControlName)
				x := GetControlIndex (SelectedControlName, DesignForm )
				If x > 0

					if lVirtualForm
						VDC := GetScrollPos ( DesignFormhandle , SB_HORZ )
						VDR := GetScrollPos ( DesignFormhandle , SB_VERT )
					else
						VDC := 0
						VDR := 0
					endif

					RedrawRect ( DesignFormhandle , _HMG_SYSDATA [ 18 ] [x] - 10 - VDR, _HMG_SYSDATA [ 19 ] [x] - 10 - VDC , _HMG_SYSDATA [ 18 ] [x]+_HMG_SYSDATA [ 21 ] [x]+10 - VDR , _HMG_SYSDATA [ 19 ] [x]+_HMG_SYSDATA [ 20 ] [x]+10 - VDC )
				EndIf
			EndIf

			UpdateDesignFormProperties()
			Properties.Combo_1.Value := 1

			SelectedControlname := ''

		EndIf

		DrawGrid()

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 2
	///////////////////////////////////////////////////////////////////////
		ButtonCount++
		ControlName := 'Button_'+ALLTRIM(STR(ButtonCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			ButtonCount++
			ControlName := 'Button_'+ALLTRIM(STR(ButtonCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] BUTTON &ControlName OF &DesignForm CAPTION ControlName FONT 'Arial' SIZE 9 ACTION dummy() ON GOTFOCUS SelectControl( This.Name )

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Caption' )
		__MVPUT( ControlName + 'Caption' , ControlName )
		__MVPUBLIC ( ControlName + 'Action' )
		__MVPUT( ControlName + 'Action' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'Flat' )
		__MVPUT( ControlName + 'Flat' , '.F.' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Transparent' )
		__MVPUT( ControlName + 'Transparent' , '.F.' )
		__MVPUBLIC ( ControlName + 'Picture' )
		__MVPUT( ControlName + 'Picture' , '' )
		__MVPUBLIC ( ControlName + 'PictAlignMent' )
		__MVPUT( ControlName + 'PictAlignment' , 'TOP' )
		__MVPUBLIC ( ControlName + 'MultiLine' )
		__MVPUT( ControlName + 'MultiLine' , '.F.' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 3
	///////////////////////////////////////////////////////////////////////
		CheckBoxCount++
		ControlName := 'Check_'+ALLTRIM(STR(CheckBoxCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			CheckBoxCount++
			ControlName := 'Check_'+ALLTRIM(STR(CheckBoxCount))
		EndDo

		TabName := TabHit( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] )

		if ! empty ( TabName )
			fmb := _HMG_SYSDATA [ 183 ]
			_HMG_SYSDATA [ 183 ] := 1
			_HMG_SYSDATA [ 225 ]  := TabName
			_HMG_SYSDATA [ 332 ] [_HMG_SYSDATA [ 183 ]] := DesignForm
		endif

		if ! empty ( TabName )
			_HMG_SYSDATA [ 266 ] := _HMG_SYSDATA [ 31 ] [ GetControlIndex ( TabName , DesignForm ) ]
		endif

		@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] CHECKBOX &ControlName OF &DesignForm CAPTION ControlName FONT 'Arial' SIZE 9 On Change SelectControl (This.Name)

		if ! empty ( TabName )
			_HMG_SYSDATA [ 183 ] := fmb
		endif

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		if ! empty ( TabName )
			_HMG_SYSDATA [ 16 ] [ GetControlIndex ( ControlName , DesignForm ) ] := _HMG_SYSDATA [ 31 ]  [ GetControlIndex ( TabName , DesignForm ) ]
		endif

		__MVPUBLIC ( ControlName + 'Caption' )
		__MVPUT( ControlName + 'Caption' , ControlName )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'Field' )
		__MVPUT( ControlName + 'Field' , 'Nil' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Transparent' )
		__MVPUT( ControlName + 'Transparent' , '.F.' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 4
	///////////////////////////////////////////////////////////////////////
		ListBoxCount++
		ControlName := 'List_'+ALLTRIM(STR(ListBoxCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			ListBoxCount++
			ControlName := 'List_'+ALLTRIM(STR(ListBoxCount))
		EndDo

		aName := { ControlName }
		@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] LISTBOX &ControlName OF &DesignForm WIDTH 100 HEIGHT 100 ITEMS aName FONT 'Arial' SIZE 9 ON GOTFOCUS SelectControl ( This.Name )

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Items' )
		__MVPUT( ControlName + 'Items' , '{""}' )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '0' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnDblClick' )
		__MVPUT( ControlName + 'OnDblClick' , 'Nil' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Sort' )
		__MVPUT( ControlName + 'Sort' , '.F.' )
		__MVPUBLIC ( ControlName + 'MultiSelect' )
		__MVPUT( ControlName + 'MultiSelect' , '.F.' )
		__MVPUBLIC ( ControlName + 'DragItems' )
		__MVPUT( ControlName + 'DragItems' , '.F.' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 5
	///////////////////////////////////////////////////////////////////////
		ComboBoxCount++
		ControlName := 'Combo_'+ALLTRIM(STR(ComboBoxCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			ComboBoxCount++
			ControlName := 'Combo_'+ALLTRIM(STR(ComboBoxCount))
		EndDo

		aName := { ControlName }
		@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] COMBOBOX &ControlName OF &DesignForm WIDTH 100 HEIGHT 100 ITEMS aName VALUE 1 FONT 'Arial' SIZE 9 ON GOTFOCUS SelectControl ( This.Name )

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Items' )
		__MVPUT( ControlName + 'Items' , '{""}' )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '0' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Sort' )
		__MVPUT( ControlName + 'Sort' , '.F.' )
		__MVPUBLIC ( ControlName + 'OnEnter' )
		__MVPUT( ControlName + 'OnEnter' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnDisplayChange' )
		__MVPUT( ControlName + 'OnDisplayChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'DisplayEdit' )
		__MVPUT( ControlName + 'DisplayEdit' , '.F.' )
		__MVPUBLIC ( ControlName + 'ItemSource' )
		__MVPUT( ControlName + 'ItemSource' , 'Nil' )
		__MVPUBLIC ( ControlName + 'ValueSource' )
		__MVPUT( ControlName + 'ValueSource' , '' )

		__MVPUBLIC ( ControlName + 'Image' )
		__MVPUT( ControlName + 'Image' , 'Nil' )

		__MVPUBLIC ( ControlName + 'DroppedWidth' )
		__MVPUT( ControlName + 'DroppedWidth' , 'Nil' )

		__MVPUBLIC ( ControlName + 'OnDropDown' )
		__MVPUT( ControlName + 'OnDropDown' , 'Nil' )

		__MVPUBLIC ( ControlName + 'OnCloseUp' )
		__MVPUT( ControlName + 'OnCloseUp' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 6
	///////////////////////////////////////////////////////////////////////
		CheckButtonCount++
		ControlName := 'CheckBtn_'+ALLTRIM(STR(CheckButtonCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			CheckButtonCount++
			ControlName := 'CheckBtn_'+ALLTRIM(STR(CheckButtonCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] CHECKBUTTON &ControlName OF &DesignForm CAPTION ControlName FONT 'Arial' SIZE 9 ON CHANGE SelectControl (This.name)

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		_HMG_SYSDATA [ 39 ] [ GetControlIndex ( ControlName , DesignForm ) ] := 1

		__MVPUBLIC ( ControlName + 'Caption' )
		__MVPUT( ControlName + 'Caption' , ControlName )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Picture' )
		__MVPUT( ControlName + 'Picture' , '' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 7
	///////////////////////////////////////////////////////////////////////
		GridCount++
		ControlName := 'Grid_'+ALLTRIM(STR(GridCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			GridCount++
			ControlName := 'Grid_'+ALLTRIM(STR(GridCount))
		EndDo

		aName := { { ControlName } }
		@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] GRID &ControlName OF &DesignForm WIDTH 120 HEIGHT 120 HEADERS {''} WIDTHS {100} ITEMS aName FONT 'Arial' SIZE 9 ON GOTFOCUS SelectControl(This.name)

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Items' )
		__MVPUT( ControlName + 'Items' , '{ {""} }' )
		__MVPUBLIC ( ControlName + 'Headers' )
		__MVPUT( ControlName + 'Headers' , "{''}" )
		__MVPUBLIC ( ControlName + 'Widths' )
		__MVPUT( ControlName + 'Widths' , "{ 0 }" )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'OnDblClick' )
		__MVPUT( ControlName + 'OnDblClick' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnHeadClick' )
		__MVPUT( ControlName + 'OnHeadClick' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnQueryData' )
		__MVPUT( ControlName + 'OnQueryData' , 'Nil' )
		__MVPUBLIC ( ControlName + 'MultiSelect' )
		__MVPUT( ControlName + 'MultiSelect' , '.F.' )
		__MVPUBLIC ( ControlName + 'AllowEdit' )
		__MVPUT( ControlName + 'AllowEdit' , '.F.' )
		__MVPUBLIC ( ControlName + 'Virtual' )
		__MVPUT( ControlName + 'Virtual' , '.F.' )
		__MVPUBLIC ( ControlName + 'Lines' )
		__MVPUT( ControlName + 'Lines' , '.T.' )
		__MVPUBLIC ( ControlName + 'Image' )
		__MVPUT( ControlName + 'Image' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Justify' )
		__MVPUT( ControlName + 'Justify' , 'Nil' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'ItemCount' )
		__MVPUT( ControlName + 'ItemCount' , 'Nil' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )

		* 2.0

		__MVPUBLIC ( ControlName + 'DynamicBackColor' )
		__MVPUT( ControlName + 'DynamicBackColor' , 'Nil' )

		__MVPUBLIC ( ControlName + 'DynamicForeColor' )
		__MVPUT( ControlName + 'DynamicForeColor' , 'Nil' )

		__MVPUBLIC ( ControlName + 'ColumnWhen' )
		__MVPUT( ControlName + 'ColumnWhen' , 'Nil' )

		__MVPUBLIC ( ControlName + 'ColumnValid' )
		__MVPUT( ControlName + 'ColumnValid' , 'Nil' )

		__MVPUBLIC ( ControlName + 'ColumnControls' )
		__MVPUT( ControlName + 'ColumnControls' , 'Nil' )

		__MVPUBLIC ( ControlName + 'ShowHeaders' )
		__MVPUT( ControlName + 'ShowHeaders' , '.T.' )

		__MVPUBLIC ( ControlName + 'HeaderImages' )
		__MVPUT( ControlName + 'HeaderImages' , 'Nil' )

		__MVPUBLIC ( ControlName + 'CellNavigation' )
		__MVPUT( ControlName + 'CellNavigation' , '.F.' )

		* _._

		__MVPUBLIC ( ControlName + 'RowSource' )
		__MVPUT( ControlName + 'RowSource' , 'Nil' )

		__MVPUBLIC ( ControlName + 'ColumnFields' )
		__MVPUT( ControlName + 'ColumnFields' , 'Nil' )

		__MVPUBLIC ( ControlName + 'AllowAppend' )
		__MVPUT( ControlName + 'AllowAppend' , '.F.' )

		__MVPUBLIC ( ControlName + 'AllowDelete' )
		__MVPUT( ControlName + 'AllowDelete' , '.F.' )

		__MVPUBLIC ( ControlName + 'Buffered' )
		__MVPUT( ControlName + 'Buffered' , '.F.' )

		__MVPUBLIC ( ControlName + 'DynamicDisplay' )
		__MVPUT( ControlName + 'DynamicDisplay' , 'Nil' )

		__MVPUBLIC ( ControlName + 'OnSave' )
		__MVPUT( ControlName + 'OnSave' , 'Nil' )

		__MVPUBLIC ( ControlName + 'LockColumns' )
		__MVPUT( ControlName + 'LockColumns' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 8
	///////////////////////////////////////////////////////////////////////
		SliderCount++
		ControlName := 'Slider_'+ALLTRIM(STR(SliderCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			SliderCount++
			ControlName := 'Slider_'+ALLTRIM(STR(SliderCount))
		EndDo

		TabName := TabHit( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] )

		if ! empty ( TabName )
			fmb := _HMG_SYSDATA [ 183 ]
			_HMG_SYSDATA [ 183 ] := 1
			_HMG_SYSDATA [ 225 ]  := TabName
			_HMG_SYSDATA [ 332 ] [_HMG_SYSDATA [ 183 ]] := DesignForm
		endif

		if ! empty ( TabName )
			_HMG_SYSDATA [ 266 ] := _HMG_SYSDATA [ 31 ] [ GetControlIndex ( TabName , DesignForm ) ]
		endif

		@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] SLIDER &ControlName OF &DesignForm RANGE 1,10 VALUE 5 ON CHANGE SelectControl (This.Name)

		if ! empty ( TabName )
			_HMG_SYSDATA [ 183 ] := fmb
		endif

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		if ! empty ( TabName )
			_HMG_SYSDATA [ 16 ] [ GetControlIndex ( ControlName , DesignForm ) ] := _HMG_SYSDATA [ 31 ]  [ GetControlIndex ( TabName , DesignForm ) ]
		endif

		SetFocus ( GetControlhandle ( ControlName , DesignForm ) )

		__MVPUBLIC ( ControlName + 'RangeMin' )
		__MVPUT( ControlName + 'RangeMin' , '1' )
		__MVPUBLIC ( ControlName + 'RangeMax' )
		__MVPUT( ControlName + 'RangeMax' , '10' )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '0' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'TickMarks' )
		__MVPUT( ControlName + 'TickMarks' , 'BOTTOM' )
		__MVPUBLIC ( ControlName + 'Orientation' )
		__MVPUT( ControlName + 'Orientation' , 'HORIZONTAL' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 9
	///////////////////////////////////////////////////////////////////////
		SpinnerCount++
		ControlName := 'Spinner_'+ALLTRIM(STR(SpinnerCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			SpinnerCount++
			ControlName := 'Spinner_'+ALLTRIM(STR(SpinnerCount))
		EndDo

		DEFINE SPINNER &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			VALUE 5
			RANGEMIN 1
			RANGEMAX 10
			ON GOTFOCUS SelectControl (This.Name)
			FONTNAME 'ARIAL'
			FONTSIZE 9
		END SPINNER

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'RangeMin' )
		__MVPUT( ControlName + 'RangeMin' , '1' )
		__MVPUBLIC ( ControlName + 'RangeMax' )
		__MVPUT( ControlName + 'RangeMax' , '10' )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '0' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Wrap' )
		__MVPUT( ControlName + 'Wrap' , '.F.' )
		__MVPUBLIC ( ControlName + 'ReadOnly' )
		__MVPUT( ControlName + 'ReadOnly' , '.F.' )
		__MVPUBLIC ( ControlName + 'Increment' )
		__MVPUT( ControlName + 'Increment' , '1' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 10
	///////////////////////////////////////////////////////////////////////
		ImageCount++
		ControlName := 'Image_'+ALLTRIM(STR(ImageCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			ImageCount++
			ControlName := 'Image_'+ALLTRIM(STR(ImageCount))
		EndDo

		DEFINE IMAGE &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			WIDTH 123
			HEIGHT 123
			ACTION SelectControl (This.name)
			PICTURE 'demo'
			STRETCH .T.
		END IMAGE

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Picture' )
		__MVPUT( ControlName + 'Picture' , '' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Stretch' )
		__MVPUT( ControlName + 'Stretch' , '.F.' )
		__MVPUBLIC ( ControlName + 'Action' )
		__MVPUT( ControlName + 'Action' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 11
	///////////////////////////////////////////////////////////////////////

		TreeCount++
		ControlName := 'Tree_'+ALLTRIM(STR(TreeCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			TreeCount++
			ControlName := 'Tree_'+ALLTRIM(STR(TreeCount))
		EndDo


		DEFINE TREE &ControlName ;
			OF &DesignForm ;
			AT _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] ;
			TOOLTIP ControlName ;
			ON GOTFOCUS SelectControl(This.Name)

			NODE ControlName
			END NODE

		END TREE

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '0' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'OnDblClick' )
		__MVPUT( ControlName + 'OnDblClick' , 'Nil' )
		__MVPUBLIC ( ControlName + 'NodeImages' )
		__MVPUT( ControlName + 'NodeImages' , 'Nil' )
		__MVPUBLIC ( ControlName + 'ItemImages' )
		__MVPUT( ControlName + 'ItemImages' , 'Nil' )
		__MVPUBLIC ( ControlName + 'RootButton' )
		__MVPUT( ControlName + 'RootButton' , '.T.' )
		__MVPUBLIC ( ControlName + 'ItemIds' )
		__MVPUT( ControlName + 'ItemIds' , '.F.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 12
	///////////////////////////////////////////////////////////////////////
		DatePickerCount++
		ControlName := 'DatePicker_'+ALLTRIM(STR(DatePickerCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			DatePickerCount++
			ControlName := 'DatePicker_'+ALLTRIM(STR(DatePickerCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] DATEPICKER &ControlName OF &DesignForm FONT 'Arial' SIZE 9 TOOLTIP ControlName ON GOTFOCUS SelectControl(This.Name)

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , 'CTOD("  /  /  ")' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'OnEnter' )
		__MVPUT( ControlName + 'OnEnter' , 'Nil' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'ShowNone' )
		__MVPUT( ControlName + 'ShowNone' , '.F.' )
		__MVPUBLIC ( ControlName + 'UpDown' )
		__MVPUT( ControlName + 'UpDown' , '.F.' )
		__MVPUBLIC ( ControlName + 'RightAlign' )
		__MVPUT( ControlName + 'RightAlign' , '.F.' )
		__MVPUBLIC ( ControlName + 'Field' )
		__MVPUT( ControlName + 'Field' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 13
	///////////////////////////////////////////////////////////////////////
		TextBoxCount++
		ControlName := 'Text_'+ALLTRIM(STR(TextBoxCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			TextBoxCount++
			ControlName := 'Text_'+ALLTRIM(STR(TextBoxCount))
		EndDo

		DEFINE TEXTBOX &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			VALUE ControlName
			ON GOTFOCUS SelectControl( This.Name )
			FONTNAME 'ARIAL'
			FONTSIZE 9
		END TEXTBOX

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , "" )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'InputMask' )
		__MVPUT( ControlName + 'InputMask' , '' )
		__MVPUBLIC ( ControlName + 'Format' )
		__MVPUT( ControlName + 'Format' , '' )
		__MVPUBLIC ( ControlName + 'DataType' )
		__MVPUT( ControlName + 'DataType' , 'CHARACTER' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'OnEnter' )
		__MVPUT( ControlName + 'OnEnter' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Field' )
		__MVPUT( ControlName + 'Field' , 'Nil' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'ReadOnly' )
		__MVPUT( ControlName + 'ReadOnly' , '.F.' )
		__MVPUBLIC ( ControlName + 'RightAlign' )
		__MVPUT( ControlName + 'RightAlign' , '.F.' )
		__MVPUBLIC ( ControlName + 'MaxLength' )
		__MVPUT( ControlName + 'MaxLength' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Password' )
		__MVPUT( ControlName + 'Password' , '.F.' )
		__MVPUBLIC ( ControlName + 'CaseConvert' )
		__MVPUT( ControlName + 'CaseConvert' , 'NONE' )

		__MVPUBLIC ( ControlName + 'DisabledBackColor' )
		__MVPUT( ControlName + 'DisabledBackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'DisabledFontColor' )
		__MVPUT( ControlName + 'DisabledFontColor' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 14
	///////////////////////////////////////////////////////////////////////
		EditBoxCount++
		ControlName := 'Edit_'+ALLTRIM(STR(EditBoxCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			EditBoxCount++
			ControlName := 'Edit_'+ALLTRIM(STR(EditBoxCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] EDITBOX &ControlName OF &DesignForm WIDTH 120 HEIGHT 120 VALUE ControlName FONT 'ARIAL' SIZE 9 ON GOTFOCUS SelectControl (This.Name)

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , "" )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Field' )
		__MVPUT( ControlName + 'Field' , 'Nil' )
		__MVPUBLIC ( ControlName + 'MaxLength' )
		__MVPUT( ControlName + 'MaxLength' , 'Nil' )
		__MVPUBLIC ( ControlName + 'ReadOnly' )
		__MVPUT( ControlName + 'ReadOnly' , '.F.' )

		__MVPUBLIC ( ControlName + 'hScrollBar' )
		__MVPUT( ControlName + 'hScrollBar' , '.T.' )

		__MVPUBLIC ( ControlName + 'vScrollBar' )
		__MVPUT( ControlName + 'vScrollBar' , '.T.' )

		__MVPUBLIC ( ControlName + 'DisabledBackColor' )
		__MVPUT( ControlName + 'DisabledBackColor' , 'Nil' )

		__MVPUBLIC ( ControlName + 'DisabledFontColor' )
		__MVPUT( ControlName + 'DisabledFontColor' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 15
	///////////////////////////////////////////////////////////////////////
		LabelCount++
		ControlName := 'Label_'+ALLTRIM(STR(LabelCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			LabelCount++
			ControlName := 'Label_'+ALLTRIM(STR(LabelCount))
		EndDo

		TabName := TabHit( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] )

		if ( ! Empty ( TabName ) ) .AND. ( IsAppThemed() .Or. IsVista() )

			@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] LABEL &ControlName OF &DesignForm VALUE ControlName FONT 'ARIAL' SIZE 9 ACTION SelectControl( This.Name ) TRANSPARENT

		else

			@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] LABEL &ControlName OF &DesignForm VALUE ControlName FONT 'ARIAL' SIZE 9 ACTION SelectControl( This.Name )

		endif

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , ControlName )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Transparent' )
		__MVPUT( ControlName + 'Transparent' , '.F.' )
		__MVPUBLIC ( ControlName + 'Action' )
		__MVPUT( ControlName + 'Action' , 'Nil' )
		__MVPUBLIC ( ControlName + 'AutoSize' )
		__MVPUT( ControlName + 'AutoSize' , '.F.' )
		__MVPUBLIC ( ControlName + 'Alignment' )
		__MVPUT( ControlName + 'Alignment' , 'LEFT' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 16
	///////////////////////////////////////////////////////////////////////

		BrowseCount++
		ControlName := 'Browse_'+ALLTRIM(STR(BrowseCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			BrowseCount++
			ControlName := 'Browse_'+ALLTRIM(STR(BrowseCount))
		EndDo

		DEFINE BROWSE &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			WIDTH 120
			HEIGHT 120
			HEADERS { ControlName }
			WIDTHS { 100 }
			WORKAREA Test
			FIELDS { 'Test->Code' }
			ON GOTFOCUS SelectControl (This.Name)
			VALUE 1
			FONTNAME 'ARIAL'
			FONTSIZE 9
			VSCROLLBAR .F.
		END BROWSE

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		DoMethod( DesignForm ,  ControlName , 'Refresh' )

		__MVPUBLIC ( ControlName + 'WorkArea' )
		__MVPUT( ControlName + 'WorkArea' , "Nil" )
		__MVPUBLIC ( ControlName + 'Fields' )
		__MVPUT( ControlName + 'Fields' , "{''}" )
		__MVPUBLIC ( ControlName + 'Headers' )
		__MVPUT( ControlName + 'Headers' , "{''}" )
		__MVPUBLIC ( ControlName + 'Widths' )
		__MVPUT( ControlName + 'Widths' , "{0}" )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '0' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnDblClick' )
		__MVPUT( ControlName + 'OnDblClick' , 'Nil' )
		__MVPUBLIC ( ControlName + 'AllowEdit' )
		__MVPUT( ControlName + 'AllowEdit' , '.F.' )
		__MVPUBLIC ( ControlName + 'AllowAppend' )
		__MVPUT( ControlName + 'AllowAppend' , '.F.' )
		__MVPUBLIC ( ControlName + 'OnHeadClick' )
		__MVPUT( ControlName + 'OnHeadClick' , 'Nil' )
		__MVPUBLIC ( ControlName + 'AllowDelete' )
		__MVPUT( ControlName + 'AllowDelete' , '.F.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Image' )
		__MVPUT( ControlName + 'Image' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Justify' )
		__MVPUT( ControlName + 'Justify' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Lines' )
		__MVPUT( ControlName + 'Lines' , '.T.' )
		__MVPUBLIC ( ControlName + 'ReadOnlyFields' )
		__MVPUT( ControlName + 'ReadOnlyFields' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Valid' )
		__MVPUT( ControlName + 'Valid' , 'Nil' )
		__MVPUBLIC ( ControlName + 'ValidMessages' )
		__MVPUT( ControlName + 'ValidMessages' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Lock' )
		__MVPUT( ControlName + 'Lock' , '.F.' )
		__MVPUBLIC ( ControlName + 'vScrollBar' )
		__MVPUT( ControlName + 'vScrollBar' , '.T.' )

		__MVPUBLIC ( ControlName + 'DynamicBackColor' )
		__MVPUT( ControlName + 'DynamicBackColor' , 'Nil' )

		__MVPUBLIC ( ControlName + 'DynamicForeColor' )
		__MVPUT( ControlName + 'DynamicForeColor' , 'Nil' )

		__MVPUBLIC ( ControlName + 'InputMask' )
		__MVPUT( ControlName + 'InputMask' , 'Nil' )

		__MVPUBLIC ( ControlName + 'Format' )
		__MVPUT( ControlName + 'Format' , 'Nil' )

		__MVPUBLIC ( ControlName + 'When' )
		__MVPUT( ControlName + 'When' , 'Nil' )

		__MVPUBLIC ( ControlName + 'InputItems' )
		__MVPUT( ControlName + 'InputItems' , 'Nil' )

		__MVPUBLIC ( ControlName + 'DisplayItems' )
		__MVPUT( ControlName + 'DisplayItems' , 'Nil' )

		__MVPUBLIC ( ControlName + 'HeaderImages' )
		__MVPUT( ControlName + 'HeaderImages' , 'Nil' )


	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 17
	///////////////////////////////////////////////////////////////////////
		RadioGroupCount++
		ControlName := 'RadioGroup_'+ALLTRIM(STR(RadioGroupCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			RadioGroupCount++
			ControlName := 'RadioGroup_'+ALLTRIM(STR(RadioGroupCount))
		EndDo

		TabName := TabHit( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] )

		if ! empty ( TabName )
			fmb := _HMG_SYSDATA [ 183 ]
			_HMG_SYSDATA [ 183 ] := 1
			_HMG_SYSDATA [ 225 ]  := TabName
			_HMG_SYSDATA [ 332 ] [_HMG_SYSDATA [ 183 ]] := DesignForm
		endif

		if ! empty ( TabName )
			_HMG_SYSDATA [ 266 ] := _HMG_SYSDATA [ 31 ] [ GetControlIndex ( TabName , DesignForm ) ]
		endif

		DEFINE RADIOGROUP &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			OPTIONS { 'Option 1','Option 2'}
			ON CHANGE SelectControl (This.Name)
			FONTNAME 'ARIAL'
			FONTSIZE 9
		END RADIOGROUP

		if ! empty ( TabName )
			_HMG_SYSDATA [ 183 ] := fmb
		endif

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		if ! empty ( TabName )
			_HMG_SYSDATA [ 16 ] [ GetControlIndex ( ControlName , DesignForm ) ] := _HMG_SYSDATA [ 31 ]  [ GetControlIndex ( TabName , DesignForm ) ]
		endif

		__MVPUBLIC ( ControlName + 'Options' )
		__MVPUT( ControlName + 'Options' , "{ 'Option 1','Option 2'}" )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '1' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Transparent' )
		__MVPUT( ControlName + 'Transparent' , '.F.' )
		__MVPUBLIC ( ControlName + 'Spacing' )
		__MVPUT( ControlName + 'Spacing' , '25' )

		__MVPUBLIC ( ControlName + 'ReadOnly' )
		__MVPUT( ControlName + 'ReadOnly' , 'Nil' )

		__MVPUBLIC ( ControlName + 'Orientation' )
		__MVPUT( ControlName + 'Orientation' , 'VERTICAL' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 18
	///////////////////////////////////////////////////////////////////////
		FrameCount++
		ControlName := 'Frame_'+ALLTRIM(STR(FrameCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			FrameCount++
			ControlName := 'Frame_'+ALLTRIM(STR(FrameCount))
		EndDo

		TabName := TabHit( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] )

		if ! empty ( TabName )
			fmb := _HMG_SYSDATA [ 183 ]
			_HMG_SYSDATA [ 183 ] := 1
			_HMG_SYSDATA [ 225 ]  := TabName
			_HMG_SYSDATA [ 332 ] [_HMG_SYSDATA [ 183 ]] := DesignForm
		endif

		if ! empty ( TabName )
			_HMG_SYSDATA [ 266 ] := _HMG_SYSDATA [ 31 ] [ GetControlIndex ( TabName , DesignForm ) ]
		endif

		DEFINE FRAME &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			CAPTION ControlName
			FONTNAME 'ARIAL'
			FONTSIZE 9
			OPAQUE .T.
		END FRAME

		if ! empty ( TabName )
			_HMG_SYSDATA [ 183 ] := fmb
		endif

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		if ! empty ( TabName )
			_HMG_SYSDATA [ 16 ] [ GetControlIndex ( ControlName , DesignForm ) ] := _HMG_SYSDATA [ 31 ]  [ GetControlIndex ( TabName , DesignForm ) ]
		endif

		__MVPUBLIC ( ControlName + 'Caption' )
		__MVPUT( ControlName + 'Caption' , ControlName )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'Transparent' )
		__MVPUT( ControlName + 'Transparent' , '.F.' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 19
	///////////////////////////////////////////////////////////////////////

		if Empty ( TabHit( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) )

			TabCount++
			ControlName := 'Tab_'+ALLTRIM(STR(TabCount))

			Do While _IsControlDefined (ControlName,DesignForm)
				TabCount++
				ControlName := 'Tab_'+ALLTRIM(STR(TabCount))
			EndDo

			DEFINE TAB &ControlName	OF &DesignForm AT _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] WIDTH 150 HEIGHT 120 ON CHANGE ( SelectControl ( This.Name ) , SelectControl ( This.Name ) )
				PAGE 'Page 1'
				END PAGE
				PAGE 'Page 2'
				END PAGE
			END TAB

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

			__MVPUBLIC ( ControlName + 'PageCount' )
			__MVPUT( ControlName + 'PageCount' , '2' )
			__MVPUBLIC ( ControlName + 'Captions' )
			__MVPUT( ControlName + 'Captions' , "{ 'Page 1' , 'Page 2' }" )

			__MVPUBLIC ( ControlName + 'PageImages' )
			__MVPUT( ControlName + 'PageImages' , "{'',''}" )

			__MVPUBLIC ( ControlName + 'Value' )
			__MVPUT( ControlName + 'Value' , '1' )
			__MVPUBLIC ( ControlName + 'FontName' )
			__MVPUT( ControlName + 'FontName' , 'Arial' )
			__MVPUBLIC ( ControlName + 'FontSize' )
			__MVPUT( ControlName + 'FontSize' , '9' )
			__MVPUBLIC ( ControlName + 'ToolTip' )
			__MVPUT( ControlName + 'ToolTip' , '' )
			__MVPUBLIC( ControlName + 'OnChange' )
			__MVPUT( ControlName + 'OnChange' , 'Nil' )
			__MVPUBLIC ( ControlName + 'FontBold' )
			__MVPUT( ControlName + 'FontBold' , '.F.' )
			__MVPUBLIC ( ControlName + 'FontItalic' )
			__MVPUT( ControlName + 'FontItalic' , '.F.' )
			__MVPUBLIC ( ControlName + 'FontStrikeOut' )
			__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( ControlName + 'FontUnderLine' )
			__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( ControlName + 'Buttons' )
			__MVPUT( ControlName + 'Buttons' , '.F.' )
			__MVPUBLIC ( ControlName + 'Flat' )
			__MVPUT( ControlName + 'Flat' , '.F.' )
			__MVPUBLIC ( ControlName + 'HotTrack' )
			__MVPUT( ControlName + 'HotTrack' , '.F.' )
			__MVPUBLIC ( ControlName + 'Vertical' )
			__MVPUT( ControlName + 'Vertical' , '.F.' )
			__MVPUBLIC ( ControlName + 'TabStop' )
			__MVPUT( ControlName + 'TabStop' , '.T.' )

			__MVPUBLIC ( ControlName + 'MultiLine' )
			__MVPUT( ControlName + 'MultiLine' , '.F.' )


		EndIf

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 20
	///////////////////////////////////////////////////////////////////////
		AnimateCount++
		ControlName := 'Animate_'+ALLTRIM(STR(AnimateCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			AnimateCount++
			ControlName := 'Animate_'+ALLTRIM(STR(AnimateCount))
		EndDo

		DEFINE ANIMATEBOX &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			WIDTH 210
			HEIGHT 60
			FILE ''
			CENTER .T.
			AUTOPLAY .T.
		END ANIMATEBOX

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		DoMethod ( DesignForm , ControlName , 'Play' )

		__MVPUBLIC ( ControlName + 'File' )
		__MVPUT( ControlName + 'File' , '' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Transparent' )
		__MVPUT( ControlName + 'Transparent' , '.F.' )
		__MVPUBLIC ( ControlName + 'AutoPlay' )
		__MVPUT( ControlName + 'AutoPlay' , '.F.' )
		__MVPUBLIC ( ControlName + 'Center' )
		__MVPUT( ControlName + 'Center' , '.F.' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 21
	///////////////////////////////////////////////////////////////////////
		HyperLinkCount++
		ControlName := 'HyperLink_'+ALLTRIM(STR(HyperLinkCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			HyperLinkCount++
			ControlName := 'HyperLink_'+ALLTRIM(STR(HyperLinkCount))
		EndDo

		TabName := TabHit( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] )

		if ( ! Empty ( TabName ) ) .AND. IsAppThemed()

		DEFINE HyperLink &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			WIDTH 230
			HEIGHT 28
			VALUE _HLK
			ADDRESS _HLK
			FONTNAME 'ARIAL'
			FONTSIZE 9
			TRANSPARENT .T.
		END HYPERLINK

		else

		DEFINE HyperLink &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			WIDTH 230
			HEIGHT 28
			VALUE _HLK
			ADDRESS _HLK
			FONTNAME 'ARIAL'
			FONTSIZE 9
		END HYPERLINK

		endif

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		i := GetControlIndex ( ControlName , DesignForm )

		_HMG_SYSDATA [ 39 ] [ i ] := 6

		macrovar := 'SelectControl ('+ chr(34) + 'HyperLink_' + ALLTRIM(STR(HyperLinkCount)) + chr(34) + ')'

		_HMG_SYSDATA [ 6 ] [i] := { || &macrovar }

		RedrawWindow ( GetControlHandle ( ControlName , DesignForm ) )

		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , _HLK )
		__MVPUBLIC ( ControlName + 'Address' )
		__MVPUT( ControlName + 'Address' , _HLK )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'AutoSize' )
		__MVPUT( ControlName + 'AutoSize' , '.F.' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontColor' )
		__MVPUT( ControlName + 'FontColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'HandCursor' )
		__MVPUT( ControlName + 'HandCursor' , '.F.' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 22
	///////////////////////////////////////////////////////////////////////
		MonthCalendarCount++
		ControlName := 'MonthCal_'+ALLTRIM(STR(MonthCalendarCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			MonthCalendarCount++
			ControlName := 'MonthCal_'+ALLTRIM(STR(MonthCalendarCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ],_HMG_SYSDATA [ 192 ] MONTHCALENDAR &ControlName OF &DesignForm ;
		VALUE date() ;
		FONT 'ARIAL' SIZE 9 ;
		ON CHANGE SelectControl (This.Name)

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , 'CTOD("  /  /  ")' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'Today' )
		__MVPUT( ControlName + 'Today' , '.T.' )
		__MVPUBLIC ( ControlName + 'TodayCircle' )
		__MVPUT( ControlName + 'TodayCircle' , '.T.' )
		__MVPUBLIC ( ControlName + 'WeekNumbers' )
		__MVPUT( ControlName + 'WeekNumbers' , '.F.' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 23
	///////////////////////////////////////////////////////////////////////
		RichEditCount++
		ControlName := 'RichEdit_'+ALLTRIM(STR(RichEditCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			RichEditCount++
			ControlName := 'RichEdit_'+ALLTRIM(STR(RichEditCount))
		EndDo

		DEFINE RICHEDITBOX &ControlName
			PARENT &DesignForm
			ROW _HMG_SYSDATA [ 191 ]
			COL _HMG_SYSDATA [ 192 ]
			WIDTH 120
			HEIGHT 120
			ON GOTFOCUS SelectControl (This.Name)
			VALUE ControlName
			FONTNAME 'ARIAL'
			FONTSIZE 9
		END RICHEDITBOX

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'MaxLength' )
		__MVPUT( ControlName + 'MaxLength' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Field' )
		__MVPUT( ControlName + 'Field' , 'Nil' )
		__MVPUBLIC ( ControlName + 'ReadOnly' )
		__MVPUT( ControlName + 'ReadOnly' , '.F.' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 24
	///////////////////////////////////////////////////////////////////////
		ProgressBarCount++
		ControlName := 'ProgressBar_'+ALLTRIM(STR(ProgressBarCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			ProgressBarCount++
			ControlName := 'ProgressBar_'+ALLTRIM(STR(ProgressBarCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] LABEL &ControlName ;
			OF &DesignForm ;
			VALUE ControlName ACTION SelectControl (This.Name) ;
			WIDTH 150 HEIGHT 30 ;
			BORDER

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		_HMG_SYSDATA [ 39 ] [ GetControlIndex ( ControlName , DesignForm ) ] := 2

		__MVPUBLIC ( ControlName + 'RangeMin' )
		__MVPUT( ControlName + 'RangeMin' , '1' )
		__MVPUBLIC ( ControlName + 'RangeMax' )
		__MVPUT( ControlName + 'RangeMax' , '10' )
		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '0' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'BackColor' )
		__MVPUT( ControlName + 'BackColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'ForeColor' )
		__MVPUT( ControlName + 'ForeColor' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )
		__MVPUBLIC ( ControlName + 'Smooth' )
		__MVPUT( ControlName + 'Smooth' , '.F.' )
		__MVPUBLIC ( ControlName + 'Orientation' )
		__MVPUT( ControlName + 'Orientation' , 'HORIZONTAL' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 25
	///////////////////////////////////////////////////////////////////////
		PlayerCount++
		ControlName := 'Player_'+ALLTRIM(STR(PlayerCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			PlayerCount++
			ControlName := 'Player_'+ALLTRIM(STR(PlayerCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] LABEL &ControlName ;
			OF &DesignForm ;
			VALUE ControlName ACTION SelectControl (This.Name) ;
			WIDTH 120 HEIGHT 120 ;
			BORDER

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		_HMG_SYSDATA [ 39 ] [ GetControlIndex ( ControlName , DesignForm ) ] := 3

		__MVPUBLIC ( ControlName + 'File' )
		__MVPUT( ControlName + 'File' , '' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )


		__MVPUBLIC ( ControlName + 'AutoSizeWindow' )
		__MVPUT( ControlName + 'AutoSizeWindow' , '.T.' )

		__MVPUBLIC ( ControlName + 'AutoSizeMovie' )
		__MVPUT( ControlName + 'AutoSizeMovie' , '.T.' )

		__MVPUBLIC ( ControlName + 'ErrorDlg' )
		__MVPUT( ControlName + 'ErrorDlg' , '.T.' )

		__MVPUBLIC ( ControlName + 'Menu' )
		__MVPUT( ControlName + 'Menu' , '.T.' )

		__MVPUBLIC ( ControlName + 'Open' )
		__MVPUT( ControlName + 'Open' , '.T.' )

		__MVPUBLIC ( ControlName + 'PlayBar' )
		__MVPUT( ControlName + 'PlayBar' , '.T.' )

		__MVPUBLIC ( ControlName + 'ShowAll' )
		__MVPUT( ControlName + 'ShowAll' , '.F.' )

		__MVPUBLIC ( ControlName + 'ShowMode' )
		__MVPUT( ControlName + 'ShowMode' , '.F.' )

		__MVPUBLIC ( ControlName + 'ShowName' )
		__MVPUT( ControlName + 'ShowName' , '.F.' )

		__MVPUBLIC ( ControlName + 'ShowPosition' )
		__MVPUT( ControlName + 'ShowPosition' , '.F.' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 26
	///////////////////////////////////////////////////////////////////////
		IpAddressCount++
		ControlName := 'IpAddress_'+ALLTRIM(STR(IpAddressCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			IpAddressCount++
			ControlName := 'IpAddress_'+ALLTRIM(STR(IpAddressCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] LABEL &ControlName ;
			OF &DesignForm ;
			VALUE ControlName ACTION SelectControl (This.Name) ;
			FONT 'ARIAL' SIZE 9 ;
			BORDER

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		_HMG_SYSDATA [ 39 ] [ GetControlIndex ( ControlName , DesignForm ) ] := 4

		__MVPUBLIC ( ControlName + 'Value' )
		__MVPUT( ControlName + 'Value' , '{ 0 , 0 , 0 , 0 }' )
		__MVPUBLIC ( ControlName + 'FontName' )
		__MVPUT( ControlName + 'FontName' , 'Arial' )
		__MVPUBLIC ( ControlName + 'FontSize' )
		__MVPUT( ControlName + 'FontSize' , '9' )
		__MVPUBLIC ( ControlName + 'ToolTip' )
		__MVPUT( ControlName + 'ToolTip' , '' )
		__MVPUBLIC ( ControlName + 'OnChange' )
		__MVPUT( ControlName + 'OnChange' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnGotFocus' )
		__MVPUT( ControlName + 'OnGotFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'OnLostFocus' )
		__MVPUT( ControlName + 'OnLostFocus' , 'Nil' )
		__MVPUBLIC ( ControlName + 'FontBold' )
		__MVPUT( ControlName + 'FontBold' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontItalic' )
		__MVPUT( ControlName + 'FontItalic' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontStrikeOut' )
		__MVPUT( ControlName + 'FontStrikeOut' , '.F.' )
		__MVPUBLIC ( ControlName + 'FontUnderLine' )
		__MVPUT( ControlName + 'FontUnderLine' , '.F.' )
		__MVPUBLIC ( ControlName + 'TabStop' )
		__MVPUT( ControlName + 'TabStop' , '.T.' )
		__MVPUBLIC ( ControlName + 'Visible' )
		__MVPUT( ControlName + 'Visible' , '.T.' )
		__MVPUBLIC ( ControlName + 'HelpId' )
		__MVPUT( ControlName + 'HelpId' , 'Nil' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 27
	///////////////////////////////////////////////////////////////////////

		if Empty ( TabHit( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) )

			TimerCount++
			ControlName := 'Timer_'+ALLTRIM(STR(TimerCount))

			Do While _IsControlDefined (ControlName,DesignForm)
				TimerCount++
				ControlName := 'Timer_'+ALLTRIM(STR(TimerCount))
			EndDo

			DEFINE BUTTON &ControlName
				PARENT &DesignForm
				ROW _HMG_SYSDATA [ 191 ]
				COL _HMG_SYSDATA [ 192 ]
				WIDTH 30
				HEIGHT 30
				ACTION SelectControl (This.name)
				PICTURE 'timer'
				FLAT .T.
			END BUTTON

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

			_HMG_SYSDATA [ 39 ] [ GetControlIndex ( ControlName , DesignForm ) ] := 5

			__MVPUBLIC ( ControlName + 'Interval' )
			__MVPUT( ControlName + 'Interval' , '0' )
			__MVPUBLIC ( ControlName + 'Action' )
			__MVPUT( ControlName + 'Action' , 'Nil' )

		endif

		/*
			1: CHECKBUTTON
			2: PROGRESSBAR
			3: PLAYER
			4: IPADDRESS
			5: TIMER
			6: HYPERLINK
			7: ACTIVEX
			8: CHILD WINDOW
		*/

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 35
	///////////////////////////////////////////////////////////////////////
		ActivexCount++
		ControlName := 'Activex_'+ALLTRIM(STR(ActivexCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			ActivexCount++
			ControlName := 'Activex_'+ALLTRIM(STR(ActivexCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] LABEL &ControlName ;
			OF &DesignForm ;
			VALUE ControlName ACTION SelectControl (This.Name) ;
			WIDTH 150 HEIGHT 150 ;
			FONT 'ARIAL' SIZE 9 ;
			BORDER

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		_HMG_SYSDATA [ 39 ] [ GetControlIndex ( ControlName , DesignForm ) ] := 7

		__MVPUBLIC ( ControlName + 'ProgId' )
		__MVPUT( ControlName + 'ProgId' , '' )

	///////////////////////////////////////////////////////////////////////
	Case CurrentControl == 36
	///////////////////////////////////////////////////////////////////////
		ChildWindowCount++
		ControlName := 'PanelWindow_'+ALLTRIM(STR(ChildWindowCount))

		Do While _IsControlDefined (ControlName,DesignForm)
			ChildWindowCount++
			ControlName := 'PanelWindow_'+ALLTRIM(STR(ChildWindowCount))
		EndDo

		@ _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] LABEL &ControlName ;
			OF &DesignForm ;
			VALUE ControlName ACTION SelectControl (This.Name) ;
			WIDTH 150 HEIGHT 150 ;
			FONT 'ARIAL' SIZE 9 ;
			BORDER

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		_HMG_SYSDATA [ 39 ] [ GetControlIndex ( ControlName , DesignForm ) ] := 8

	EndCase

	TabName := ''

	If (CurrentControl >= 2 .and. CurrentControl <= 27) .Or. CurrentControl == 35 .Or. CurrentControl == 36  .Or. CurrentControl == 99

		If CurrentControl != 19 .and. CurrentControl != 27

			TabName := TabHit( _HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] )

			if ! empty ( TabName )

				SelectControl ( TabName )

				TabIndex := GetControlIndex ( TabName , DesignForm )

				TabRow	:= GetProperty ( DesignForm , TabName , 'Row' )
				TabCol	:= GetProperty ( DesignForm , TabName , 'Col' )
				TabWidth := GetProperty ( DesignForm , TabName , 'Width' )
				TabHeight := GetProperty ( DesignForm , TabName , 'Height' )
				TabCaptions := _HMG_SYSDATA [ 33 ]   [TabIndex]
				TabPage := GetProperty ( DesignForm , TabName , 'Value' )

				if __MVGET ( Tabname + 'buttons' ) == '.T.'
					TMPBUTTONS := .T.
				else
					TMPBUTTONS := .F.
				endif

				if __MVGET ( Tabname + 'flat' ) == '.T.'
					tabflat := .T.
				else
					tabflat := .F.
				endif

				DoMethod ( DesignForm , TabName , 'AddControl' , ControlName , TabPage , _HMG_SYSDATA [ 191 ] - TabRow , _HMG_SYSDATA [ 192 ] - TabCol )

				if CurrentControl == 2
					_HMG_SYSDATA [31] [ GetControlIndex ( ControlName , DesignForm ) ] := TabName
				endif
				if CurrentControl == 7
					_HMG_SYSDATA [31] [ GetControlIndex ( ControlName , DesignForm ) ] := TabName
				endif
				if CurrentControl == 12
					_HMG_SYSDATA [31] [ GetControlIndex ( ControlName , DesignForm ) ] := TabName
				endif
				if CurrentControl == 13
					_HMG_SYSDATA [31] [ GetControlIndex ( ControlName , DesignForm ) ] := TabName
				endif
				if CurrentControl == 14
					_HMG_SYSDATA [31] [ GetControlIndex ( ControlName , DesignForm ) ] := TabName
				endif
				if CurrentControl == 15
					_HMG_SYSDATA [31] [ GetControlIndex ( ControlName , DesignForm ) ] := TabName
				endif
				if CurrentControl == 16
					_HMG_SYSDATA [37] [ GetControlIndex ( ControlName , DesignForm ) ] := TabName
				endif
				if CurrentControl == 22
					_HMG_SYSDATA [31] [ GetControlIndex ( ControlName , DesignForm ) ] := TabName
				endif

				if CurrentControl == 18
					releaseControl (_HMG_SYSDATA [   3 ] [tabindex] )
					_HMG_SYSDATA [   3 ] [tabindex] := InitTabControl ( DesignFormhandle, 0, tabcol, tabrow, tabwidth, tabheight , tabcaptions, tabpage, '', 0 , TMPBUTTONS , TabFlat , .f. , .f. , .f. )
					DeleteObject ( _HMG_SYSDATA [ 36 ] [tabindex] )
					_HMG_SYSDATA [ 36 ] [tabindex] := _SetFont ( _HMG_SYSDATA [   3 ] [tabindex] , 'Arial' , 9 , .f. , .f. , .f. , .f. )
					DrawGrid()
					SelectControl (ControlName)
					Redrawwindow( GetControlhandle ( ControlName , DesignForm ) )
				else

					* MiniGUI Bug!!!!
					SetProperty ( DesignForm , TabName , 'Row' , TabRow )
					DrawGrid()
					SelectControl (ControlName)
					if CurrentControl != 9 .and. CurrentControl != 16 .and. CurrentControl != 17
						Redrawwindow( GetControlhandle ( ControlName , DesignForm ) )
					endif

				endif

			Else

				SelectControl ( Controlname )

			EndIf

		Else

			SelectControl ( Controlname )

		EndIf

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

	EndIf

	if CurrentControl == 19
		SelectControl ( Controlname )
	EndIf

	///////////////////////////////////////////////////////////////////////
	// Reset Control Selection
	///////////////////////////////////////////////////////////////////////

	ResetToolBar()

	SendMessage( GetControlHandle('Control_01','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )
	CurrentControl := 1

Return

Procedure SelectControl( ControlName )

Local FocusHandle
Local i
Local Row
Local Col
Local Width
Local Height
Local x
Local y
Local z
Local aTemp := {}
Local cTemp := ''
Local dTemp := ''
Local ey
Local ez
Local eaTemp := {}
Local ecTemp := ''
Local edTemp := ''
Local DC
Local DR

	If ! _IsControlDefined (ControlName,DesignForm)
		redrawwindow(DesignFormhandle)
		DrawGrid()
		Return
	EndIf

	if lVirtualForm
		DC := GetScrollPos ( DesignFormhandle , SB_HORZ )
		DR := GetScrollPos ( DesignFormhandle , SB_VERT )
	else
		DC := 0
		DR := 0
	endif

	If .not. empty(SelectedControlName)

		x := GetControlIndex (SelectedControlName,DesignForm)

		If x > 0

			Row := _HMG_SYSDATA [ 18 ] [x]
			Col := _HMG_SYSDATA [ 19 ] [x]
			Width := _HMG_SYSDATA [ 20 ] [x]
			Height := _HMG_SYSDATA [ 21 ] [x]

			RedrawRect ( DesignFormhandle , Row - 10 - DR , Col - 10 - DC , Row+Height+10 , Col+Width+10 )

		EndIf

	EndIf

	SelectedControlName := ControlName

	WindowWidth := GetWindowWidth ( DesignFormHandle )
	WindowHeight := GetWindowHeight ( DesignFormHandle )

	i := GetControlIndex ( ControlName , DesignForm )

	If	_HMG_SYSDATA [ 1 ] [ i ] == 'BUTTON' .and. _HMG_SYSDATA [ 39 ] [ i ] == 0
		SelectedControlType := 'BUTTON'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'CHECKBOX' .and. _HMG_SYSDATA [ 39 ] [ i ] == 0
		SelectedControlType := 'CHECKBOX'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LIST'
		SelectedControlType := 'LISTBOX'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'COMBO'
		SelectedControlType := 'COMBOBOX'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'CHECKBOX' .and. _HMG_SYSDATA [ 39 ] [ i ] == 1
		SelectedControlType := 'CHECKBUTTON'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'GRID'
		SelectedControlType := 'GRID'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'SLIDER'
		SelectedControlType := 'SLIDER'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'SPINNER'
		SelectedControlType := 'SPINNER'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'IMAGE'
		SelectedControlType := 'IMAGE'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'TREE'
		SelectedControlType := 'TREE'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'DATEPICK'
		SelectedControlType := 'DATEPICKER'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'TEXT'
		SelectedControlType := 'TEXTBOX'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'EDIT'
		SelectedControlType := 'EDITBOX'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 0
		SelectedControlType := 'LABEL'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'BROWSE'
		SelectedControlType := 'BROWSE'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'RADIOGROUP'
		SelectedControlType := 'RADIOGROUP'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'FRAME'
		SelectedControlType := 'FRAME'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'TAB'
		SelectedControlType := 'TAB'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'ANIMATEBOX'
		SelectedControlType := 'ANIMATEBOX'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 6
		SelectedControlType := 'HYPERLINK'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 7
		SelectedControlType := 'ACTIVEX'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 8
		SelectedControlType := 'WINDOW'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'MONTHCAL'
		SelectedControlType := 'MONTHCALENDAR'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'RICHEDIT'
		SelectedControlType := 'RICHEDITBOX'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 2
		SelectedControlType := 'PROGRESSBAR'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 3
		SelectedControlType := 'PLAYER'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 4
		SelectedControlType := 'IPADDRESS'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'BUTTON' .and. _HMG_SYSDATA [ 39 ] [ i ] == 5
		SelectedControlType := 'TIMER'
	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] > 10
		SelectedControlType := 'USER'
	Else
		SelectedControlType := ''
	EndIf

	FocusHandle := _HMG_SYSDATA [   3 ] [i]

	SelectedControlIndex := i

	Row := _HMG_SYSDATA [ 18 ] [i]
	Col := _HMG_SYSDATA [ 19 ] [i]
	Width := _HMG_SYSDATA [ 20 ] [i]
	Height := _HMG_SYSDATA [ 21 ] [i]


	z := Properties.grid_1.value

	if z != 0
		aTemp := properties.grid_1.item(z)
		cTemp := ALLTRIM ( HMG_UPPER ( aTemp [1] ) )
	endif



	ez := Properties.grid_2.value

	if ez != 0
		eaTemp := properties.grid_2.item(ez)
		ecTemp := ALLTRIM ( HMG_UPPER ( eaTemp [1] ) )
	endif



	UpdateControlProperties (i)

	if ! empty ( cTemp )

		z := Properties.grid_1.itemcount

		for y := 1 to z

			aTemp := properties.grid_1.item(y)
			dTemp := ALLTRIM ( HMG_UPPER ( aTemp [1] ) )

			if cTemp == dTemp
				Properties.grid_1.value := y
				exit
			endif

		next y

	end if

	if Properties.grid_1.value == 0
		Properties.grid_1.value := 1
	endif

	if ! empty ( ecTemp )

		ez := Properties.grid_2.itemcount

		for ey := 1 to ez

			eaTemp := properties.grid_2.item(ey)
			edTemp := ALLTRIM ( HMG_UPPER ( eaTemp [1] ) )

			if ecTemp == edTemp
				Properties.grid_2.value := ey
				exit
			endif

		next ey

	end if

	if Properties.grid_2.value == 0
		Properties.grid_2.value := 1
	endif

	rectdraw( DesignFormhandle,Row - 6 - DR			,Col - 6 - DC			,Row -1	- DR			,Col -1	- DC			, BLACK,4,WHITE,.t.)

	linedraw( DesignFormhandle,Row - 3 - DR			,Col - 3 - DC			,Row - 3 - DR			,Col - 3 -DC			, BLACK,6)
	linedraw( DesignFormhandle,Row + Height + 3 - DR	,Col - 3 - DC			,Row + Height + 3 - DR		,Col - 3 -DC			, BLACK,6)
	linedraw( DesignFormhandle,Row - 3 - DR			,Col + Width + 3 - DC		,Row - 3 - DR			,Col + Width + 3 - DC		, BLACK,6)
	linedraw( DesignFormhandle,Row - 3 - DR			,Col + ( Width / 2 ) - DC	,Row - 3 - DR			,Col + ( Width / 2 ) - DC	, BLACK,6)
	linedraw( DesignFormhandle,Row + Height + 3 - DR	,Col + ( Width / 2 ) - DC	,Row + Height + 3 - DR		,Col + ( Width / 2 ) - DC	, BLACK,6)
	linedraw( DesignFormhandle,Row + ( Height / 2 ) - DR	,Col - 3 - DC			,Row + ( Height / 2 ) - DR	,Col - 3 - DC			, BLACK,6)
	linedraw( DesignFormhandle,Row + ( Height / 2 ) - DR	,Col + Width + 3 - DC		,Row + ( Height / 2 ) - DR	,Col + Width + 3 - DC		, BLACK,6)
	linedraw( DesignFormhandle,Row + Height + 4 - DR	,Col + Width - 4 - DC		,Row + Height + 4 - DR		,Col + Width + 4 - DC 		, BLACK,3)
	linedraw( DesignFormhandle,Row + Height - 4 - DR	,Col + Width + 4 - DC		,Row + Height + 4 - DR		,Col + Width + 4 - DC		, BLACK,3)

	DoMethod ( DesignForm , 'Text_Dummy' , 'SetFocus' )

	If _HMG_SYSDATA [ 1 ] [i] != 'RADIO' .and. _HMG_SYSDATA [ 1 ] [i] != 'SPINNER' .and. _HMG_SYSDATA [ 1 ] [i] != 'TAB'

		RedrawWindow (FocusHandle)

	EndIf

	UpdateCombo()

	For i := 1 To Properties.Combo_1.ItemCount
		If Properties.Combo_1.Item ( i ) == SelectedControlName
**********		Properties.Combo_1.Value := i
			ComboSetCursel ( GetControlHandle('Combo_1','Properties') , i )
			Exit
		EndIf
	Next i

	DrawGrid()

Return

Procedure MoveControl()

Local dr , dc , vdc , vdr

	if lVirtualForm
		VDC := GetScrollPos ( DesignFormhandle , SB_HORZ )
		VDR := GetScrollPos ( DesignFormhandle , SB_VERT )
	else
		VDC := 0
		VDR := 0
	endif

	if MoveStarted == .T.

		If SnapToGrid == .T.

			dr := 10 - VAL ( HB_URIGHT ( ALLTRIM( STR ( _HMG_SYSDATA [ 191 ] ) ) , 1 ) )
			_HMG_SYSDATA [ 191 ] := _HMG_SYSDATA [ 191 ] + dr

			dc := 10 - VAL ( HB_URIGHT ( ALLTRIM( STR ( _HMG_SYSDATA [ 192 ] ) ) , 1 ) )
			_HMG_SYSDATA [ 192 ] := _HMG_SYSDATA [ 192 ] + dc

		EndIf

		if _HMG_SYSDATA [ 192 ] == _pc .and. _HMG_SYSDATA [ 191 ] == _pr
			return
		endif

		Form_Main.StatusBar.Item (2 + STATUSITEM_OFFSET) := 'r:' + ALLTRIM(STR(_HMG_SYSDATA [ 191 ])) + ' c:' + ALLTRIM(STR(_HMG_SYSDATA [ 192 ])) + ' w:' + ALLTRIM(STR(MoveWidth)) + ' h:' + ALLTRIM(STR(MoveHeight))

		RedrawRect ( DesignFormhandle ,_pr - 22 - VDR , _pc - 22 - VDC , _pr + MoveHeight + 22 - VDR , _pc + MoveWidth + 22 - VDC )

		DrawGrid()

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] - 3 - VDR ,_HMG_SYSDATA [ 192 ] - 3 - VDC ,_HMG_SYSDATA [ 191 ] - 3 - VDR ,_HMG_SYSDATA [ 192 ] - 3 - VDC , BLACK , 6 )

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] + MoveHeight + 3 - VDR ,_HMG_SYSDATA [ 192 ] - 3 - VDC ,_HMG_SYSDATA [ 191 ] + MoveHeight + 3 - VDR  ,_HMG_SYSDATA [ 192 ] - 3 - VDC  ,BLACK,6)

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] - 3 - VDR ,_HMG_SYSDATA [ 192 ] + MoveWidth + 3 - VDC ,_HMG_SYSDATA [ 191 ] - 3 - VDR  ,_HMG_SYSDATA [ 192 ] + MoveWidth + 3 - VDC  ,BLACK,6)

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] + MoveHeight + 3 - VDR ,_HMG_SYSDATA [ 192 ] + MoveWidth + 3 - VDC ,_HMG_SYSDATA [ 191 ] + MoveHeight + 3 - VDR  ,_HMG_SYSDATA [ 192 ] + MoveWidth + 3 - VDC ,BLACK,6)

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] - 3 - VDR ,_HMG_SYSDATA [ 192 ] + ( MoveWidth / 2 ) - VDC ,_HMG_SYSDATA [ 191 ] - 3- VDR ,_HMG_SYSDATA [ 192 ] + ( MoveWidth / 2 )- VDC ,BLACK,6)

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] + MoveHeight + 3 - VDR ,_HMG_SYSDATA [ 192 ] + ( MoveWidth / 2 ) - VDC ,_HMG_SYSDATA [ 191 ] + MoveHeight + 3 - VDR  ,_HMG_SYSDATA [ 192 ] + ( MoveWidth / 2 ) - VDC  ,BLACK,6)

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] + ( MoveHeight / 2 ) - VDR ,_HMG_SYSDATA [ 192 ] - 3 - VDC ,_HMG_SYSDATA [ 191 ] + ( MoveHeight / 2 ) - VDR  ,_HMG_SYSDATA [ 192 ] - 3 - VDC ,BLACK,6)

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] + ( MoveHeight / 2 ) - VDR , _HMG_SYSDATA [ 192 ] + MoveWidth + 3 - VDC ,_HMG_SYSDATA [ 191 ] + ( MoveHeight / 2 ) - VDR  ,_HMG_SYSDATA [ 192 ] + MoveWidth + 3 - VDC  ,BLACK,6)

		_pr := _HMG_SYSDATA [ 191 ]
		_pc := _HMG_SYSDATA [ 192 ]

	ElseIf SizeStarted == .T.

		If SnapToGrid == .T.

			dr := VAL ( HB_URIGHT ( ALLTRIM( STR ( _HMG_SYSDATA [ 191 ] ) ) , 1 ) )
			_HMG_SYSDATA [ 191 ] := _HMG_SYSDATA [ 191 ] - dr

			dc := VAL ( HB_URIGHT ( ALLTRIM( STR ( _HMG_SYSDATA [ 192 ] ) ) , 1 ) )
			_HMG_SYSDATA [ 192 ] := _HMG_SYSDATA [ 192 ] - dc

		EndIf

		if _HMG_SYSDATA [ 192 ] == _pc .and. _HMG_SYSDATA [ 191 ] == _pr
			return
		endif

		if _HMG_SYSDATA [ 191 ] - 10 <= MoveRow .or. _HMG_SYSDATA [ 192 ] - 10 <= Movecol
			Return
		EndIf

		Form_Main.StatusBar.Item (2 + STATUSITEM_OFFSET) := 'r:' + ALLTRIM(STR(MoveRow)) + ' c:' + ALLTRIM(STR(MoveCol)) + ' w:' + ALLTRIM(STR(_HMG_SYSDATA [ 192 ]-MoveCol)) + ' h:' + ALLTRIM(STR(_HMG_SYSDATA [ 191 ]-MoveRow))

		RedrawRect ( DesignFormhandle ,MoveRow-8 - VDR  ,MoveCol-8 - VDC ,_pr+8 - VDR , _pc +8 - VDC )

		DrawGrid()

		linedraw( DesignFormhandle,MoveRow - 3 - VDR  ,MoveCol - 3 - VDC  ,MoveRow - 3 - VDR  ,MoveCol - 3 - VDC ,BLACK,6)

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] + 3 - VDR  ,MoveCol - 3 - VDC  ,_HMG_SYSDATA [ 191 ] + 3 - VDR  ,MoveCol - 3 - VDC ,BLACK,6)

		linedraw( DesignFormhandle,MoveRow - 3 - VDR  ,_HMG_SYSDATA [ 192 ] + 3 - VDC  ,MoveRow - 3 - VDR ,_HMG_SYSDATA [ 192 ] + 3 - VDC ,BLACK,6)

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] + 3 - VDR  ,_HMG_SYSDATA [ 192 ] + 3 - VDC ,_HMG_SYSDATA [ 191 ] + 3 - VDR ,_HMG_SYSDATA [ 192 ] + 3 - VDC  ,BLACK,6)

		linedraw( DesignFormhandle,MoveRow - 3- VDR ,MoveCol + ( ( _HMG_SYSDATA [ 192 ] - MoveCol ) / 2 ) - VDC  ,MoveRow - 3 - VDR  ,MoveCol + ( ( _HMG_SYSDATA [ 192 ] - MoveCol ) / 2 ) - VDC  ,BLACK,6)

		linedraw( DesignFormhandle,_HMG_SYSDATA [ 191 ] + 3 - VDR  ,MoveCol + ( ( _HMG_SYSDATA [ 192 ] - MoveCol ) / 2 ) - VDC  ,_HMG_SYSDATA [ 191 ] + 3 - VDR  ,MoveCol + ( ( _HMG_SYSDATA [ 192 ] - MoveCol ) / 2 ) - VDC  ,BLACK,6)

		linedraw( DesignFormhandle,MoveRow + ( _HMG_SYSDATA [ 191 ] - MoveRow ) / 2 - VDR  ,MoveCol - 3 - VDC  ,MoveRow + ( _HMG_SYSDATA [ 191 ] - MoveRow ) / 2 - VDR  ,MoveCol - 3 - VDC  ,BLACK,6)

		linedraw( DesignFormhandle,MoveRow + ( _HMG_SYSDATA [ 191 ] - MoveRow ) / 2 - VDR ,_HMG_SYSDATA [ 192 ] - VDC  ,MoveRow + ( _HMG_SYSDATA [ 191 ] - MoveRow ) / 2 - VDR  ,_HMG_SYSDATA [ 192 ] - VDC  ,BLACK,6)

		_pr := _HMG_SYSDATA [ 191 ]
		_pc := _HMG_SYSDATA [ 192 ]

	EndIf

Return

Procedure Test

Local	Row
Local	Col
Local	Width
Local	Height
Local vdr
Local vdc

	if lVirtualForm
		VDC := GetScrollPos ( DesignFormhandle , SB_HORZ )
		VDR := GetScrollPos ( DesignFormhandle , SB_VERT )
	else
		VDC := 0
		VDR := 0
	endif

	If MoveStarted == .T.

		RedrawRect ( DesignFormhandle ,_pr - 22 - VDR , _pc - 22 - VDC , _pr + MoveHeight + 22 - VDR , _pc + MoveWidth + 22 - VDC )

		if _HMG_SYSDATA [ 191 ] < 10
			_HMG_SYSDATA [ 191 ] := 10
		EndIf
		if _HMG_SYSDATA [ 192 ] < 10
			_HMG_SYSDATA [ 192 ] := 10
		EndIf

		MoveStarted := .F.

		if _HMG_SYSDATA [ 23 ] [moveindex] == -1 .and. _HMG_SYSDATA [ 24 ] [moveindex] == -1

			if !empty ( TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) ) .and. _HMG_SYSDATA [ 1 ] [moveindex] != 'TAB'

				SetProperty ( DesignForm , 'Cursor' , 'arrow' )
				SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Visible' , .T. )
				Redrawwindow(DesignFormHandle)
				DrawGrid()
				SelectControl (_HMG_SYSDATA [   2 ] [moveindex])

				if lVirtualForm
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
				endif

				Return

			Else

				SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Row' , _HMG_SYSDATA [ 191 ] )
				SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Col' , _HMG_SYSDATA [ 192 ] )

				if lVirtualForm
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
				endif


			EndIf

		Else

			if !empty ( TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) )

			        *MsgInfo ('Moving 1')

				SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Row' , _HMG_SYSDATA [ 191 ] - _HMG_SYSDATA [ 23 ] [moveindex] )
				SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Col' , _HMG_SYSDATA [ 192 ] - _HMG_SYSDATA [ 24 ] [moveindex] )

				SetProperty ( DesignForm , TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) , 'Row' , GetProperty (DesignForm , TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) , 'Row') )
				SetProperty ( DesignForm , TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) , 'Value' , GetProperty (DesignForm , TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) , 'Value') )
				DrawGrid()

				if lVirtualForm
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
				endif

			Else

				SetProperty ( DesignForm , 'Cursor' , 'arrow' )
				SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Visible' , .T. )
				Redrawwindow(DesignFormHandle)
				DrawGrid()
				SelectControl (_HMG_SYSDATA [   2 ] [moveindex])

				if lVirtualForm
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
				endif

				Return

			EndIf

		EndIf

		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Visible' , .T. )

		SetProperty ( DesignForm , 'Cursor' , 'arrow' )

		Row := _HMG_SYSDATA [ 18 ] [moveindex]
		Col := _HMG_SYSDATA [ 19 ] [moveindex]
		Width := _HMG_SYSDATA [ 20 ] [moveindex]
		Height := _HMG_SYSDATA [ 21 ] [moveindex]

		UpdateControlProperties ( moveindex )

		rectdraw( DesignFormhandle ,Row - 6 - VDR ,Col - 6 - VDC ,Row -1 - VDR ,Col -1 - VDC ,BLACK,4,WHITE,.t.)

		linedraw( DesignFormhandle,Row + Height + 4 - VDR ,Col + Width - 4 - VDC , Row + Height + 4 - VDR ,Col + Width + 4 - VDC ,BLACK,3)
		linedraw( DesignFormhandle,Row + Height - 4 - VDR ,Col + Width + 4 - VDC ,Row + Height + 4 - VDR ,Col + Width + 4 - VDC ,BLACK,3)

		linedraw( DesignFormhandle,Row - 3 - VDR ,Col - 3 - VDC ,Row - 3 - VDR ,Col - 3 - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row + Height + 3 - VDR ,Col - 3 - VDC ,Row + Height + 3 - VDR ,Col - 3 - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row - 3 - VDR ,Col + Width + 3 - VDC ,Row - 3 - VDR , Col + Width + 3 - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row + Height + 3 - VDR ,Col + Width + 3 - VDC ,Row + Height + 3 - VDR ,Col + Width + 3 - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row - 3 - VDR ,Col + ( Width / 2 ) - VDC ,Row - 3 - VDR ,Col + ( Width / 2 ) - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row + Height + 3 - VDR ,Col + ( Width / 2 ) - VDC ,Row + Height + 3 - VDR ,Col + ( Width / 2 ) - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row + ( Height / 2 ) - VDR ,Col - 3 - VDC ,Row + ( Height / 2 ) - VDR ,Col - 3 - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row + ( Height / 2 ) - VDR , Col + Width + 3 - VDC ,Row + ( Height / 2 ) - VDR ,Col + Width + 3 - VDC ,BLACK,6)

		DrawGrid()

		Return

	EndIf

	If SizeStarted == .T.

		SizeStarted := .F.
		RedrawRect ( DesignFormhandle ,MoveRow - 10 - VDR ,MoveCol - 10 - VDC ,_pr + 10 - VDR , _pc + 10 - VDC )

		if _HMG_SYSDATA [ 191 ] < ( MoveRow + 20 ) .or. _HMG_SYSDATA [ 192 ] < ( MoveCol + 20 )
			SetProperty ( DesignForm , 'Cursor' , 'arrow' )
			SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Visible' , .T. )
			Redrawwindow(DesignFormHandle)
			DrawGrid()
			SelectControl (_HMG_SYSDATA [   2 ] [moveindex])

				if lVirtualForm
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
					SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
				endif

			Return
		endif

		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Width' , _HMG_SYSDATA [ 192 ] - MoveCol )
		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Height' , _HMG_SYSDATA [ 191 ] - MoveRow )
		SetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [moveindex] , 'Visible' , .T. )

		if !empty ( TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) ) .and. _HMG_SYSDATA [ 1 ] [moveindex] != 'TAB'

			SetProperty ( DesignForm , TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) , 'Row' , GetProperty (DesignForm , TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) , 'Row') )
			SetProperty ( DesignForm , TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) , 'Value' , GetProperty (DesignForm , TabHit(_HMG_SYSDATA [ 191 ] , _HMG_SYSDATA [ 192 ] ) , 'Value') )
			SelectControl (_HMG_SYSDATA [   2 ] [moveindex])
			DrawGrid()

			if lVirtualForm
				SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
				SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
			endif

		endif

		Row := _HMG_SYSDATA [ 18 ] [moveindex]
		Col := _HMG_SYSDATA [ 19 ] [moveindex]
		Width := _HMG_SYSDATA [ 20 ] [moveindex]
		Height := _HMG_SYSDATA [ 21 ] [moveindex]

		UpdateControlProperties ( moveindex )

		rectdraw( DesignFormhandle ,Row - 6 - VDR ,Col - 6 - VDC ,Row -1 - VDR ,Col -1 - VDC ,BLACK,4,WHITE,.t.)

		linedraw( DesignFormhandle,Row - 3 - VDR ,Col - 3 - VDC ,Row - 3 - VDR ,Col - 3 - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row + Height + 3 - VDR ,Col - 3 - VDC ,Row + Height + 3 - VDR ,Col - 3 - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row - 3 - VDR ,Col + Width + 3 - VDC ,Row - 3 - VDR ,Col + Width + 3 - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row - 3 - VDR ,Col + ( Width / 2 ) - VDC ,Row - 3 - VDR ,Col + ( Width / 2 ) - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row + Height + 3 - VDR ,Col + ( Width / 2 ) - VDC ,Row + Height + 3 - VDR ,Col + ( Width / 2 ) - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row + ( Height / 2 ) - VDR ,Col - 3 - VDC ,Row + ( Height / 2 ) - VDR ,Col - 3 - VDC , BLACK , 6 )
		linedraw( DesignFormhandle,Row + ( Height / 2 ) - VDR ,Col + Width + 3 - VDC ,Row + ( Height / 2 ) - VDR ,Col + Width + 3 - VDC ,BLACK,6)
		linedraw( DesignFormhandle,Row + Height + 4 - VDR ,Col + Width - 4 - VDC ,Row + Height + 4 - VDR ,Col + Width + 4 - VDC ,BLACK,3)
		linedraw( DesignFormhandle,Row + Height - 4 - VDR ,Col + Width + 4 - VDC ,Row + Height + 4 - VDR ,Col + Width + 4 - VDC ,BLACK,3)

		SetProperty ( DesignForm , 'Cursor' , 'arrow' )

		DrawGrid()

		if lVirtualForm
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEDOWN , 0 )
			SendMessage ( GetFormhandle ( DesignForm ) , WM_VSCROLL , SB_LINEUP , 0 )
		endif

		Return

	EndIf

Return

Procedure RedrawControls

Local i

	For i := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )
		If _HMG_SYSDATA [   4 ] [i] == DesignFormHandle
			if _HMG_SYSDATA [ 1 ] [i] != 'SPINNER' .and. _HMG_SYSDATA [ 1 ] [i] != 'RADIOGROUP'
				RedrawWindow ( _HMG_SYSDATA [   3 ] [i] )
			endif
		EndIf
	Next i

Return

Procedure DrawGrid()

	DRAWDESIGNGRID( DesignFormHandle , GetWindowHeight(DesignFormhandle) , GetWindowWidth( DesignFormhandle) )

Return



Procedure Control_01_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_01','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 1

	SendMessage( GetControlHandle('Control_01','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )


Return

Procedure Control_02_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_02','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 2

	SendMessage( GetControlHandle('Control_02','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_03_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_03','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 3

	SendMessage( GetControlHandle('Control_03','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_04_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_04','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 4

	SendMessage( GetControlHandle('Control_04','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_05_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_05','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 5

	SendMessage( GetControlHandle('Control_05','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_06_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_06','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 6

	SendMessage( GetControlHandle('Control_06','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_07_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_07','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 7

	SendMessage( GetControlHandle('Control_07','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_08_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_08','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 8

	SendMessage( GetControlHandle('Control_08','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )


Return

Procedure Control_09_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_09','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 9

	SendMessage( GetControlHandle('Control_09','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )


Return

Procedure Control_10_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_10','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 10

	SendMessage( GetControlHandle('Control_10','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )


Return

Procedure Control_11_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_11','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 11

	SendMessage( GetControlHandle('Control_11','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_12_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_12','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 12

	SendMessage( GetControlHandle('Control_12','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_13_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_13','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 13

	SendMessage( GetControlHandle('Control_13','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_14_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_14','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 14

	SendMessage( GetControlHandle('Control_14','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_15_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_15','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 15

	SendMessage( GetControlHandle('Control_15','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_16_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_16','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 16

	SendMessage( GetControlHandle('Control_16','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_17_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_17','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 17

	SendMessage( GetControlHandle('Control_17','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_18_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_18','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 18

	SendMessage( GetControlHandle('Control_18','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_19_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_19','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 19

	SendMessage( GetControlHandle('Control_19','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_20_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_20','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 20

	SendMessage( GetControlHandle('Control_20','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_21_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_21','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 21

	SendMessage( GetControlHandle('Control_21','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_22_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_22','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 22

	SendMessage( GetControlHandle('Control_22','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_23_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_23','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 23

	SendMessage( GetControlHandle('Control_23','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_24_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_24','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 24

	SendMessage( GetControlHandle('Control_24','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_25_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_25','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 25

	SendMessage( GetControlHandle('Control_25','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_26_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_26','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 26

	SendMessage( GetControlHandle('Control_26','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_27_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_27','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 27

	SendMessage( GetControlHandle('Control_27','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_35_Click()

	if !_IsWIndowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_35','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 35

	SendMessage( GetControlHandle('Control_35','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

Return

Procedure Control_36_Click()

	if !_IsWindowDefined (DesignForm)
		SendMessage( GetControlHandle('Control_36','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	ResetToolBar()

	CurrentControl := 36

	SendMessage( GetControlHandle('Control_36','Form_Main') , BM_SETCHECK  , BST_CHECKED , 0 )

return

Procedure UpdateDesignFormProperties()

Local z , ez
Local aTemp , eaTemp
Local cTemp , ecTemp
Local y , ey
Local dTemp , edTemp

	IF VALTYPE(__MVGET ( DesignForm + 'WindowType' ) ) <> 'C'
		RETURN
	ENDIF

	IF ! _IsWindowDefined ( DesignForm )
		RETURN
	ENDIF

	* -

	z := Properties.grid_1.value

	if z != 0
		aTemp := properties.grid_1.item(z)
		cTemp := ALLTRIM ( HMG_UPPER ( aTemp [1] ) )
	endif

	* -

	ez := Properties.grid_2.value

	if ez != 0
		eaTemp := properties.grid_2.item(ez)
		ecTemp := ALLTRIM ( HMG_UPPER ( eaTemp [1] ) )
	endif

	* -

	Properties.Grid_1.DeleteAllItems

	if 	__MVGET ( DesignForm + 'WindowType' ) <> 'SPLITCHILD' ;
		.and. ;
		__MVGET ( DesignForm + 'WindowType' ) <> 'MAIN'

		Properties.Grid_1.AddItem ( {'AutoRelease', __MVGET ( DesignForm + 'AutoRelease' ) } )

	endif

	Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( DesignForm + 'BackColor' ) } )

	if 	__MVGET ( DesignForm + 'WindowType' ) == 'SPLITCHILD'

		Properties.Grid_1.AddItem ( {'Break', __MVGET ( DesignForm + 'Break' ) } )

	endif

	Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(  GetProperty ( DesignForm , 'Col' )            ))} )
	Properties.Grid_1.AddItem ( {'Cursor', __MVGET ( DesignForm + 'Cursor' ) } )

	if 	__MVGET ( DesignForm + 'WindowType' ) == 'SPLITCHILD'

		Properties.Grid_1.AddItem ( {'Focused', __MVGET ( DesignForm + 'Focused' ) } )

	endif

	if 	__MVGET ( DesignForm + 'WindowType' ) == 'SPLITCHILD'

		Properties.Grid_1.AddItem ( {'GripperText', __MVGET ( DesignForm + 'GripperText' ) } )

	endif

	Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR( GetProperty ( DesignForm , 'Height' )  ))} )

	if 	__MVGET ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

		Properties.Grid_1.AddItem ( {'HelpButton', __MVGET ( DesignForm + 'HelpButton' ) } )

	endif

	Properties.Grid_1.AddItem ( {'Icon', __MVGET ( DesignForm + 'Icon' ) } )

	if 	__MVGET ( DesignForm + 'WindowType' ) == 'STANDARD' ;
		.or. ;
		__MVGET ( DesignForm + 'WindowType' ) == 'MAIN' ;
		.or. ;
		__MVGET ( DesignForm + 'WindowType' ) == 'CHILD'

		Properties.Grid_1.AddItem ( {'MaxButton', __MVGET ( DesignForm + 'MaxButton' ) } )
		Properties.Grid_1.AddItem ( {'MinButton', __MVGET ( DesignForm + 'MinButton' ) } )

	endif

	if 	__MVGET ( DesignForm + 'WindowType' ) == 'MAIN'

		Properties.Grid_1.AddItem ( {'NotifyIcon', __MVGET ( DesignForm + 'NotifyIcon' ) } )
		Properties.Grid_1.AddItem ( {'NotifyTooltip', __MVGET ( DesignForm + 'NotifyTooltip' ) } )

	endif

	Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR( GetProperty ( DesignForm , 'Row' )       ))} )

	if 	__MVGET ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

		Properties.Grid_1.AddItem ( {'Sizable', __MVGET ( DesignForm + 'Sizable' ) } )
		Properties.Grid_1.AddItem ( {'SysMenu', __MVGET ( DesignForm + 'SysMenu' ) } )

	endif

	Properties.Grid_1.AddItem ( {'Title', GetProperty ( DesignForm , 'Title' )       } )
	Properties.Grid_1.AddItem ( {'TitleBar', __MVGET ( DesignForm + 'TitleBar' ) } )


	if 	__MVGET ( DesignForm + 'WindowType' ) <> 'SPLITCHILD' ;
		.and. ;
		__MVGET ( DesignForm + 'WindowType' ) <> 'MODAL'

		Properties.Grid_1.AddItem ( {'Topmost', __MVGET ( DesignForm + 'Topmost' ) } )

	endif

	Properties.Grid_1.AddItem ( {'Virtual Sized', __MVGET ( DesignForm + 'VirtualSized' ) } )

	Properties.Grid_1.AddItem ( {'Virtual Height', __MVGET ( DesignForm + 'VirtualHeight' ) } )
	Properties.Grid_1.AddItem ( {'Virtual Width', __MVGET ( DesignForm + 'VirtualWidth' ) } )

	if 	__MVGET ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( DesignForm + 'Visible' ) } )

	endif

	Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR( GetProperty ( DesignForm , 'Width' )       ))} )
	Properties.Grid_1.AddItem ( {'WindowType', __MVGET ( DesignForm + 'WindowType' ) } )

	Properties.Grid_2.DeleteAllItems
	Properties.Grid_2.AddItem ( { 'OnGotFocus' , __MVGET ( DesignForm + 'OnGotFocus' )  , '+' , '-' , '...'} )
	Properties.Grid_2.AddItem ( { 'OnHScrollBox' , __MVGET ( DesignForm + 'OnHScrollBox' )  , '+' , '-' , '...'} )

	if 	__MVGET ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

		Properties.Grid_2.AddItem ( { 'OnInit' , __MVGET ( DesignForm + 'OnInit' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( { 'OnInteractiveClose' , __MVGET ( DesignForm + 'OnInteractiveClose' )  , '+' , '-' , '...'} )

	endif

	Properties.Grid_2.AddItem ( { 'OnLostFocus' , __MVGET ( DesignForm + 'OnLostFocus' )  , '+' , '-' , '...'} )


	if 	__MVGET ( DesignForm + 'WindowType' ) == 'STANDARD' ;
		.or. ;
		__MVGET ( DesignForm + 'WindowType' ) == 'MAIN' ;
		.or. ;
		__MVGET ( DesignForm + 'WindowType' ) == 'CHILD'

		Properties.Grid_2.AddItem ( { 'OnMaximize' , __MVGET ( DesignForm + 'OnMaximize' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( { 'OnMinimize' , __MVGET ( DesignForm + 'OnMinimize' )  , '+' , '-' , '...'} )

	endif


	if 	__MVGET ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

		Properties.Grid_2.AddItem ( { 'OnMouseClick' , __MVGET ( DesignForm + 'OnMouseClick' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( { 'OnMouseDrag' , __MVGET ( DesignForm + 'OnMouseDrag' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( { 'OnMouseMove' , __MVGET ( DesignForm + 'OnMouseMove' )  , '+' , '-' , '...'} )

	endif

	if 	__MVGET ( DesignForm + 'WindowType' ) == 'MAIN'

		Properties.Grid_2.AddItem ( { 'OnNotifyClick' , __MVGET ( DesignForm + 'OnNotifyClick' )  , '+' , '-' , '...'} )

	endif

	Properties.Grid_2.AddItem ( { 'OnPaint' , __MVGET ( DesignForm + 'OnPaint' )  , '+' , '-' , '...'} )

	if 	__MVGET ( DesignForm + 'WindowType' ) <> 'SPLITCHILD'

		Properties.Grid_2.AddItem ( { 'OnRelease' , __MVGET ( DesignForm + 'OnRelease' )  , '+' , '-' , '...'} )

	endif

	Properties.Grid_2.AddItem ( { 'OnScrollDown' , __MVGET ( DesignForm + 'OnScrollDown' )  , '+' , '-' , '...'} )
	Properties.Grid_2.AddItem ( { 'OnScrollLeft' , __MVGET ( DesignForm + 'OnScrollLeft' )  , '+' , '-' , '...'} )
	Properties.Grid_2.AddItem ( { 'OnScrollRight' , __MVGET ( DesignForm + 'OnScrollRight' )  , '+' , '-' , '...'} )
	Properties.Grid_2.AddItem ( { 'OnScrollUp' , __MVGET ( DesignForm + 'OnScrollUp' )  , '+' , '-' , '...'} )
	Properties.Grid_2.AddItem ( { 'OnSize' , __MVGET ( DesignForm + 'OnSize' )  , '+' , '-' , '...'} )
	Properties.Grid_2.AddItem ( { 'OnVScrollBox' , __MVGET ( DesignForm + 'OnVScrollBox' )  , '+' , '-' , '...'} )

	Form_Main.StatusBar.Item (2 + STATUSITEM_OFFSET) := 'r:' + ALLTRIM(STR(  GetProperty ( DesignForm , 'Row' ) )) + ' c:' + ALLTRIM(STR(   GetProperty ( DesignForm , 'Col' ) )) + ' w:' + ALLTRIM(STR(  GetProperty ( DesignForm , 'Width' )  )) + ' h:' + ALLTRIM(STR(  GetProperty ( DesignForm , 'Height' )   ))

	* -

	if ! empty ( cTemp )

		z := Properties.grid_1.itemcount

		for y := 1 to z

			aTemp := properties.grid_1.item(y)
			dTemp := ALLTRIM ( HMG_UPPER ( aTemp [1] ) )

			if cTemp == dTemp
				Properties.grid_1.value := y
				exit
			endif

		next y

	end if

	if Properties.grid_1.value == 0
		Properties.grid_1.value := 1
	endif

	* -

	* -

	if ! empty ( ecTemp )

		ez := Properties.grid_2.itemcount

		for ey := 1 to ez

			eaTemp := properties.grid_2.item(ey)
			edTemp := ALLTRIM ( HMG_UPPER ( eaTemp [1] ) )

			if ecTemp == edTemp
				Properties.grid_2.value := ey
				exit
			endif

		next ey

	end if

	if Properties.grid_2.value == 0
		Properties.grid_2.value := 1
	endif

	* -

Return
*------------------------------------------------------------------------------*
Procedure PropertyEdit()
*------------------------------------------------------------------------------*
LOCAL Result, fmb, _OLDNAME, _NEWNAME, TabMultiline
Local i , aRow , PropertyName , PreviousValue , a , x , k , z , aTemp := {} , cTemp , x1
Local y
Local RowTemp
Local Coltemp
Local WidthTemp
Local HeightTemp
Local CaptionTemp
Local ColorTmp
Local OptTemp
Local TabName
Local TabIndex
Local TabRow
Local TabCol
Local TabWidth
Local TabHeight
Local TabCaptions
Local TabPage
Local TabButtons
Local TabFlat
Local TabHotTrack
Local TabVertical
Local TabFontName
Local TabFontSize
Local TabBold
Local TabItalic
Local TabUnderLine
Local TabStrikeout
Local lSuccess
Local nTemp
Local b
Local c
Local d
Local e
Local aProperties
Local aEvents
Local f

	i := Properties.Grid_1.Value

	if i == 0
		Return
	EndIf

	aRow := Properties.Grid_1.Item (i)

	PropertyName := ALLTRIM ( HMG_UPPER ( aRow [1] ) )

	If PropertyName == 'WIDTH' .And. SelectedControlType == 'MONTHCALENDAR'
		Playhand()
		Return
	EndIf
	If PropertyName == 'HEIGHT' .And. SelectedControlType == 'MONTHCALENDAR'
		Playhand()
		Return
	EndIf
	If PropertyName == 'HEIGHT' .And. SelectedControlType == 'RADIOGROUP'
		Playhand()
		Return
	EndIf

	If PropertyName == 'VIRTUAL WIDTH' .And. !lVirtualForm
		Playhand()
		Return
	EndIf

	If PropertyName == 'VIRTUAL HEIGHT' .And. !lVirtualForm
		Playhand()
		Return
	EndIf

	PreviousValue := aRow [2]


	*********************************************************************
	* Begin User *
	*********************************************************************

	If SelectedControlType == 'USER'

		c := ''

		For b := 1 To HMG_LEN (PropertyName)

			d := HB_USUBSTR ( Propertyname , b , 1 )

			If b == 1
				d := HMG_UPPER (d)
			Else
				d := HMG_LOWER (d)
			EndIf

			c := c + d

		Next b

		If	HMG_UPPER(ALLTRIM(PropertyName)) == 'ROW' ;
			.Or. ;
			HMG_UPPER(ALLTRIM(PropertyName)) == 'COL' ;
			.Or. ;
			HMG_UPPER(ALLTRIM(PropertyName)) == 'WIDTH' ;
			.Or. ;
			HMG_UPPER(ALLTRIM(PropertyName)) == 'HEIGHT'

			Result := ALLTRIM ( PickNumericPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , aRow [2] ) )

			If .Not. _HMG_SYSDATA [ 257 ] == .T.

				SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
				RedrawWindow (DesignForm)
				SelectControl (SelectedControlName)

			EndIf

			Return

		ElseIf HMG_UPPER(ALLTRIM(PropertyName)) == 'NAME'

			Result := ALLTRIM ( InputBox ( c + ':' , aMsgs [ 130 ] , PreviousValue ) )

			If .Not. _HMG_SYSDATA [ 257 ] == .T.

				b := GetControlIndex ( SelectedControlName , DesignForm )
				if b > 0

					If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)
						Return
					EndIf

					If !IsControNameValid ( Result )
						MsgStop('Control Name Duplicated or Invalid','HMG IDE')
						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)
						Return
					EndIf

					e := _HMG_SYSDATA [ 39 ] [ b ] - 10
					aProperties	:= aComponentProperties	[e]
					aEvents		:= aComponentEvents	[e]

					For f := 1 To HMG_LEN ( aProperties )

						If 	HMG_UPPER(ALLTRIM(aProperties [f])) <> 'ROW' ;
							.And. ;
							HMG_UPPER(ALLTRIM(aProperties [f])) <> 'COL' ;
							.And. ;
							HMG_UPPER(ALLTRIM(aProperties [f])) <> 'WIDTH' ;
							.And. ;
							HMG_UPPER(ALLTRIM(aProperties [f])) <> 'HEIGHT';
							.And. ;
							HMG_UPPER(ALLTRIM(aProperties [f])) <> 'NAME'

							__MVPUBLIC ( Result + aProperties [f] )
							__MVPUT( Result + aProperties [f] ,  __MVGET ( PreviousValue + aProperties [f] ) )
							__MVXRELEASE( PreviousValue + aProperties [f] )

						EndIf

					Next f

					For f := 1 To HMG_LEN ( aEvents )

						__MVPUBLIC ( Result + aEvents [f] )
						__MVPUT( Result + aEvents [f] ,  __MVGET ( PreviousValue + aEvents [f] ) )
						__MVXRELEASE( PreviousValue + aEvents [f] )

					Next f

					_HMG_SYSDATA [   2 ] [b] := Result

					__MVPUBLIC ( '_' + DesignForm + '_' + Result )
					__MVPUT( '_' + DesignForm + '_' + Result , b )

					__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

					SelectedControlName := Result

					SetProperty ( DesignForm , SelectedControlName , 'Value' , SelectedControlName )

					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				EndIf

			EndIf

			Return

		Else

			Result := ALLTRIM ( InputBox ( c + ':' , aMsgs [ 130 ] , PreviousValue ) )

			If .Not. _HMG_SYSDATA [ 257 ] == .T.

				__MVPUT ( SelectedControlName + PropertyName , Result )
				SelectControl (SelectedControlName)

			EndIf

		EndIf

		Return

	EndIf

	*********************************************************************
	* End User *
	*********************************************************************

	If	PropertyName == 'VISIBLE' ;
		.Or. ;
		PropertyName == 'HANDCURSOR' ;
		.Or. ;
		PropertyName == 'FLAT' ;
		.Or. ;
		PropertyName == 'SHOWHEADERS' ;
		.Or. ;
		PropertyName == 'BREAK' ;
		.Or. ;
		PropertyName == 'FOCUSED' ;
		.Or. ;
		PropertyName == 'TITLEBAR' ;
		.Or. ;
		PropertyName == 'SYSMENU' ;
		.Or. ;
		PropertyName == 'SIZABLE' ;
		.Or. ;
		PropertyName == 'MAXBUTTON' ;
		.Or. ;
		PropertyName == 'MINBUTTON' ;
		.Or. ;
		PropertyName == 'AUTORELEASE' ;
		.Or. ;
		PropertyName == 'TOPMOST' ;
		.Or. ;
		PropertyName == 'HELPBUTTON' ;
		.Or. ;
		PropertyName == 'VERTICAL' ;
		.Or. ;
		PropertyName == 'HOTTRACK' ;
		.Or. ;
		PropertyName == 'BUTTONS' ;
		.Or. ;
		PropertyName == 'CENTER' ;
		.Or. ;
		PropertyName == 'AUTOPLAY' ;
		.Or. ;
		PropertyName == 'SMOOTH' ;
		.Or. ;
		PropertyName == 'TODAY' ;
		.Or. ;
		PropertyName == 'TODAYCIRCLE' ;
		.Or. ;
		PropertyName == 'WEEKNUMBERS' ;
		.Or. ;
		PropertyName == 'AUTOSIZEWINDOW' ;
		.Or. ;
		PropertyName == 'AUTOSIZEMOVIE' ;
		.Or. ;
		PropertyName == 'ERRORDLG' ;
		.Or. ;
		PropertyName == 'MENU' ;
		.Or. ;
		PropertyName == 'OPEN' ;
		.Or. ;
		PropertyName == 'PLAYBAR' ;
		.Or. ;
		PropertyName == 'SHOWALL' ;
		.Or. ;
		PropertyName == 'SHOWMODE' ;
		.Or. ;
		PropertyName == 'SHOWNAME' ;
		.Or. ;
		PropertyName == 'SHOWPOSITION' ;
		.Or. ;
		PropertyName == 'FONTBOLD' ;
		.Or. ;
		PropertyName == 'LOCK' ;
		.Or. ;
		PropertyName == 'VSCROLLBAR' ;
		.Or. ;
		PropertyName == 'HSCROLLBAR' ;
		.Or. ;
		PropertyName == 'FONTITALIC' ;
		.Or. ;
		PropertyName == 'FONTUNDERLINE' ;
		.Or. ;
		PropertyName == 'FONTSTRIKEOUT' ;
		.Or. ;
		PropertyName == 'TABSTOP' ;
		.Or. ;
		PropertyName == 'TRANSPARENT' ;
		.Or. ;
		PropertyName == 'MULTISELECT' ;
		.Or. ;
		PropertyName == 'SORT' ;
		.Or. ;
		PropertyName == 'DISPLAYEDIT' ;
		.Or. ;
		PropertyName == 'ALLOWEDIT' ;
		.Or. ;
		PropertyName == 'ALLOWAPPEND' ;
		.Or. ;
		PropertyName == 'ALLOWDELETE' ;
		.Or. ;
		PropertyName == 'LINES' ;
		.Or. ;
		PropertyName == 'VIRTUAL' ;
		.Or. ;
		( PropertyName == 'READONLY' .And. SelectedControlType <> 'RADIOGROUP' ) ;
		.Or. ;
		PropertyName == 'WRAP' ;
		.Or. ;
		PropertyName == 'STRETCH' ;
		.Or. ;
		PropertyName == 'RIGHTALIGN' ;
		.Or. ;
		PropertyName == 'SHOWNONE' ;
		.Or. ;
		PropertyName == 'ROOTBUTTON' ;
		.Or. ;
		PropertyName == 'UPDOWN' ;
		.Or. ;
		PropertyName == 'PASSWORD' ;
		.Or. ;
		PropertyName == 'AUTOSIZE' ;
		.Or. ;
		PropertyName == 'CELLNAVIGATION' ;
		.Or. ;
		PropertyName == 'MULTILINE' ;
		.Or. ;
		PropertyName == 'DRAGITEMS' ;
		.Or. ;
		PropertyName == 'VIRTUAL SIZED' ;
		.Or. ;
		PropertyName == 'ITEMIDS' ;
		.Or. ;
		PropertyName == 'MULTILINE' ;
		.Or. ;
		PropertyName == 'BUFFERED' ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'CHECKBOX' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'CHECKBUTTON' )

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { '.T.' , '.F.' } , aRow [2] ) )

	ElseIf	PropertyName == 'CASECONVERT'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { 'LOWER' , 'NONE' , 'UPPER' } , aRow [2] ) )

	ElseIf	PropertyName == 'ALIGNMENT'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { 'LEFT' , 'RIGHT' , 'CENTER' } , aRow [2] ) )

	ElseIf	PropertyName == 'PICTALIGNMENT'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { 'BOTTOM' , 'LEFT' , 'RIGHT' , 'TOP' } , aRow [2] ) )

	ElseIf	PropertyName == 'ROW' ;
		.Or. ;
		PropertyName == 'COL' ;
		.Or. ;
		PropertyName == 'WIDTH' ;
		.Or. ;
		PropertyName == 'LOCKCOLUMNS' ;
		.Or. ;
		PropertyName == 'DROPPEDWIDTH' ;
		.Or. ;
		PropertyName == 'VIRTUAL WIDTH' ;
		.Or. ;
		PropertyName == 'VIRTUAL HEIGHT' ;
		.Or. ;
		PropertyName == 'SPACING' ;
		.Or. ;
		PropertyName == 'HEIGHT' ;
		.Or. ;
		PropertyName == 'RANGEMAX' ;
		.Or. ;
		PropertyName == 'RANGEMIN' ;
		.Or. ;
		PropertyName == 'INCREMENT' ;
		.Or. ;
		PropertyName == 'FONTSIZE' ;
		.Or. ;
		PropertyName == 'PAGECOUNT' ;
		.Or. ;
		PropertyName == 'INTERVAL' ;
		.Or. ;
		PropertyName == 'MAXLENGTH' ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'BROWSE' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'TAB' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'TREE' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'RADIOGROUP' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'COMBOBOX' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'SLIDER' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'SPINNER' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'PROGRESSBAR' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'LISTBOX' )


		Result := ALLTRIM ( PickNumericPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , aRow [2] ) )


	ElseIf PropertyName == 'WINDOWTYPE'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { 'CHILD' , 'MAIN' , 'MODAL' , 'SPLITCHILD' , 'STANDARD' ,'PANEL' } , aRow [2] ) )

	ElseIf PropertyName == 'HELPBUTTON'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { 'CHILD' , 'MAIN' , 'MODAL' , 'SPLITCHILD' , 'STANDARD' } , aRow [2] ) )

	ElseIf PropertyName == 'DATATYPE'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { 'CHARACTER' , 'DATE' , 'NUMERIC' } , aRow [2] ) )

	ElseIf PropertyName == 'ORIENTATION'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { 'HORIZONTAL' , 'VERTICAL' } , aRow [2] ) )

	ElseIf PropertyName == 'TICKMARKS' .And. ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlname + 'Orientation' ) ) ) == 'HORIZONTAL'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { 'BOTH' , 'BOTTOM' ,  'NONE' , 'TOP' } , aRow [2] ) )

	ElseIf PropertyName == 'TICKMARKS' .And. ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlname + 'Orientation' ) ) ) == 'VERTICAL'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , { 'BOTH' , 'LEFT' , 'NONE' , 'RIGHT' } , aRow [2] ) )

	ElseIf PropertyName == 'BACKCOLOR'

		Result := PickColorValue( aRow [1] )

	ElseIf PropertyName == 'FONTCOLOR'

		Result := PickColorValue( aRow [1] )

	ElseIf PropertyName == 'FORECOLOR'

		Result := PickColorValue( aRow [1] )

	Else

		Result := ALLTRIM ( PickCharacterPropertyValue ( aMsgs [ 130 ] , aRow [1] + ':' , aRow [2] ) )

	EndIf

	If _HMG_SYSDATA [ 257 ] == .F.

		DesignFormModified := .T.

		if ! Empty ( SelectedControlName )

			Properties.Grid_1.Item (i) := { aRow [1] , Result }

			*******************************************************
			If	SelectedControlType == 'BUTTON'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Caption' )
						__MVPUT( Result + 'Caption' ,  __MVGET ( PreviousValue + 'Caption' ) )
						__MVXRELEASE( PreviousValue + 'Caption' )

						__MVPUBLIC ( Result + 'Action' )
						__MVPUT( Result + 'Action' , __MVGET ( PreviousValue + 'Action' ) )
						__MVXRELEASE( PreviousValue + 'Action' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' , __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' , __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' , __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' , __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' , __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' , __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' , __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' , __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' , __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'Flat' )
						__MVPUT( Result + 'Flat' , __MVGET ( PreviousValue + 'Flat' ) )
						__MVXRELEASE( PreviousValue + 'Flat' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' , __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' , __MVGET ( PreviousValue + 'Visible'  ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' , __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Transparent' )
						__MVPUT( Result + 'Transparent' , __MVGET ( PreviousValue + 'Transparent'  ) )
						__MVXRELEASE( PreviousValue + 'Transparent' )

						__MVPUBLIC ( Result + 'Picture' )
						__MVPUT( Result + 'Picture' , __MVGET ( PreviousValue + 'Picture'  ) )
						__MVXRELEASE( PreviousValue + 'Picture' )

						__MVPUBLIC ( Result + 'PictAlignment' )
						__MVPUT( Result + 'PictAlignment' , __MVGET ( PreviousValue + 'PictAlignment'  ) )
						__MVXRELEASE( PreviousValue + 'PictAlignment' )

						__MVPUBLIC ( Result + 'MultiLine' )
						__MVPUT( Result + 'MultiLine' , __MVGET ( PreviousValue + 'MultiLine'  ) )
						__MVXRELEASE( PreviousValue + 'MultiLine' )


						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'CAPTION'
					__MVPUT( SelectedControlName + 'Caption' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FLAT'

					__MVPUT( SelectedControlName + 'Flat' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )
					CaptionTemp := GetProperty ( DesignForm , SelectedControlName , 'Caption' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE BUTTON &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						CAPTION CaptionTemp
						PARENT &DesignForm
						ON GOTFOCUS SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Flat' )    )) == '.T.'
							FLAT .T.
						else
							FLAT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'MultiLine' )    )) == '.T.'
							MULTILINE .T.
						else
							MULTILINE .F.
						endif

					END BUTTON

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					RedrawWindow (DesignForm)
					DrawGrid()
					SelectControl (SelectedControlName)
					DrawGrid()

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TRANSPARENT'
					__MVPUT( SelectedControlName + 'Transparent' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'PICTURE'
					__MVPUT( SelectedControlName + 'Picture' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'PICTALIGNMENT'
					__MVPUT( SelectedControlName + 'PictAlignment' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'MULTILINE'

					__MVPUT( SelectedControlName + 'MultiLine' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )
					CaptionTemp := GetProperty ( DesignForm , SelectedControlName , 'Caption' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE BUTTON &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						CAPTION CaptionTemp
						PARENT &DesignForm
						ON GOTFOCUS SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Flat' )    )) == '.T.'
							FLAT .T.
						else
							FLAT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'MultiLine' )    )) == '.T.'
							MULTILINE .T.
						else
							MULTILINE .F.
						endif

					END BUTTON

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					RedrawWindow (DesignForm)
					DrawGrid()
					SelectControl (SelectedControlName)
					DrawGrid()

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'CHECKBOX'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Caption' )
						__MVPUT( Result + 'Caption' ,  __MVGET ( PreviousValue + 'Caption' ) )
						__MVXRELEASE( PreviousValue + 'Caption' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'Field' )
						__MVPUT( Result + 'Field' ,  __MVGET ( PreviousValue + 'Field' ) )
						__MVXRELEASE( PreviousValue + 'Field' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Transparent' )
						__MVPUT( Result + 'Transparent' ,  __MVGET ( PreviousValue + 'Transparent' ) )
						__MVXRELEASE( PreviousValue + 'Transparent' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'CAPTION'
					__MVPUT( SelectedControlName + 'Caption' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FIELD'
					__MVPUT( SelectedControlName + 'Field' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TRANSPARENT'
					__MVPUT( SelectedControlName + 'Transparent' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'LISTBOX'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Item' , 1 , Result )

						__MVPUBLIC ( Result + 'DragItems' )
						__MVPUT( Result + 'DragItems' ,  __MVGET ( PreviousValue + 'DragItems' ) )
						__MVXRELEASE( PreviousValue + 'DragItems' )

						__MVPUBLIC ( Result + 'Items' )
						__MVPUT( Result + 'Items' ,  __MVGET ( PreviousValue + 'Items' ) )
						__MVXRELEASE( PreviousValue + 'Items' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						__MVPUBLIC ( Result + 'OnDblClick' )
						__MVPUT( Result + 'OnDblClick' ,  __MVGET ( PreviousValue + 'OnDblClick' ) )
						__MVXRELEASE( PreviousValue + 'OnDblClick' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Sort' )
						__MVPUT( Result + 'Sort' ,  __MVGET ( PreviousValue + 'Sort' ) )
						__MVXRELEASE( PreviousValue + 'Sort' )

						__MVPUBLIC ( Result + 'MultiSelect' )
						__MVPUT( Result + 'MultiSelect' ,  __MVGET ( PreviousValue + 'MultiSelect' ) )
						__MVXRELEASE( PreviousValue + 'MultiSelect' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ITEMS'
					__MVPUT( SelectedControlName + 'Items' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'SORT'
					__MVPUT( SelectedControlName + 'Sort' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'MULTISELECT'
					__MVPUT( SelectedControlName + 'MultiSelect' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DRAGITEMS'
					__MVPUT( SelectedControlName + 'DragItems' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'COMBOBOX'
			*******************************************************

				If PropertyName == 'ROW'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Item' , 1 , Result )
						SetProperty ( DesignForm , SelectedControlName , 'Value' , 1 )

						__MVPUBLIC ( Result + 'Items' )
						__MVPUT( Result + 'Items' ,  __MVGET ( PreviousValue + 'Items' ) )
						__MVXRELEASE( PreviousValue + 'Items' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Sort' )
						__MVPUT( Result + 'Sort' ,  __MVGET ( PreviousValue + 'Sort' ) )
						__MVXRELEASE( PreviousValue + 'Sort' )

						__MVPUBLIC ( Result + 'OnEnter' )
						__MVPUT( Result + 'OnEnter' ,  __MVGET ( PreviousValue + 'OnEnter' ) )
						__MVXRELEASE( PreviousValue + 'OnEnter' )

						__MVPUBLIC ( Result + 'OnDisplayChange' )
						__MVPUT( Result + 'OnDisplayChange' ,  __MVGET ( PreviousValue + 'OnDisplayChange' ) )
						__MVXRELEASE( PreviousValue + 'OnDisplayChange' )

						__MVPUBLIC ( Result + 'DisplayEdit' )
						__MVPUT( Result + 'DisplayEdit' ,  __MVGET ( PreviousValue + 'DisplayEdit' ) )
						__MVXRELEASE( PreviousValue + 'DisplayEdit' )

						__MVPUBLIC ( Result + 'ItemSource' )
						__MVPUT( Result + 'ItemSource' ,  __MVGET ( PreviousValue + 'ItemSource' ) )
						__MVXRELEASE( PreviousValue + 'ItemSource' )

						__MVPUBLIC ( Result + 'ValueSource' )
						__MVPUT( Result + 'ValueSource' ,  __MVGET ( PreviousValue + 'ValueSource' ) )
						__MVXRELEASE( PreviousValue + 'ValueSource' )

						__MVPUBLIC ( Result + 'DroppedWidth' )
						__MVPUT( Result + 'DroppedWidth' ,  __MVGET ( PreviousValue + 'DroppedWidth' ) )
						__MVXRELEASE( PreviousValue + 'DroppedWidth' )

						__MVPUBLIC ( Result + 'Image' )
						__MVPUT( Result + 'Image' ,  __MVGET ( PreviousValue + 'Image' ) )
						__MVXRELEASE( PreviousValue + 'Image' )

						__MVPUBLIC ( Result + 'OnCloseUp' )
						__MVPUT( Result + 'OnCloseUp' ,  __MVGET ( PreviousValue + 'OnCloseUp' ) )
						__MVXRELEASE( PreviousValue + 'OnCloseUp' )

						__MVPUBLIC ( Result + 'OnDropDown' )
						__MVPUT( Result + 'OnDropDown' ,  __MVGET ( PreviousValue + 'OnDropDown' ) )
						__MVXRELEASE( PreviousValue + 'OnDropDown' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ITEMS'
					__MVPUT( SelectedControlName + 'Items' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DROPPEDWIDTH'
					__MVPUT( SelectedControlName + 'DroppedWidth' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'IMAGE'
					__MVPUT( SelectedControlName + 'Image' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'SORT'
					__MVPUT( SelectedControlName + 'Sort' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DISPLAYEDIT'
					__MVPUT( SelectedControlName + 'DisplayEdit' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUESOURCE'
					__MVPUT( SelectedControlName + 'ValueSource' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ITEMSOURCE'
					__MVPUT( SelectedControlName + 'ItemSource' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'CHECKBUTTON'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Caption' )
						__MVPUT( Result + 'Caption' ,  __MVGET ( PreviousValue + 'Caption' ) )
						__MVXRELEASE( PreviousValue + 'Caption' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Picture' )
						__MVPUT( Result + 'Picture' ,  __MVGET ( PreviousValue + 'Picture' ) )
						__MVXRELEASE( PreviousValue + 'Picture' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'CAPTION'
					__MVPUT( SelectedControlName + 'Caption' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )

					if .Not. Empty ( Result )
						__MVPUT( SelectedControlName + 'Picture' , '' )
						Properties.Grid_1.Item(12) := { 'Picture' ,'' }
					EndIf

					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'PICTURE'
					__MVPUT( SelectedControlName + 'Picture' , Result )

					if .Not. Empty ( Result )
						__MVPUT( SelectedControlName + 'Caption' , '' )
						SetProperty ( DesignForm , SelectedControlName , 'Caption' , '' )
						Properties.Grid_1.Item(1) := { 'Caption' ,'' }
					EndIf

					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'GRID'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Item' , 1 , { Result } )

						__MVPUBLIC ( Result + 'Items' )
						__MVPUT( Result + 'Items' ,  __MVGET ( PreviousValue + 'Items' ) )
						__MVXRELEASE( PreviousValue + 'Items' )

						__MVPUBLIC ( Result + 'Headers' )
						__MVPUT( Result + 'Headers' ,  __MVGET ( PreviousValue + 'Headers' ) )
						__MVXRELEASE( PreviousValue + 'Headers' )

						__MVPUBLIC ( Result + 'Widths' )
						__MVPUT( Result + 'Widths' ,  __MVGET ( PreviousValue + 'Widths' ) )
						__MVXRELEASE( PreviousValue + 'Widths' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'OnDblClick' )
						__MVPUT( Result + 'OnDblClick' ,  __MVGET ( PreviousValue + 'OnDblClick' ) )
						__MVXRELEASE( PreviousValue + 'OnDblClick' )

						__MVPUBLIC ( Result + 'OnHeadClick' )
						__MVPUT( Result + 'OnHeadClick' ,  __MVGET ( PreviousValue + 'OnHeadClick' ) )
						__MVXRELEASE( PreviousValue + 'OnHeadClick' )

						__MVPUBLIC ( Result + 'OnQueryData' )
						__MVPUT( Result + 'OnQueryData' ,  __MVGET ( PreviousValue + 'OnQueryData' ) )
						__MVXRELEASE( PreviousValue + 'OnQueryData' )

						__MVPUBLIC ( Result + 'MultiSelect' )
						__MVPUT( Result + 'MultiSelect' ,  __MVGET ( PreviousValue + 'MultiSelect' ) )
						__MVXRELEASE( PreviousValue + 'MultiSelect' )

						__MVPUBLIC ( Result + 'AllowEdit' )
						__MVPUT( Result + 'AllowEdit' ,  __MVGET ( PreviousValue + 'AllowEdit' ) )
						__MVXRELEASE( PreviousValue + 'AllowEdit' )

						__MVPUBLIC ( Result + 'Virtual' )
						__MVPUT( Result + 'Virtual' ,  __MVGET ( PreviousValue + 'Virtual' ) )
						__MVXRELEASE( PreviousValue + 'Virtual' )

						__MVPUBLIC ( Result + 'Lines' )
						__MVPUT( Result + 'Lines' ,  __MVGET ( PreviousValue + 'Lines' ) )
						__MVXRELEASE( PreviousValue + 'Lines' )

						__MVPUBLIC ( Result + 'Image' )
						__MVPUT( Result + 'Image' ,  __MVGET ( PreviousValue + 'Image' ) )
						__MVXRELEASE( PreviousValue + 'Image' )

						__MVPUBLIC ( Result + 'Justify' )
						__MVPUT( Result + 'Justify' ,  __MVGET ( PreviousValue + 'Justify' ) )
						__MVXRELEASE( PreviousValue + 'Justify' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'ItemCount' )
						__MVPUT( Result + 'ItemCount' ,  __MVGET ( PreviousValue + 'ItemCount' ) )
						__MVXRELEASE( PreviousValue + 'ItemCount' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						*

						__MVPUBLIC ( Result + 'DynamicBackColor' )
						__MVPUT( Result + 'DynamicBackColor' ,  __MVGET ( PreviousValue + 'DynamicBackColor' ) )
						__MVXRELEASE( PreviousValue + 'DynamicBackColor' )

						__MVPUBLIC ( Result + 'DynamicForeColor' )
						__MVPUT( Result + 'DynamicForeColor' ,  __MVGET ( PreviousValue + 'DynamicForeColor' ) )
						__MVXRELEASE( PreviousValue + 'DynamicForeColor' )

						__MVPUBLIC ( Result + 'ColumnWhen' )
						__MVPUT( Result + 'ColumnWhen' ,  __MVGET ( PreviousValue + 'ColumnWhen' ) )
						__MVXRELEASE( PreviousValue + 'ColumnWhen' )

						__MVPUBLIC ( Result + 'ColumnValid' )
						__MVPUT( Result + 'ColumnValid' ,  __MVGET ( PreviousValue + 'ColumnValid' ) )
						__MVXRELEASE( PreviousValue + 'ColumnValid' )

						__MVPUBLIC ( Result + 'ColumnControls' )
						__MVPUT( Result + 'ColumnControls' ,  __MVGET ( PreviousValue + 'ColumnControls' ) )
						__MVXRELEASE( PreviousValue + 'ColumnControls' )

						__MVPUBLIC ( Result + 'ShowHeaders' )
						__MVPUT( Result + 'ShowHeaders' ,  __MVGET ( PreviousValue + 'ShowHeaders' ) )
						__MVXRELEASE( PreviousValue + 'ShowHeaders' )

						__MVPUBLIC ( Result + 'HeaderImages' )
						__MVPUT( Result + 'HeaderImages' ,  __MVGET ( PreviousValue + 'HeaderImages' ) )
						__MVXRELEASE( PreviousValue + 'HeaderImages' )

						__MVPUBLIC ( Result + 'CellNavigation' )
						__MVPUT( Result + 'CellNavigation' ,  __MVGET ( PreviousValue + 'CellNavigation' ) )
						__MVXRELEASE( PreviousValue + 'CellNavigation' )




						__MVPUBLIC ( Result + 'RowSource' )
						__MVPUT( Result + 'RowSource' ,  __MVGET ( PreviousValue + 'RowSource' ) )
						__MVXRELEASE( PreviousValue + 'RowSource' )

						__MVPUBLIC ( Result + 'ColumnFields' )
						__MVPUT( Result + 'ColumnFields' ,  __MVGET ( PreviousValue + 'ColumnFields' ) )
						__MVXRELEASE( PreviousValue + 'ColumnFields' )

						__MVPUBLIC ( Result + 'AllowAppend' )
						__MVPUT( Result + 'AllowAppend' ,  __MVGET ( PreviousValue + 'AllowAppend' ) )
						__MVXRELEASE( PreviousValue + 'AllowAppend' )

						__MVPUBLIC ( Result + 'AllowDelete' )
						__MVPUT( Result + 'AllowDelete' ,  __MVGET ( PreviousValue + 'AllowDelete' ) )
						__MVXRELEASE( PreviousValue + 'AllowDelete' )

						__MVPUBLIC ( Result + 'Buffered' )
						__MVPUT( Result + 'Buffered' ,  __MVGET ( PreviousValue + 'Buffered' ) )
						__MVXRELEASE( PreviousValue + 'Buffered' )

						__MVPUBLIC ( Result + 'DynamicDisplay' )
						__MVPUT( Result + 'DynamicDisplay' ,  __MVGET ( PreviousValue + 'DynamicDisplay' ) )
						__MVXRELEASE( PreviousValue + 'DynamicDisplay' )


						__MVPUBLIC ( Result + 'OnSave' )
						__MVPUT( Result + 'OnSave' ,  __MVGET ( PreviousValue + 'OnSave' ) )
						__MVXRELEASE( PreviousValue + 'OnSave' )


						__MVPUBLIC ( Result + 'LockColumns' )
						__MVPUT( Result + 'LockColumns' ,  __MVGET ( PreviousValue + 'LockColumns' ) )
						__MVXRELEASE( PreviousValue + 'LockColumns' )

						*

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ITEMS'
					__MVPUT( SelectedControlName + 'Items' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ROWSOURCE'
					__MVPUT( SelectedControlName + 'RowSource' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'COLUMNFIELDS'
					__MVPUT( SelectedControlName + 'ColumnFields' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ALLOWAPPEND'
					__MVPUT( SelectedControlName + 'AllowAppend' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ALLOWDELETE'
					__MVPUT( SelectedControlName + 'AllowDelete' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BUFFERED'
					__MVPUT( SelectedControlName + 'Buffered' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DYNAMICDISPLAY'
					__MVPUT( SelectedControlName + 'DynamicDisplay' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'CELLNAVIGATION'
					__MVPUT( SelectedControlName + 'CellNavigation' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTHS'
					__MVPUT( SelectedControlName + 'Widths' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEADERS'
					__MVPUT( SelectedControlName + 'Headers' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'MULTISELECT'
					__MVPUT( SelectedControlName + 'MultiSelect' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ALLOWEDIT'
					__MVPUT( SelectedControlName + 'AllowEdit' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VIRTUAL'
					__MVPUT( SelectedControlName + 'Virtual' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'LINES'
					__MVPUT( SelectedControlName + 'Lines' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE GRID &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ON GOTFOCUS SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
						HEADERS {'',''}
						WIDTHS {60,60}
						ITEMS { { SelectedControlName ,''} }

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'ShowHeaders' )  )) == '.T.'
							SHOWHEADERS .T.
						else
							SHOWHEADERS .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Lines' )  )) == '.T.'
							NOLINES .F.
						else
							NOLINES .T.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER( __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

					END GRID

					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'JUSTIFY'
					__MVPUT( SelectedControlName + 'Justify' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'IMAGE'
					__MVPUT( SelectedControlName + 'Image' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ITEMCOUNT'
					__MVPUT( SelectedControlName + 'ItemCount' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , {255,255,255} )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , {0,0,0} )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				*


				ElseIf PropertyName == 'LOCKCOLUMNS'
					__MVPUT( SelectedControlName + 'LOCKCOLUMNS' , Result )
					SelectControl (SelectedControlName)
				ElseIf PropertyName == 'DYNAMICBACKCOLOR'
					__MVPUT( SelectedControlName + 'DYNAMICBACKCOLOR' , Result )
					SelectControl (SelectedControlName)
				ElseIf PropertyName == 'DYNAMICFORECOLOR'
					__MVPUT( SelectedControlName + 'DYNAMICFORECOLOR' , Result )
					SelectControl (SelectedControlName)
				ElseIf PropertyName == 'COLUMNWHEN'
					__MVPUT( SelectedControlName + 'COLUMNWHEN' , Result )
					SelectControl (SelectedControlName)
				ElseIf PropertyName == 'COLUMNVALID'
					__MVPUT( SelectedControlName + 'COLUMNVALID' , Result )
					SelectControl (SelectedControlName)
				ElseIf PropertyName == 'COLUMNCONTROLS'
					__MVPUT( SelectedControlName + 'COLUMNCONTROLS' , Result )
					SelectControl (SelectedControlName)
				ElseIf PropertyName == 'SHOWHEADERS'

					__MVPUT( SelectedControlName + 'SHOWHEADERS' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE GRID &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ON GOTFOCUS SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
						HEADERS {'',''}
						WIDTHS {60,60}
						ITEMS { { SelectedControlName ,''} }

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'ShowHeaders' )  )) == '.T.'
							SHOWHEADERS .T.
						else
							SHOWHEADERS .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Lines' )  )) == '.T.'
							NOLINES .F.
						else
							NOLINES .T.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER( __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

					END GRID

					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					SelectControl (SelectedControlName)

                                *

				ElseIf PropertyName == 'HEADERIMAGES'
					__MVPUT( SelectedControlName + 'HEADERIMAGES' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'SLIDER'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'RangeMin' )
						__MVPUT( Result + 'RangeMin' ,  __MVGET ( PreviousValue + 'RangeMin' ) )
						__MVXRELEASE( PreviousValue + 'RangeMin' )

						__MVPUBLIC ( Result + 'RangeMax' )
						__MVPUT( Result + 'RangeMax' ,  __MVGET ( PreviousValue + 'RangeMax' ) )
						__MVXRELEASE( PreviousValue + 'RangeMax' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'TickMarks' )
						__MVPUT( Result + 'TickMarks' ,  __MVGET ( PreviousValue + 'TickMarks' ) )
						__MVXRELEASE( PreviousValue + 'TickMarks' )

						__MVPUBLIC ( Result + 'Orientation' )
						__MVPUT( Result + 'Orientation' ,  __MVGET ( PreviousValue + 'Orientation' ) )
						__MVXRELEASE( PreviousValue + 'Orientation' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'RANGEMAX'
					__MVPUT( SelectedControlName + 'RangeMax' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'RANGEMIN'
					__MVPUT( SelectedControlName + 'RangeMin' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ORIENTATION'

					If 	( HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'Orientation' ) ) ) == 'VERTICAL' ;
						.and. ;
						HMG_UPPER ( ALLTRIM ( Result ) ) == 'HORIZONTAL' )

						HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
						WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

						If HMG_UPPER ( ALLTRIM ( __MVGET ( SelectedControlName + 'TickMarks' ) ) ) == 'RIGHT'
							__MVPUT ( SelectedControlName + 'TickMarks' , 'TOP' )
						EndIf

						If HMG_UPPER ( ALLTRIM ( __MVGET ( SelectedControlName + 'TickMarks' ) ) ) == 'LEFT'
							__MVPUT ( SelectedControlName + 'TickMarks' , 'BOTTOM' )
						EndIf

					ElseIf 	( HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'Orientation' ) ) ) == 'HORIZONTAL' ;
						.and. ;
						HMG_UPPER ( ALLTRIM ( Result ) ) == 'VERTICAL' )

						HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
						WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

						If HMG_UPPER ( ALLTRIM ( __MVGET ( SelectedControlName + 'TickMarks' ) ) ) == 'BOTTOM'
							__MVPUT ( SelectedControlName + 'TickMarks' , 'RIGHT' )
						EndIf

						If HMG_UPPER ( ALLTRIM ( __MVGET ( SelectedControlName + 'TickMarks' ) ) ) == 'TOP'
							__MVPUT ( SelectedControlName + 'TickMarks' , 'LEFT' )
						EndIf

					Else

						WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
						HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					EndIf

					__MVPUT( SelectedControlName + 'Orientation' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )

					TabName := _HMG_SYSDATA [ 36 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					if ! empty ( TabName )
						fmb := _HMG_SYSDATA [ 183 ]
						_HMG_SYSDATA [ 183 ] := 1
						_HMG_SYSDATA [ 225 ]  := TabName
						_HMG_SYSDATA [ 332 ] [_HMG_SYSDATA [ 183 ]] := DesignForm
					endif

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE SLIDER &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ON CHANGE SelectControl (This.Name)
						RANGEMIN 1
						RANGEMAX 10

						If HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'Orientation' ) ) ) == 'VERTICAL'
							VERTICAL .T.
						EndIf

						If HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'TickMarks' ) ) ) == 'BOTH'
							BOTH .T.
						ElseIf HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'TickMarks' ) ) ) == 'LEFT'
							LEFT .T.
						ElseIf HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'TickMarks' ) ) ) == 'TOP'
							TOP .T.
						ElseIf HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'TickMarks' ) ) ) == 'NONE'
							NOTICKS .T.
						EndIf

					END SLIDER

					if ! empty ( TabName )
						_HMG_SYSDATA [ 183 ] := fmb
					endif

					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

					EndIf

					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)
					DrawGrid()

					SetFocus ( GetControlhandle ( SelectedControlName , DesignForm ) )

				ElseIf PropertyName == 'TICKMARKS'

					__MVPUT( SelectedControlName + 'TickMarks' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 36 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					if ! empty ( TabName )
						fmb := _HMG_SYSDATA [ 183 ]
						_HMG_SYSDATA [ 183 ] := 1
						_HMG_SYSDATA [ 225 ]  := TabName
						_HMG_SYSDATA [ 332 ] [_HMG_SYSDATA [ 183 ]] := DesignForm
					endif

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE SLIDER &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ON CHANGE SelectControl (This.Name)
						RANGEMIN 1
						RANGEMAX 10

						If HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'Orientation' ) ) ) == 'VERTICAL'
							VERTICAL .T.
						EndIf

						If HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'TickMarks' ) ) ) == 'BOTH'
							BOTH .T.
						ElseIf HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'TickMarks' ) ) ) == 'LEFT'
							LEFT .T.
						ElseIf HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'TickMarks' ) ) ) == 'TOP'
							TOP .T.
						ElseIf HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'TickMarks' ) ) ) == 'NONE'
							NOTICKS .T.
						EndIf

					END SLIDER

					if ! empty ( TabName )
						_HMG_SYSDATA [ 183 ] := fmb
					endif

					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

					EndIf

					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)
					DrawGrid()

					SetFocus ( GetControlhandle ( SelectedControlName , DesignForm ) )

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil

						RedrawWindow ( _HMG_SYSDATA [   3 ] [z] )
						setFocus(_HMG_SYSDATA [   3 ][z])

					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'SPINNER'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'RangeMin' )
						__MVPUT( Result + 'RangeMin' ,  __MVGET ( PreviousValue + 'RangeMin' ) )
						__MVXRELEASE( PreviousValue + 'RangeMin' )

						__MVPUBLIC ( Result + 'RangeMax' )
						__MVPUT( Result + 'RangeMax' ,  __MVGET ( PreviousValue + 'RangeMax' ) )
						__MVXRELEASE( PreviousValue + 'RangeMax' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						__MVPUBLIC ( Result + 'Wrap' )
						__MVPUT( Result + 'Wrap' ,  __MVGET ( PreviousValue + 'Wrap' ) )
						__MVXRELEASE( PreviousValue + 'Wrap' )

						__MVPUBLIC ( Result + 'ReadOnly' )
						__MVPUT( Result + 'ReadOnly' ,  __MVGET ( PreviousValue + 'ReadOnly' ) )
						__MVXRELEASE( PreviousValue + 'ReadOnly' )

						__MVPUBLIC ( Result + 'Increment' )
						__MVPUT( Result + 'Increment' ,  __MVGET ( PreviousValue + 'Increment' ) )
						__MVXRELEASE( PreviousValue + 'Increment' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'RANGEMAX'
					__MVPUT( SelectedControlName + 'RangeMax' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'RANGEMIN'
					__MVPUT( SelectedControlName + 'RangeMin' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WRAP'
					__MVPUT( SelectedControlName + 'Wrap' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'READONLY'
					__MVPUT( SelectedControlName + 'ReadOnly' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'INCREMENT'
					__MVPUT( SelectedControlName + 'Increment' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'IMAGE'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Picture' )
						__MVPUT( Result + 'Picture' ,  __MVGET ( PreviousValue + 'Picture' ) )
						__MVXRELEASE( PreviousValue + 'Picture' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Stretch' )
						__MVPUT( Result + 'Stretch' ,  __MVGET ( PreviousValue + 'Stretch' ) )
						__MVXRELEASE( PreviousValue + 'Stretch' )

						__MVPUBLIC ( Result + 'Action' )
						__MVPUT( Result + 'Action' ,  __MVGET ( PreviousValue + 'Action' ) )
						__MVXRELEASE( PreviousValue + 'Action' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'PICTURE'
					__MVPUT( SelectedControlName + 'Picture' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'STRETCH'
					__MVPUT( SelectedControlName + 'Stretch' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'TREE'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Item' , 1 , Result )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'OnDblClick' )
						__MVPUT( Result + 'OnDblClick' ,  __MVGET ( PreviousValue + 'OnDblClick' ) )
						__MVXRELEASE( PreviousValue + 'OnDblClick' )

						__MVPUBLIC ( Result + 'NodeImages' )
						__MVPUT( Result + 'NodeImages' ,  __MVGET ( PreviousValue + 'NodeImages' ) )
						__MVXRELEASE( PreviousValue + 'NodeImages' )

						__MVPUBLIC ( Result + 'ItemImages' )
						__MVPUT( Result + 'ItemImages' ,  __MVGET ( PreviousValue + 'ItemImages' ) )
						__MVXRELEASE( PreviousValue + 'ItemImages' )

						__MVPUBLIC ( Result + 'RootButton' )
						__MVPUT( Result + 'RootButton' ,  __MVGET ( PreviousValue + 'RootButton' ) )
						__MVXRELEASE( PreviousValue + 'RootButton' )

						__MVPUBLIC ( Result + 'ItemIds' )
						__MVPUT( Result + 'ItemIds' ,  __MVGET ( PreviousValue + 'ItemIds' ) )
						__MVXRELEASE( PreviousValue + 'ItemIds' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NODEIMAGES'
					__MVPUT( SelectedControlName + 'NodeImages' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ITEMIMAGES'
					__MVPUT( SelectedControlName + 'ItemImages' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ROOTBUTTON'
					__MVPUT( SelectedControlName + 'RootButton' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ITEMIDS'
					__MVPUT( SelectedControlName + 'ItemIds' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'DATEPICKER'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'OnEnter' )
						__MVPUT( Result + 'OnEnter' ,  __MVGET ( PreviousValue + 'OnEnter' ) )
						__MVXRELEASE( PreviousValue + 'OnEnter' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'ShowNone' )
						__MVPUT( Result + 'ShowNone' ,  __MVGET ( PreviousValue + 'ShowNone' ) )
						__MVXRELEASE( PreviousValue + 'ShowNone' )

						__MVPUBLIC ( Result + 'UpDown' )
						__MVPUT( Result + 'UpDown' ,  __MVGET ( PreviousValue + 'UpDown' ) )
						__MVXRELEASE( PreviousValue + 'UpDown' )

						__MVPUBLIC ( Result + 'RightAlign' )
						__MVPUT( Result + 'RightAlign' ,  __MVGET ( PreviousValue + 'RightAlign' ) )
						__MVXRELEASE( PreviousValue + 'RightAlign' )

						__MVPUBLIC ( Result + 'Field' )
						__MVPUT( Result + 'Field' ,  __MVGET ( PreviousValue + 'Field' ) )
						__MVXRELEASE( PreviousValue + 'Field' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'SHOWNONE'
					__MVPUT( SelectedControlName + 'ShowNone' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE DATEPICKER &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ON GOTFOCUS SelectControl(This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'ShowNone' )    )) == '.T.'
							SHOWNONE .T.
						else
							SHOWNONE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'UpDown' )    )) == '.T.'
							UPDOWN .T.
						else
							UPDOWN .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'RightAlign' )    )) == '.T.'
							RIGHTALIGN .T.
						else
							RIGHTALIGN .F.
						endif

					END DATEPICKER

					if ! empty ( TabName )
						TabPage := GetProperty ( DesignForm , TabName , 'Value' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )
						DrawGrid()
						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName
					EndIf

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'UPDOWN'
					__MVPUT( SelectedControlName + 'UpDown' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE DATEPICKER &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ON GOTFOCUS SelectControl(This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'ShowNone' )    )) == '.T.'
							SHOWNONE .T.
						else
							SHOWNONE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'UpDown' )    )) == '.T.'
							UPDOWN .T.
						else
							UPDOWN .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'RightAlign' )    )) == '.T.'
							RIGHTALIGN .T.
						else
							RIGHTALIGN .F.
						endif

					END DATEPICKER

					if ! empty ( TabName )
						TabPage := GetProperty ( DesignForm , TabName , 'Value' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )
						DrawGrid()
						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName
					EndIf

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'RIGHTALIGN'
					__MVPUT( SelectedControlName + 'RightAlign' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE DATEPICKER &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ON GOTFOCUS SelectControl(This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'ShowNone' )    )) == '.T.'
							SHOWNONE .T.
						else
							SHOWNONE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'UpDown' )    )) == '.T.'
							UPDOWN .T.
						else
							UPDOWN .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'RightAlign' )    )) == '.T.'
							RIGHTALIGN .T.
						else
							RIGHTALIGN .F.
						endif

					END DATEPICKER

					if ! empty ( TabName )
						TabPage := GetProperty ( DesignForm , TabName , 'Value' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )
						DrawGrid()
						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName
					EndIf

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FIELD'
					__MVPUT( SelectedControlName + 'Field' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'TEXTBOX'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)


				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Value' , Result )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'InputMask' )
						__MVPUT( Result + 'InputMask' ,  __MVGET ( PreviousValue + 'InputMask' ) )
						__MVXRELEASE( PreviousValue + 'InputMask' )

						__MVPUBLIC ( Result + 'Format' )
						__MVPUT( Result + 'Format' ,  __MVGET ( PreviousValue + 'Format' ) )
						__MVXRELEASE( PreviousValue + 'Format' )

						__MVPUBLIC ( Result + 'DataType' )
						__MVPUT( Result + 'DataType' ,  __MVGET ( PreviousValue + 'DataType' ) )
						__MVXRELEASE( PreviousValue + 'DataType' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'OnEnter' )
						__MVPUT( Result + 'OnEnter' ,  __MVGET ( PreviousValue + 'OnEnter' ) )
						__MVXRELEASE( PreviousValue + 'OnEnter' )

						__MVPUBLIC ( Result + 'Field' )
						__MVPUT( Result + 'Field' ,  __MVGET ( PreviousValue + 'Field' ) )
						__MVXRELEASE( PreviousValue + 'Field' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'ReadOnly' )
						__MVPUT( Result + 'ReadOnly' ,  __MVGET ( PreviousValue + 'ReadOnly' ) )
						__MVXRELEASE( PreviousValue + 'ReadOnly' )

						__MVPUBLIC ( Result + 'RightAlign' )
						__MVPUT( Result + 'RightAlign' ,  __MVGET ( PreviousValue + 'RightAlign' ) )
						__MVXRELEASE( PreviousValue + 'RightAlign' )

						__MVPUBLIC ( Result + 'MaxLength' )
						__MVPUT( Result + 'MaxLength' ,  __MVGET ( PreviousValue + 'MaxLength' ) )
						__MVXRELEASE( PreviousValue + 'MaxLength' )

						__MVPUBLIC ( Result + 'Password' )
						__MVPUT( Result + 'Password' ,  __MVGET ( PreviousValue + 'Password' ) )
						__MVXRELEASE( PreviousValue + 'Password' )

						__MVPUBLIC ( Result + 'CaseConvert' )
						__MVPUT( Result + 'CaseConvert' ,  __MVGET ( PreviousValue + 'CaseConvert' ) )
						__MVXRELEASE( PreviousValue + 'CaseConvert' )

						__MVPUBLIC ( Result + 'DisabledBackColor' )
						__MVPUT( Result + 'DisabledBackColor' ,  __MVGET ( PreviousValue + 'DisabledBackColor' ) )
						__MVXRELEASE( PreviousValue + 'DisabledBackColor' )

						__MVPUBLIC ( Result + 'DisabledFontColor' )
						__MVPUT( Result + 'DisabledFontColor' ,  __MVGET ( PreviousValue + 'DisabledFontColor' ) )
						__MVXRELEASE( PreviousValue + 'DisabledFontColor' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'INPUTMASK'
					__MVPUT( SelectedControlName + 'InputMask' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FORMAT'
					__MVPUT( SelectedControlName + 'Format' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DATATYPE'
					__MVPUT( SelectedControlName + 'DataType' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FIELD'
					__MVPUT( SelectedControlName + 'Field' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'READONLY'
					__MVPUT( SelectedControlName + 'ReadOnly' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'RIGHTALIGN'
					__MVPUT( SelectedControlName + 'RightAlign' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE TEXTBOX &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ON GOTFOCUS SelectControl(This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						VALUE SelectedControlName

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'RightAlign' )    )) == '.T.'
							RIGHTALIGN .T.
						endif

					END TEXTBOX

					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif

					if ! empty ( TabName )
						TabPage := GetProperty ( DesignForm , TabName , 'Value' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )
						DrawGrid()
						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName
					EndIf

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'MAXLENGTH'
					__MVPUT( SelectedControlName + 'MaxLength' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'PASSWORD'
					__MVPUT( SelectedControlName + 'Password' , Result )
					SelectControl (SelectedControlName)

					ElseIf PropertyName == 'DISABLEDFONTCOLOR'
						__MVPUT( SelectedControlName + 'DisabledFontColor' , Result )
						SelectControl (SelectedControlName)

					ElseIf PropertyName == 'DISABLEDBACKCOLOR'
						__MVPUT( SelectedControlName + 'DisabledBackColor' , Result )
						SelectControl (SelectedControlName)

					ElseIf PropertyName == 'CASECONVERT'
						__MVPUT( SelectedControlName + 'CaseConvert' , Result )
						SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'EDITBOX'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Value' , Result )

						__MVPUBLIC ( Result + 'ReadOnly' )
						__MVPUT( Result + 'ReadOnly' ,  __MVGET ( PreviousValue + 'ReadOnly' ) )
						__MVXRELEASE( PreviousValue + 'ReadOnly' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Field' )
						__MVPUT( Result + 'Field' ,  __MVGET ( PreviousValue + 'Field' ) )
						__MVXRELEASE( PreviousValue + 'Field' )

						__MVPUBLIC ( Result + 'MaxLength' )
						__MVPUT( Result + 'MaxLength' ,  __MVGET ( PreviousValue + 'MaxLength' ) )
						__MVXRELEASE( PreviousValue + 'MaxLength' )

						__MVPUBLIC ( Result + 'vScrollBar' )
						__MVPUT( Result + 'vScrollBar' ,  __MVGET ( PreviousValue + 'vScrollBar' ) )
						__MVXRELEASE( PreviousValue + 'vScrollBar' )

						__MVPUBLIC ( Result + 'hScrollBar' )
						__MVPUT( Result + 'hScrollBar' ,  __MVGET ( PreviousValue + 'hScrollBar' ) )
						__MVXRELEASE( PreviousValue + 'hScrollBar' )

						__MVPUBLIC ( Result + 'DisabledBackColor' )
						__MVPUT( Result + 'DisabledBackColor' ,  __MVGET ( PreviousValue + 'DisabledBackColor' ) )
						__MVXRELEASE( PreviousValue + 'DisabledBackColor' )

						__MVPUBLIC ( Result + 'DisabledFontColor' )
						__MVPUT( Result + 'DisabledFontColor' ,  __MVGET ( PreviousValue + 'DisabledFontColor' ) )
						__MVXRELEASE( PreviousValue + 'DisabledFontColor' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'READONLY'
					__MVPUT( SelectedControlName + 'ReadOnly' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'MAXLENGTH'
					__MVPUT( SelectedControlName + 'MaxLength' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FIELD'
					__MVPUT( SelectedControlName + 'Field' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DISABLEDBACKCOLOR'
					__MVPUT( SelectedControlName + 'DisabledBackColor' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DISABLEDFONTCOLOR'
					__MVPUT( SelectedControlName + 'DisabledFontColor' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VSCROLLBAR'

					__MVPUT( SelectedControlName + 'vScrollBar' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE EDITBOX &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						VALUE SelectedControlName

						ON GOTFOCUS SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
						WIDTH WidthTemp
						HEIGHT HeightTemp

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'hScrollBar' )  )) == '.T.'
							HSCROLLBAR .T.
						else
							HSCROLLBAR .F.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'vScrollBar' )  )) == '.T.'
							VSCROLLBAR .T.
						else
							VSCROLLBAR .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

					END EDITBOX

					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						TabRow	:= GetProperty ( DesignForm , TabName , 'Row' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						* MiniGUI Bug!!!!
						SetProperty ( DesignForm , TabName , 'Row' , TabRow )

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]  := TabName

					EndIf

					Redrawwindow(DesignFormHandle)
					DrawGrid()
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HSCROLLBAR'

					__MVPUT( SelectedControlName + 'hScrollBar' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE EDITBOX &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						VALUE SelectedControlName

						ON GOTFOCUS SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
						WIDTH WidthTemp
						HEIGHT HeightTemp

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'hScrollBar' )  )) == '.T.'
							HSCROLLBAR .T.
						else
							HSCROLLBAR .F.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'vScrollBar' )  )) == '.T.'
							VSCROLLBAR .T.
						else
							VSCROLLBAR .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

					END EDITBOX

					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						TabRow	:= GetProperty ( DesignForm , TabName , 'Row' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						* MiniGUI Bug!!!!
						SetProperty ( DesignForm , TabName , 'Row' , TabRow )

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					Redrawwindow(DesignFormHandle)
					DrawGrid()
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'LABEL'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Transparent' )
						__MVPUT( Result + 'Transparent' ,  __MVGET ( PreviousValue + 'Transparent' ) )
						__MVXRELEASE( PreviousValue + 'Transparent' )

						__MVPUBLIC ( Result + 'Action' )
						__MVPUT( Result + 'Action' ,  __MVGET ( PreviousValue + 'Action' ) )
						__MVXRELEASE( PreviousValue + 'Action' )

						__MVPUBLIC ( Result + 'AutoSize' )
						__MVPUT( Result + 'AutoSize' ,  __MVGET ( PreviousValue + 'AutoSize' ) )
						__MVXRELEASE( PreviousValue + 'AutoSize' )

						__MVPUBLIC ( Result + 'Alignment' )
						__MVPUT( Result + 'Alignment' ,  __MVGET ( PreviousValue + 'Alignment' ) )
						__MVXRELEASE( PreviousValue + 'Alignment' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TRANSPARENT'
					__MVPUT( SelectedControlName + 'Transparent' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'AUTOSIZE'
					__MVPUT( SelectedControlName + 'AutoSize' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ALIGNMENT'
					__MVPUT( SelectedControlName + 'Alignment' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE LABEL &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ACTION SelectControl(This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						VALUE __MVGET ( SelectedControlName + 'Value' )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Alignment' )    )) == 'CENTER'
							CENTERALIGN .T.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Alignment' )    )) == 'RIGHT'
							RIGHTALIGN .T.
						endif

						if ( ! Empty ( TabName ) ) .AND. IsAppThemed()
							TRANSPARENT .T.
						endif

					END LABEL

					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif

					if ! empty ( TabName )
						TabPage := GetProperty ( DesignForm , TabName , 'Value' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )
						DrawGrid()
						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName
					EndIf

					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'BROWSE'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Header' , 1 ,  Result )

						__MVPUBLIC ( Result + 'WorkArea' )
						__MVPUT( Result + 'WorkArea' ,  __MVGET ( PreviousValue + 'WorkArea' ) )
						__MVXRELEASE( PreviousValue + 'WorkArea' )

						__MVPUBLIC ( Result + 'Fields' )
						__MVPUT( Result + 'Fields' ,  __MVGET ( PreviousValue + 'Fields' ) )
						__MVXRELEASE( PreviousValue + 'Fields' )

						__MVPUBLIC ( Result + 'Headers' )
						__MVPUT( Result + 'Headers' ,  __MVGET ( PreviousValue + 'Headers' ) )
						__MVXRELEASE( PreviousValue + 'Headers' )

						__MVPUBLIC ( Result + 'Widths' )
						__MVPUT( Result + 'Widths' ,  __MVGET ( PreviousValue + 'Widths' ) )
						__MVXRELEASE( PreviousValue + 'Widths' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						__MVPUBLIC ( Result + 'OnDblClick' )
						__MVPUT( Result + 'OnDblClick' ,  __MVGET ( PreviousValue + 'OnDblClick' ) )
						__MVXRELEASE( PreviousValue + 'OnDblClick' )

						__MVPUBLIC ( Result + 'AllowEdit' )
						__MVPUT( Result + 'AllowEdit' ,  __MVGET ( PreviousValue + 'AllowEdit' ) )
						__MVXRELEASE( PreviousValue + 'AllowEdit' )

						__MVPUBLIC ( Result + 'AllowAppend' )
						__MVPUT( Result + 'AllowAppend' ,  __MVGET ( PreviousValue + 'AllowAppend' ) )
						__MVXRELEASE( PreviousValue + 'AllowAppend' )

						__MVPUBLIC ( Result + 'OnHeadClick' )
						__MVPUT( Result + 'OnHeadClick' ,  __MVGET ( PreviousValue + 'OnHeadClick' ) )
						__MVXRELEASE( PreviousValue + 'OnHeadClick' )

						__MVPUBLIC ( Result + 'AllowDelete' )
						__MVPUT( Result + 'AllowDelete' ,  __MVGET ( PreviousValue + 'AllowDelete' ) )
						__MVXRELEASE( PreviousValue + 'AllowDelete' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Image' )
						__MVPUT( Result + 'Image' ,  __MVGET ( PreviousValue + 'Image' ) )
						__MVXRELEASE( PreviousValue + 'Image' )

						__MVPUBLIC ( Result + 'Justify' )
						__MVPUT( Result + 'Justify' ,  __MVGET ( PreviousValue + 'Justify' ) )
						__MVXRELEASE( PreviousValue + 'Justify' )

						__MVPUBLIC ( Result + 'Lines' )
						__MVPUT( Result + 'Lines' ,  __MVGET ( PreviousValue + 'Lines' ) )
						__MVXRELEASE( PreviousValue + 'Lines' )

						__MVPUBLIC ( Result + 'ReadOnlyFields' )
						__MVPUT( Result + 'ReadOnlyFields' ,  __MVGET ( PreviousValue + 'ReadOnlyFields' ) )
						__MVXRELEASE( PreviousValue + 'ReadOnlyFields' )

						__MVPUBLIC ( Result + 'Valid' )
						__MVPUT( Result + 'Valid' ,  __MVGET ( PreviousValue + 'Valid' ) )
						__MVXRELEASE( PreviousValue + 'Valid' )

						__MVPUBLIC ( Result + 'ValidMessages' )
						__MVPUT( Result + 'ValidMessages' ,  __MVGET ( PreviousValue + 'ValidMessages' ) )
						__MVXRELEASE( PreviousValue + 'ValidMessages' )

						__MVPUBLIC ( Result + 'Lock' )
						__MVPUT( Result + 'Lock' ,  __MVGET ( PreviousValue + 'Lock' ) )
						__MVXRELEASE( PreviousValue + 'Lock' )

						__MVPUBLIC ( Result + 'vScrollBar' )
						__MVPUT( Result + 'vScrollBar' ,  __MVGET ( PreviousValue + 'vScrollBar' ) )
						__MVXRELEASE( PreviousValue + 'vScrollBar' )

						__MVPUBLIC ( Result + 'DynamicBackColor' )
						__MVPUT( Result + 'DynamicBackColor' ,  __MVGET ( PreviousValue + 'DynamicBackColor' ) )
						__MVXRELEASE( PreviousValue + 'DynamicBackColor' )

						__MVPUBLIC ( Result + 'DynamicForeColor' )
						__MVPUT( Result + 'DynamicForeColor' ,  __MVGET ( PreviousValue + 'DynamicForeColor' ) )
						__MVXRELEASE( PreviousValue + 'DynamicForeColor' )

						__MVPUBLIC ( Result + 'InputMask' )
						__MVPUT( Result + 'InputMask' ,  __MVGET ( PreviousValue + 'InputMask' ) )
						__MVXRELEASE( PreviousValue + 'InputMask' )

						__MVPUBLIC ( Result + 'Format' )
						__MVPUT( Result + 'Format' ,  __MVGET ( PreviousValue + 'Format' ) )
						__MVXRELEASE( PreviousValue + 'Format' )

						__MVPUBLIC ( Result + 'When' )
						__MVPUT( Result + 'When' ,  __MVGET ( PreviousValue + 'When' ) )
						__MVXRELEASE( PreviousValue + 'When' )

						__MVPUBLIC ( Result + 'DisplayItems' )
						__MVPUT( Result + 'DisplayItems' ,  __MVGET ( PreviousValue + 'DisplayItems' ) )
						__MVXRELEASE( PreviousValue + 'DisplayItems' )

						__MVPUBLIC ( Result + 'HeaderImages' )
						__MVPUT( Result + 'HeaderImages' ,  __MVGET ( PreviousValue + 'HeaderImages' ) )
						__MVXRELEASE( PreviousValue + 'HeaderImages' )

						__MVPUBLIC ( Result + 'InputItems' )
						__MVPUT( Result + 'InputItems' ,  __MVGET ( PreviousValue + 'InputItems' ) )
						__MVXRELEASE( PreviousValue + 'InputItems' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTHS'
					__MVPUT( SelectedControlName + 'Widths' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FIELDS'
					__MVPUT( SelectedControlName + 'Fields' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WORKAREA'
					__MVPUT( SelectedControlName + 'WorkArea' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEADERS'
					__MVPUT( SelectedControlName + 'Headers' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'


					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)

						nTemp := GetControlSysColor()
						z := GetControlIndex ( SelectedControlName , DesignForm )
						ListView_SetBkColor ( _HMG_SYSDATA [   3 ] [z] , GetRed(nTemp) , GetGreen(nTemp) , GetBlue(nTemp) )
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )

					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ALLOWEDIT'
					__MVPUT( SelectedControlName + 'AllowEdit' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ALLOWAPPEND'
					__MVPUT( SelectedControlName + 'AllowAppend' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ALLOWDELETE'
					__MVPUT( SelectedControlName + 'AllowDelete' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'JUSTIFY'
					__MVPUT( SelectedControlName + 'Justify' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'IMAGE'
					__MVPUT( SelectedControlName + 'Image' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'LINES'
					__MVPUT( SelectedControlName + 'Lines' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

					TabName := _HMG_SYSDATA [ 37 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE BROWSE &SelectedControlName
						ROW RowTemp
						COL ColTemp
						WIDTH WidthTemp
						HEIGHT HeightTemp
						PARENT &DesignForm
						ON GOTFOCUS SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
						HEADERS { SelectedControlName }
						WIDTHS { 100 }
						WORKAREA Test
						FIELDS { 'Test->Code' }
						VALUE 1
						VSCROLLBAR .F.

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Lines' )  )) == '.T.'
							NOLINES .F.
						else
							NOLINES .T.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER( __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

					END BROWSE

					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						TabRow	:= GetProperty ( DesignForm , TabName , 'Row' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						* MiniGUI Bug!!!!
						SetProperty ( DesignForm , TabName , 'Row' , TabRow )

						_HMG_SYSDATA [ 37 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					Redrawwindow(DesignFormHandle)
					DrawGrid()
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'READONLYFIELDS'
					__MVPUT( SelectedControlName + 'ReadOnlyFields' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALID'
					__MVPUT( SelectedControlName + 'Valid' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALIDMESSAGES'
					__MVPUT( SelectedControlName + 'ValidMessages' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'LOCK'
					__MVPUT( SelectedControlName + 'Lock' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VSCROLLBAR'
					__MVPUT( SelectedControlName + 'vScrollBar' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DYNAMICBACKCOLOR'
					__MVPUT( SelectedControlName + 'DYNAMICBACKCOLOR' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DYNAMICFORECOLOR'
					__MVPUT( SelectedControlName + 'DYNAMICFORECOLOR' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'INPUTMASK'
					__MVPUT( SelectedControlName + 'INPUTMASK' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FORMAT'
					__MVPUT( SelectedControlName + 'FORMAT' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WHEN'
					__MVPUT( SelectedControlName + 'WHEN' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'INPUTITEMS'
					__MVPUT( SelectedControlName + 'INPUTITEMS' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'DISPLAYITEMS'
					__MVPUT( SelectedControlName + 'DISPLAYITEMS' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEADERIMAGES'
					__MVPUT( SelectedControlName + 'HEADERIMAGES' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'RADIOGROUP'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'ReadOnly' )
						__MVPUT( Result + 'ReadOnly' ,  __MVGET ( PreviousValue + 'ReadOnly' ) )
						__MVXRELEASE( PreviousValue + 'ReadOnly' )

						__MVPUBLIC ( Result + 'Orientation' )
						__MVPUT( Result + 'Orientation' ,  __MVGET ( PreviousValue + 'Orientation' ) )
						__MVXRELEASE( PreviousValue + 'Orientation' )



						__MVPUBLIC ( Result + 'Options' )
						__MVPUT( Result + 'Options' ,  __MVGET ( PreviousValue + 'Options' ) )
						__MVXRELEASE( PreviousValue + 'Options' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Transparent' )
						__MVPUT( Result + 'Transparent' ,  __MVGET ( PreviousValue + 'Transparent' ) )
						__MVXRELEASE( PreviousValue + 'Transparent' )

						__MVPUBLIC ( Result + 'Spacing' )
						__MVPUT( Result + 'Spacing' ,  __MVGET ( PreviousValue + 'Spacing' ) )
						__MVXRELEASE( PreviousValue + 'Spacing' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'OPTIONS'

					aTemp := StringToArray ( Result )
					if HMG_LEN ( aTemp ) == 1
						MsgStop ('Options Array Length Must Be At Least 2. Aborted','HMG IDE')
						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)
						Return
					Endif

					__MVPUT( SelectedControlName + 'Options' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )


					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					if ! empty ( TabName )
						fmb := _HMG_SYSDATA [ 183 ]
						_HMG_SYSDATA [ 183 ] := 1
						_HMG_SYSDATA [ 225 ]  := TabName
						_HMG_SYSDATA [ 332 ] [_HMG_SYSDATA [ 183 ]] := DesignForm
					endif

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE RADIOGROUP &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						OPTIONS aTemp
						ON CHANGE SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
						SPACING VAL ( __MVGET ( SelectedControlName + 'Spacing' ) )
						WIDTH WidthTemp

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Orientation' )  )) == 'HORIZONTAL'
							HORIZONTAL .T.
						else
							HORIZONTAL .F.
						endif


						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

					END RADIOGROUP

					if ! empty ( TabName )
						_HMG_SYSDATA [ 183 ] := fmb
					endif


					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						TabRow	:= GetProperty ( DesignForm , TabName , 'Row' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						* MiniGUI Bug!!!!
						SetProperty ( DesignForm , TabName , 'Row' , TabRow )

					EndIf

					Redrawwindow(DesignFormHandle)
					DrawGrid()
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TRANSPARENT'
					__MVPUT( SelectedControlName + 'Transparent' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'SPACING'

					__MVPUT( SelectedControlName + 'Spacing' , Result )

					z := GetControlIndex ( SelectedControlName , DesignForm )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					OptTemp := _HMG_SYSDATA [ 33 ] [z]

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					if ! empty ( TabName )
						fmb := _HMG_SYSDATA [ 183 ]
						_HMG_SYSDATA [ 183 ] := 1
						_HMG_SYSDATA [ 225 ]  := TabName
						_HMG_SYSDATA [ 332 ] [_HMG_SYSDATA [ 183 ]] := DesignForm
					endif

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE RADIOGROUP &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						OPTIONS OptTemp
						ON CHANGE SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
						SPACING VAL ( __MVGET ( SelectedControlName + 'Spacing' ) )
						WIDTH WidthTemp

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Orientation' )  )) == 'HORIZONTAL'
							HORIZONTAL .T.
						else
							HORIZONTAL .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

					END RADIOGROUP

					if ! empty ( TabName )
						_HMG_SYSDATA [ 183 ] := fmb
					endif

					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						TabRow	:= GetProperty ( DesignForm , TabName , 'Row' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						* MiniGUI Bug!!!!
						SetProperty ( DesignForm , TabName , 'Row' , TabRow )

					EndIf

					Redrawwindow(DesignFormHandle)
					DrawGrid()
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'READONLY'
					__MVPUT( SelectedControlName + 'ReadOnly' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ORIENTATION'

					__MVPUT( SelectedControlName + 'Orientation' , Result )

					If result == 'VERTICAL'
						__MVPUT( SelectedControlName + 'Spacing' , '25' )
					elseif result == 'HORIZONTAL'
						__MVPUT( SelectedControlName + 'Spacing' , '125' )
					endif

					z := GetControlIndex ( SelectedControlName , DesignForm )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )
					WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
					OptTemp := _HMG_SYSDATA [ 33 ] [z]

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					if ! empty ( TabName )
						fmb := _HMG_SYSDATA [ 183 ]
						_HMG_SYSDATA [ 183 ] := 1
						_HMG_SYSDATA [ 225 ]  := TabName
						_HMG_SYSDATA [ 332 ] [_HMG_SYSDATA [ 183 ]] := DesignForm
					endif

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE RADIOGROUP &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						OPTIONS OptTemp
						ON CHANGE SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
						SPACING VAL ( __MVGET ( SelectedControlName + 'Spacing' ) )
						WIDTH WidthTemp

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Orientation' )  )) == 'HORIZONTAL'
							HORIZONTAL .T.
						else
							HORIZONTAL .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

					END RADIOGROUP

					if ! empty ( TabName )
						_HMG_SYSDATA [ 183 ] := fmb
					endif

					ColorTmp :=__MVGET ( SelectedControlName + 'FontColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &ColorTmp )
					endif
					ColorTmp :=__MVGET ( SelectedControlName + 'BackColor' )
					if HB_ULEFT(ALLTRIM( ColorTmp ),1) == '{'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &ColorTmp )
					endif

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						TabRow	:= GetProperty ( DesignForm , TabName , 'Row' )
						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						* MiniGUI Bug!!!!
						SetProperty ( DesignForm , TabName , 'Row' , TabRow )

					EndIf

					Redrawwindow(DesignFormHandle)
					DrawGrid()
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'FRAME'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Caption' )
						__MVPUT( Result + 'Caption' ,  __MVGET ( PreviousValue + 'Caption' ) )
						__MVXRELEASE( PreviousValue + 'Caption' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'Transparent' )
						__MVPUT( Result + 'Transparent' ,  __MVGET ( PreviousValue + 'Transparent' ) )
						__MVXRELEASE( PreviousValue + 'Transparent' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'CAPTION'

					__MVPUT( SelectedControlName + 'Caption' , Result )

					if empty ( result )
						SetProperty ( DesignForm , SelectedControlName , 'fontsize' , 1 )
					else
						SetProperty ( DesignForm , SelectedControlName , 'fontsize' , VAL ( __MVGET( SelectedControlName + 'FontSize' ) ) )
					endif

					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TRANSPARENT'

					__MVPUT( SelectedControlName + 'Transparent' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'TAB'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )

					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						_OLDNAME := _HMG_SYSDATA [2] [X]
						_NEWNAME := Result

						FOR Z := 1 TO HMG_LEN ( _HMG_SYSDATA [1] )

							IF _HMG_SYSDATA [1] [Z] == 'CHECKBOX' .AND. VALTYPE ( _HMG_SYSDATA [31] [Z] ) == 'C'
								IF HMG_UPPER ( ALLTRIM ( _HMG_SYSDATA [31] [Z] ) ) == HMG_UPPER ( ALLTRIM ( _OLDNAME ) )
									_HMG_SYSDATA [31] [Z] := _NEWNAME
								ENDIF
							ENDIF

							IF _HMG_SYSDATA [1] [Z] == 'SLIDER' .AND. VALTYPE ( _HMG_SYSDATA [36] [Z] ) == 'C'
								IF HMG_UPPER ( ALLTRIM ( _HMG_SYSDATA [36] [Z] ) ) == HMG_UPPER ( ALLTRIM ( _OLDNAME ) )
									_HMG_SYSDATA [36] [Z] := _NEWNAME
								ENDIF
							ENDIF

							IF _HMG_SYSDATA [1] [Z] == 'RADIOGROUP' .AND. VALTYPE ( _HMG_SYSDATA [31] [Z] ) == 'C'
								IF HMG_UPPER ( ALLTRIM ( _HMG_SYSDATA [31] [Z] ) ) == HMG_UPPER ( ALLTRIM ( _OLDNAME ) )
									_HMG_SYSDATA [31] [Z] := _NEWNAME
								ENDIF
							ENDIF

							IF _HMG_SYSDATA [1] [Z] == 'FRAME' .AND. VALTYPE ( _HMG_SYSDATA [31] [Z] ) == 'C'
								IF HMG_UPPER ( ALLTRIM ( _HMG_SYSDATA [31] [Z] ) ) == HMG_UPPER ( ALLTRIM ( _OLDNAME ) )
									_HMG_SYSDATA [31] [Z] := _NEWNAME
								ENDIF
							ENDIF

						NEXT Z

						__MVPUBLIC ( Result + 'MultiLine' )
						__MVPUT( Result + 'Multiline' ,  __MVGET ( PreviousValue + 'Multiline' ) )
						__MVXRELEASE( PreviousValue + 'Multiline' )

						__MVPUBLIC ( Result + 'PageCount' )
						__MVPUT( Result + 'PageCount' ,  __MVGET ( PreviousValue + 'PageCount' ) )
						__MVXRELEASE( PreviousValue + 'PageCount' )

						__MVPUBLIC ( Result + 'Captions' )
						__MVPUT( Result + 'Captions' ,  __MVGET ( PreviousValue + 'Captions' ) )
						__MVXRELEASE( PreviousValue + 'Captions' )

						__MVPUBLIC ( Result + 'PageImages' )
						__MVPUT( Result + 'PageImages' ,  __MVGET ( PreviousValue + 'PageImages' ) )
						__MVXRELEASE( PreviousValue + 'PageImages' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'Buttons' )
						__MVPUT( Result + 'Buttons' ,  __MVGET ( PreviousValue + 'Buttons' ) )
						__MVXRELEASE( PreviousValue + 'Buttons' )

						__MVPUBLIC ( Result + 'Flat' )
						__MVPUT( Result + 'Flat' ,  __MVGET ( PreviousValue + 'Flat' ) )
						__MVXRELEASE( PreviousValue + 'Flat' )

						__MVPUBLIC ( Result + 'Vertical' )
						__MVPUT( Result + 'Vertical' ,  __MVGET ( PreviousValue + 'Vertical' ) )
						__MVXRELEASE( PreviousValue + 'Vertical' )

						__MVPUBLIC ( Result + 'HotTrack' )
						__MVPUT( Result + 'HotTrack' ,  __MVGET ( PreviousValue + 'HotTrack' ) )
						__MVXRELEASE( PreviousValue + 'HotTrack' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'PAGECOUNT'

					if VAL ( PreviousValue ) != VAL ( Result )

						__MVPUT( SelectedControlName + 'PageCount' , Result )

						if VAL ( Result ) > VAL ( PreviousValue )

							x := GetControlIndex ( SelectedControlName , DesignForm )

							For a := 1 To VAL ( Result ) - VAL ( PreviousValue )

								DoMethod ( DesignForm , SelectedControlName , 'AddPage' , VAL ( PreviousValue ) + a , 'Page ' + ALLTRIM(STR( VAL ( PreviousValue ) + a )))
								_HMG_SYSDATA [ 33 ] [x] [ VAL ( PreviousValue ) + a ] :=  'Page ' + ALLTRIM(STR( VAL ( PreviousValue ) + a ) )

							Next a

						        cTemp := '{ '
							For a := 1 To HMG_LEN ( _HMG_SYSDATA [ 33 ] [x] )
								cTemp := cTemp + chr(34) + _HMG_SYSDATA [ 33 ] [x] [a] + chr(34) + ' , '
							Next a
					                cTemp := ALLTRIM (cTemp)
							cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 1 )
							cTemp := cTemp + '} '
							__MVPUT (_HMG_SYSDATA [   2 ] [x] + 'Captions' , cTemp )
							__MVPUT (_HMG_SYSDATA [   2 ] [x] + 'PageCount' , ALLTRIM(STR(HMG_LEN(_HMG_SYSDATA [ 7 ][x]))) )


***

							aTemp := StringToArray ( __MVGET( SelectedControlName + 'PageImages' ) )

						        cTemp := '{ '
							For a := 1 To HMG_LEN ( aTemp )
								cTemp := cTemp + chr(34) + aTemp [a] + chr(34) + ' , '
							Next a

							For a := 1 To HMG_LEN ( _HMG_SYSDATA [ 33 ] [x] ) - HMG_LEN ( aTemp )
								cTemp := cTemp + chr(34) + '' + chr(34) + ' , '
							Next a

					                cTemp := ALLTRIM (cTemp)
							cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 1 )
							cTemp := cTemp + '} '
							__MVPUT (_HMG_SYSDATA [   2 ] [x] + 'PageImages' , cTemp )

***


						Elseif VAL ( Result ) < VAL ( PreviousValue )

							aTemp := {}

							x1 := GetControlIndex ( SelectedControlName , DesignForm )

							lSuccess := .T.

							For a := VAL ( PreviousValue )  To VAL ( Result ) + 1 Step -1

								if HMG_LEN ( _HMG_SYSDATA [  7 ] [x1] [a] ) > 0

									MsgStop ( aMsgs [ 223 ] ,'HMG IDE')
									__MVPUT( SelectedControlName + 'PageCount' , PreviousValue )

									lSuccess := .F.
									exit
								else
									DoMethod ( DesignForm , SelectedControlName , 'DeletePage' , a )
								endif

							next a

							If lSuccess == .T.

							        cTemp := '{ '
								For y := 1 To HMG_LEN ( _HMG_SYSDATA [ 33 ] [x1] )
									cTemp := cTemp + chr(34) + _HMG_SYSDATA [ 33 ] [x1] [y] + chr(34) + ' , '
								Next y
						                cTemp := ALLTRIM (cTemp)
								cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 1 )
								cTemp := cTemp + '} '
								__MVPUT (_HMG_SYSDATA [   2 ] [x1] + 'Captions' , cTemp )


								x := GetControlIndex ( SelectedControlName , DesignForm )

								aTemp := StringToArray ( __MVGET( SelectedControlName + 'PageImages' ) )

							        cTemp := '{ '
								For a := 1 To HMG_LEN ( _HMG_SYSDATA [ 33 ] [x] )
									cTemp := cTemp + chr(34) + aTemp [a] + chr(34) + ' , '
								Next a

					        	        cTemp := ALLTRIM (cTemp)
								cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 1 )
								cTemp := cTemp + '} '
								__MVPUT (_HMG_SYSDATA [   2 ] [x] + 'PageImages' , cTemp )

							endif

						EndIf

					EndIf

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'CAPTIONS'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					aTemp := StringToArray ( Result )

					if HMG_LEN (aTemp) != VAL ( __MVGET (SelectedControlName + 'PageCount' ) )
						MsgStop ('Captions Array Length Must Be Equal To PageCount Value. Aborted','HMG IDE')
						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)
						Return
					EndIf

					__MVPUT( SelectedControlName + 'Captions' , Result )


					For k := 1 To HMG_LEN ( _HMG_SYSDATA [ 33 ] [x] )
						SetProperty ( DesignForm , SelectedControlName , 'Caption' , k , aTemp [k] )
					Next k

					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)


				ElseIf PropertyName == 'BUTTONS'

					if	ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Buttons'	) ) ) == '.T.'	;
						.and. ;
						IsAppThemed() ;
						.and. ;
						ALLTRIM ( HMG_UPPER ( Result ) ) == '.F.'

						__MVPUT( SelectedControlName + 'Vertical' , '.F.' )

					endif

					__MVPUT( SelectedControlName + 'Buttons' , Result )

					TabMultiline	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Multiline'	) ) ) == '.T.' , .T. , .F. )

					TabIndex	:= GetControlIndex ( SelectedControlName , DesignForm )
					TabRow		:= GetProperty ( DesignForm , SelectedControlName , 'Row' )
					TabCol		:= GetProperty ( DesignForm , SelectedControlName , 'Col' )
					TabWidth	:= GetProperty ( DesignForm , SelectedControlName , 'Width' )
					TabHeight	:= GetProperty ( DesignForm , SelectedControlName , 'Height' )
					TabCaptions	:= _HMG_SYSDATA [ 33 ]   [TabIndex]
					TabPage		:= GetProperty ( DesignForm , SelectedControlName , 'Value' )
					TabButtons	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Buttons'	) ) ) == '.T.' , .T. , .F. )
					TabFlat		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Flat'	) ) ) == '.T.' , .T. , .F. )
					TabHotTrack	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'HotTrack'	) ) ) == '.T.' , .T. , .F. )
					TabVertical	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Vertical'	) ) ) == '.T.' , .T. , .F. )
					TabFontName	:= __MVGET ( SelectedControlName + 'FontName' )
					TabFontSize	:= VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
					TabBold		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontBold'	) ) ) == '.T.' , .T. , .F. )
					TabItalic	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontItalic'	) ) ) == '.T.' , .T. , .F. )
					TabUnderLine	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontUnderLine'	) ) ) == '.T.' , .T. , .F. )
					TabStrikeout	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontStrikeout'	) ) ) == '.T.' , .T. , .F. )
					releaseControl (_HMG_SYSDATA [   3 ] [tabindex] )
					_HMG_SYSDATA [   3 ] [TabIndex] := InitTabControl ( DesignFormhandle, 0, TabCol , TabRow , TabWidth , TabHeight , TabCaptions , TabPage, '', 0 , TabButtons , TabFlat , TabHottrack , TabVertical , .f. , TabMultiline )
					DeleteObject ( _HMG_SYSDATA [ 36 ] [tabindex] )
					_HMG_SYSDATA [ 36 ] [TabIndex] := _SetFont ( _HMG_SYSDATA [   3 ] [TabIndex] , TabFontName , TabFontSize , TabBold , TabItalic , TabUnderLine , TabStrikeout )


					for x := 1 to HMG_LEN ( _hmg_sysdata [1] )

						if	_hmg_sysdata [1] [x] == 'SLIDER' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'FRAME' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'CHECKBOX' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'RADIOGROUP'

							_hmg_sysdata [16] [x] := TabButtons

						endif

						if	_hmg_sysdata [1] [x] == 'SLIDER'

							_hmg_sysdata [36] [x] := SelectedControlName
							_hmg_sysdata [37] [x] := dESIGNfORM

							SetFocus ( _hmg_sysdata [3] [x] )

						ENDIF

					next x

					_HMG_SYSDATA [ 31 ]   [TabIndex] := TabButtons

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FLAT'
					__MVPUT( SelectedControlName + 'Flat' , Result )

					TabMultiline	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Multiline'	) ) ) == '.T.' , .T. , .F. )


					TabIndex	:= GetControlIndex ( SelectedControlName , DesignForm )
					TabRow		:= GetProperty ( DesignForm , SelectedControlName , 'Row' )
					TabCol		:= GetProperty ( DesignForm , SelectedControlName , 'Col' )
					TabWidth	:= GetProperty ( DesignForm , SelectedControlName , 'Width' )
					TabHeight	:= GetProperty ( DesignForm , SelectedControlName , 'Height' )
					TabCaptions	:= _HMG_SYSDATA [ 33 ]   [TabIndex]
					TabPage		:= GetProperty ( DesignForm , SelectedControlName , 'Value' )
					TabButtons	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Buttons'	) ) ) == '.T.' , .T. , .F. )
					TabFlat		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Flat'	) ) ) == '.T.' , .T. , .F. )
					TabHotTrack	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'HotTrack'	) ) ) == '.T.' , .T. , .F. )
					TabVertical	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Vertical'	) ) ) == '.T.' , .T. , .F. )
					TabFontName	:= __MVGET ( SelectedControlName + 'FontName' )
					TabFontSize	:= VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
					TabBold		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontBold'	) ) ) == '.T.' , .T. , .F. )
					TabItalic	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontItalic'	) ) ) == '.T.' , .T. , .F. )
					TabUnderLine	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontUnderLine'	) ) ) == '.T.' , .T. , .F. )
					TabStrikeout	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontStrikeOut'	) ) ) == '.T.' , .T. , .F. )
					releaseControl (_HMG_SYSDATA [   3 ] [tabindex] )
					_HMG_SYSDATA [   3 ] [TabIndex] := InitTabControl ( DesignFormhandle, 0, TabCol , TabRow , TabWidth , TabHeight , TabCaptions , TabPage, '', 0 , TabButtons , TabFlat , TabHottrack , TabVertical , .f. , TabMultiline )
					DeleteObject ( _HMG_SYSDATA [ 36 ] [tabindex] )
					_HMG_SYSDATA [ 36 ] [TabIndex] := _SetFont ( _HMG_SYSDATA [   3 ] [TabIndex] , TabFontName , TabFontSize , TabBold , TabItalic , TabUnderLine , TabStrikeout )


					for x := 1 to HMG_LEN ( _hmg_sysdata [1] )

						if	_hmg_sysdata [1] [x] == 'SLIDER' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'FRAME' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'CHECKBOX' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'RADIOGROUP'

							_hmg_sysdata [16] [x] := TabButtons

						endif

						if	_hmg_sysdata [1] [x] == 'SLIDER'

							_hmg_sysdata [36] [x] := SelectedControlName
							_hmg_sysdata [37] [x] := dESIGNfORM

							SetFocus ( _hmg_sysdata [3] [x] )

						ENDIF

					NEXT X

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HOTTRACK'
					__MVPUT( SelectedControlName + 'HotTrack' , Result )

					TabMultiline	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Multiline'	) ) ) == '.T.' , .T. , .F. )


					TabIndex	:= GetControlIndex ( SelectedControlName , DesignForm )
					TabRow		:= GetProperty ( DesignForm , SelectedControlName , 'Row' )
					TabCol		:= GetProperty ( DesignForm , SelectedControlName , 'Col' )
					TabWidth	:= GetProperty ( DesignForm , SelectedControlName , 'Width' )
					TabHeight	:= GetProperty ( DesignForm , SelectedControlName , 'Height' )
					TabCaptions	:= _HMG_SYSDATA [ 33 ]   [TabIndex]
					TabPage		:= GetProperty ( DesignForm , SelectedControlName , 'Value' )
					TabButtons	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Buttons'	) ) ) == '.T.' , .T. , .F. )
					TabFlat		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Flat'	) ) ) == '.T.' , .T. , .F. )
					TabHotTrack	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'HotTrack'	) ) ) == '.T.' , .T. , .F. )
					TabVertical	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Vertical'	) ) ) == '.T.' , .T. , .F. )
					TabFontName	:= __MVGET ( SelectedControlName + 'FontName' )
					TabFontSize	:= VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
					TabBold		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontBold'	) ) ) == '.T.' , .T. , .F. )
					TabItalic	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontItalic'	) ) ) == '.T.' , .T. , .F. )
					TabUnderLine	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontUnderLine'	) ) ) == '.T.' , .T. , .F. )
					TabStrikeout	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontStrikeOut'	) ) ) == '.T.' , .T. , .F. )
					releaseControl (_HMG_SYSDATA [   3 ] [tabindex] )
					_HMG_SYSDATA [   3 ] [TabIndex] := InitTabControl ( DesignFormhandle, 0, TabCol , TabRow , TabWidth , TabHeight , TabCaptions , TabPage, '', 0 , TabButtons , TabFlat , TabHottrack , TabVertical , .f. , TabMultiline )
					DeleteObject ( _HMG_SYSDATA [ 36 ] [tabindex] )
					_HMG_SYSDATA [ 36 ] [TabIndex] := _SetFont ( _HMG_SYSDATA [   3 ] [TabIndex] , TabFontName , TabFontSize , TabBold , TabItalic , TabUnderLine , TabStrikeout )

					for x := 1 to HMG_LEN ( _hmg_sysdata [1] )

						if	_hmg_sysdata [1] [x] == 'SLIDER' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'FRAME' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'CHECKBOX' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'RADIOGROUP'

							_hmg_sysdata [16] [x] := TabButtons

						endif

						if	_hmg_sysdata [1] [x] == 'SLIDER'

							_hmg_sysdata [36] [x] := SelectedControlName
							_hmg_sysdata [37] [x] := dESIGNfORM

							SetFocus ( _hmg_sysdata [3] [x] )

						ENDIF

					NEXT X

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VERTICAL'

					__MVPUT( SelectedControlName + 'Vertical' , Result )

					if	( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Buttons'	) ) ) == '.T.' ) ;
						.or.;
						( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Buttons'	) ) ) == '.F.' .and. !IsAppThemed() .and. !IsVista() )

					TabMultiline	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Multiline'	) ) ) == '.T.' , .T. , .F. )


					TabIndex	:= GetControlIndex ( SelectedControlName , DesignForm )
					TabRow		:= GetProperty ( DesignForm , SelectedControlName , 'Row' )
					TabCol		:= GetProperty ( DesignForm , SelectedControlName , 'Col' )
					TabWidth	:= GetProperty ( DesignForm , SelectedControlName , 'Width' )
					TabHeight	:= GetProperty ( DesignForm , SelectedControlName , 'Height' )
					TabCaptions	:= _HMG_SYSDATA [ 33 ]   [TabIndex]
					TabPage		:= GetProperty ( DesignForm , SelectedControlName , 'Value' )
					TabButtons	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Buttons'	) ) ) == '.T.' , .T. , .F. )
					TabFlat		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Flat'	) ) ) == '.T.' , .T. , .F. )
					TabHotTrack	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'HotTrack'	) ) ) == '.T.' , .T. , .F. )
					TabVertical	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Vertical'	) ) ) == '.T.' , .T. , .F. )
					TabFontName	:= __MVGET ( SelectedControlName + 'FontName' )
					TabFontSize	:= VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
					TabBold		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontBold'	) ) ) == '.T.' , .T. , .F. )
					TabItalic	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontItalic'	) ) ) == '.T.' , .T. , .F. )
					TabUnderLine	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontUnderLine'	) ) ) == '.T.' , .T. , .F. )
					TabStrikeout	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontStrikeOut'	) ) ) == '.T.' , .T. , .F. )
					releaseControl (_HMG_SYSDATA [   3 ] [tabindex] )
					_HMG_SYSDATA [   3 ] [TabIndex] := InitTabControl ( DesignFormhandle, 0, TabCol , TabRow , TabWidth , TabHeight , TabCaptions , TabPage, '', 0 , TabButtons , TabFlat , TabHottrack , TabVertical , .f. , TabMultiline )
					DeleteObject ( _HMG_SYSDATA [ 36 ] [tabindex] )
					_HMG_SYSDATA [ 36 ] [TabIndex] := _SetFont ( _HMG_SYSDATA [   3 ] [TabIndex] , TabFontName , TabFontSize , TabBold , TabItalic , TabUnderLine , TabStrikeout )

					for x := 1 to HMG_LEN ( _hmg_sysdata [1] )

						if	_hmg_sysdata [1] [x] == 'SLIDER' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'FRAME' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'CHECKBOX' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'RADIOGROUP'

							_hmg_sysdata [16] [x] := TabButtons

						endif

						if	_hmg_sysdata [1] [x] == 'SLIDER'

							_hmg_sysdata [36] [x] := SelectedControlName
							_hmg_sysdata [37] [x] := dESIGNfORM

							SetFocus ( _hmg_sysdata [3] [x] )

						ENDIF

					NEXT X

					endif

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'PAGEIMAGES'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					aTemp := StringToArray ( Result )

					if HMG_LEN (aTemp) != VAL ( __MVGET (SelectedControlName + 'PageCount' ) )
						MsgStop ('Images Array Length Must Be Equal To PageCount Value. Aborted','HMG IDE')
						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)
						Return
					EndIf

					__MVPUT( SelectedControlName + 'PageImages' , Result )

					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'MULTILINE'
					__MVPUT( SelectedControlName + 'Multiline' , Result )

					TabMultiline	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Multiline'	) ) ) == '.T.' , .T. , .F. )


					TabIndex	:= GetControlIndex ( SelectedControlName , DesignForm )
					TabRow		:= GetProperty ( DesignForm , SelectedControlName , 'Row' )
					TabCol		:= GetProperty ( DesignForm , SelectedControlName , 'Col' )
					TabWidth	:= GetProperty ( DesignForm , SelectedControlName , 'Width' )
					TabHeight	:= GetProperty ( DesignForm , SelectedControlName , 'Height' )
					TabCaptions	:= _HMG_SYSDATA [ 33 ]   [TabIndex]
					TabPage		:= GetProperty ( DesignForm , SelectedControlName , 'Value' )
					TabButtons	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Buttons'	) ) ) == '.T.' , .T. , .F. )
					TabFlat		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Flat'	) ) ) == '.T.' , .T. , .F. )
					TabHotTrack	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'HotTrack'	) ) ) == '.T.' , .T. , .F. )
					TabVertical	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'Vertical'	) ) ) == '.T.' , .T. , .F. )
					TabFontName	:= __MVGET ( SelectedControlName + 'FontName' )
					TabFontSize	:= VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )
					TabBold		:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontBold'	) ) ) == '.T.' , .T. , .F. )
					TabItalic	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontItalic'	) ) ) == '.T.' , .T. , .F. )
					TabUnderLine	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontUnderLine'	) ) ) == '.T.' , .T. , .F. )
					TabStrikeout	:= if ( ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlName + 'FontStrikeOut'	) ) ) == '.T.' , .T. , .F. )
					releaseControl (_HMG_SYSDATA [   3 ] [tabindex] )
					_HMG_SYSDATA [   3 ] [TabIndex] := InitTabControl ( DesignFormhandle, 0, TabCol , TabRow , TabWidth , TabHeight , TabCaptions , TabPage, '', 0 , TabButtons , TabFlat , TabHottrack , TabVertical , .f. , TabMultiline )
					DeleteObject ( _HMG_SYSDATA [ 36 ] [tabindex] )
					_HMG_SYSDATA [ 36 ] [TabIndex] := _SetFont ( _HMG_SYSDATA [   3 ] [TabIndex] , TabFontName , TabFontSize , TabBold , TabItalic , TabUnderLine , TabStrikeout )


					for x := 1 to HMG_LEN ( _hmg_sysdata [1] )

						if	_hmg_sysdata [1] [x] == 'SLIDER' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'FRAME' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'CHECKBOX' ;
							.or. ;
							_hmg_sysdata [1] [x] == 'RADIOGROUP'

							_hmg_sysdata [16] [x] := TabButtons

						endif

						if	_hmg_sysdata [1] [x] == 'SLIDER'

							_hmg_sysdata [36] [x] := SelectedControlName
							_hmg_sysdata [37] [x] := dESIGNfORM

							SetFocus ( _hmg_sysdata [3] [x] )

						ENDIF

					NEXT X

					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'ANIMATEBOX'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'File' )
						__MVPUT( Result + 'File' ,  __MVGET ( PreviousValue + 'File' ) )
						__MVXRELEASE( PreviousValue + 'File' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Transparent' )
						__MVPUT( Result + 'Transparent' ,  __MVGET ( PreviousValue + 'Transparent' ) )
						__MVXRELEASE( PreviousValue + 'Transparent' )

						__MVPUBLIC ( Result + 'AutoPlay' )
						__MVPUT( Result + 'AutoPlay' ,  __MVGET ( PreviousValue + 'AutoPlay' ) )
						__MVXRELEASE( PreviousValue + 'AutoPlay' )

						__MVPUBLIC ( Result + 'Center' )
						__MVPUT( Result + 'Center' ,  __MVGET ( PreviousValue + 'Center' ) )
						__MVXRELEASE( PreviousValue + 'Center' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FILE'
					__MVPUT( SelectedControlName + 'File' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TRANSPARENT'
					__MVPUT( SelectedControlName + 'Transparent' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'AUTOPLAY'
					__MVPUT( SelectedControlName + 'AutoPlay' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'CENTER'
					__MVPUT( SelectedControlName + 'Center' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'HYPERLINK'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'Address' )
						__MVPUT( Result + 'Address' ,  __MVGET ( PreviousValue + 'Address' ) )
						__MVXRELEASE( PreviousValue + 'Address' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'AutoSize' )
						__MVPUT( Result + 'AutoSize' ,  __MVGET ( PreviousValue + 'AutoSize' ) )
						__MVXRELEASE( PreviousValue + 'AutoSize' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'FontColor' )
						__MVPUT( Result + 'FontColor' ,  __MVGET ( PreviousValue + 'FontColor' ) )
						__MVXRELEASE( PreviousValue + 'FontColor' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'HandCursor' )
						__MVPUT( Result + 'HandCursor' ,  __MVGET ( PreviousValue + 'HandCursor' ) )
						__MVXRELEASE( PreviousValue + 'HandCursor' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ADDRESS'
					__MVPUT( SelectedControlName + 'Address' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'AUTOSIZE'
					__MVPUT( SelectedControlName + 'AutoSize' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTCOLOR'
					__MVPUT( SelectedControlName + 'FontColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'FontColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HANDCURSOR'
					__MVPUT( SelectedControlName + 'HandCursor' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'MONTHCALENDAR'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'Today' )
						__MVPUT( Result + 'Today' ,  __MVGET ( PreviousValue + 'Today' ) )
						__MVXRELEASE( PreviousValue + 'Today' )

						__MVPUBLIC ( Result + 'TodayCircle' )
						__MVPUT( Result + 'TodayCircle' ,  __MVGET ( PreviousValue + 'TodayCircle' ) )
						__MVXRELEASE( PreviousValue + 'TodayCircle' )

						__MVPUBLIC ( Result + 'WeekNumbers' )
						__MVPUT( Result + 'WeekNumbers' ,  __MVGET ( PreviousValue + 'WeekNumbers' ) )
						__MVXRELEASE( PreviousValue + 'WeekNumbers' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE MONTHCALENDAR &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						ON CHANGE SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Today' )    )) == '.T.'
							NOTODAY .F.
						else
							NOTODAY .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'TodayCircle' )    )) == '.T.'
							NOTODAYCIRCLE .F.
						else
							NOTODAYCIRCLE .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'WeekNumbers' )    )) == '.T.'
							WEEKNUMBERS .T.
						else
							WEEKNUMBERS .F.
						endif

					END MONTHCALENDAR

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					RedrawWindow (DesignForm)
					DrawGrid()
					SelectControl (SelectedControlName)
					DrawGrid()

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE MONTHCALENDAR &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						ON CHANGE SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Today' )    )) == '.T.'
							NOTODAY .F.
						else
							NOTODAY .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'TodayCircle' )    )) == '.T.'
							NOTODAYCIRCLE .F.
						else
							NOTODAYCIRCLE .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'WeekNumbers' )    )) == '.T.'
							WEEKNUMBERS .T.
						else
							WEEKNUMBERS .F.
						endif

					END MONTHCALENDAR

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TODAY'
					__MVPUT( SelectedControlName + 'Today' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE MONTHCALENDAR &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						ON CHANGE SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Today' )    )) == '.T.'
							NOTODAY .F.
						else
							NOTODAY .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'TodayCircle' )    )) == '.T.'
							NOTODAYCIRCLE .F.
						else
							NOTODAYCIRCLE .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'WeekNumbers' )    )) == '.T.'
							WEEKNUMBERS .T.
						else
							WEEKNUMBERS .F.
						endif

					END MONTHCALENDAR

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TODAYCIRCLE'

					__MVPUT( SelectedControlName + 'TodayCircle' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE MONTHCALENDAR &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						ON CHANGE SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Today' )    )) == '.T.'
							NOTODAY .F.
						else
							NOTODAY .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'TodayCircle' )    )) == '.T.'
							NOTODAYCIRCLE .F.
						else
							NOTODAYCIRCLE .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'WeekNumbers' )    )) == '.T.'
							WEEKNUMBERS .T.
						else
							WEEKNUMBERS .F.
						endif

					END MONTHCALENDAR


					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WEEKNUMBERS'

					__MVPUT( SelectedControlName + 'WeekNumbers' , Result )

					RowTemp := GetProperty ( DesignForm , SelectedControlName , 'Row' )
					ColTemp := GetProperty ( DesignForm , SelectedControlName , 'Col' )

					TabName := _HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )]

					DoMethod ( DesignForm , SelectedControlName , 'Release' )

					DEFINE MONTHCALENDAR &SelectedControlName
						ROW RowTemp
						COL ColTemp
						PARENT &DesignForm
						ON CHANGE SelectControl (This.Name)
						FONTNAME __MVGET ( SelectedControlName + 'FontName' )
						FONTSIZE VAL ( __MVGET ( SelectedControlName + 'FontSize' ) )

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontBold' )  )) == '.T.'
							FONTBOLD .T.
						else
							FONTBOLD .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontItalic' )   )) == '.T.'
							FONTITALIC .T.
						else
							FONTITALIC .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontUnderLine' )    )) == '.T.'
							FONTUNDERLINE .T.
						else
							FONTUNDERLINE .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'FontStrikeOut' )    )) == '.T.'
							FONTSTRIKEOUT .T.
						else
							FONTSTRIKEOUT .F.
						endif

						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'Today' )    )) == '.T.'
							NOTODAY .F.
						else
							NOTODAY .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'TodayCircle' )    )) == '.T.'
							NOTODAYCIRCLE .F.
						else
							NOTODAYCIRCLE .T.
						endif
						if ALLTRIM(HMG_UPPER(  __MVGET ( SelectedControlName + 'WeekNumbers' )    )) == '.T.'
							WEEKNUMBERS .T.
						else
							WEEKNUMBERS .F.
						endif

					END MONTHCALENDAR

					if ! empty ( TabName )

						TabPage := GetProperty ( DesignForm , TabName , 'Value' )

						DoMethod ( DesignForm , TabName , 'AddControl' , SelectedControlName , TabPage , RowTemp , ColTemp )

						DrawGrid()

						_HMG_SYSDATA [ 31 ] [GetControlIndex ( SelectedControlName , DesignForm )] := TabName

					EndIf

					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'RICHEDITBOX'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Value' , Result )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'MaxLength' )
						__MVPUT( Result + 'MaxLength' ,  __MVGET ( PreviousValue + 'MaxLength' ) )
						__MVXRELEASE( PreviousValue + 'MaxLength' )

						__MVPUBLIC ( Result + 'Field' )
						__MVPUT( Result + 'Field' ,  __MVGET ( PreviousValue + 'Field' ) )
						__MVXRELEASE( PreviousValue + 'Field' )

						__MVPUBLIC ( Result + 'ReadOnly' )
						__MVPUT( Result + 'ReadOnly' ,  __MVGET ( PreviousValue + 'ReadOnly' ) )
						__MVXRELEASE( PreviousValue + 'ReadOnly' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif ALLTRIM(HMG_UPPER(result)) == 'NIL'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , { GetRed(GetControlSysColor()) , GetGreen(GetControlSysColor()) , GetBlue(GetControlSysColor()) } )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'MAXLENGTH'
					__MVPUT( SelectedControlName + 'MaxLength' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FIELD'
					__MVPUT( SelectedControlName + 'Field' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'READONLY'
					__MVPUT( SelectedControlName + 'ReadOnly' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'PROGRESSBAR'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Value' , Result )

						__MVPUBLIC ( Result + 'RangeMin' )
						__MVPUT( Result + 'RangeMin' ,  __MVGET ( PreviousValue + 'RangeMin' ) )
						__MVXRELEASE( PreviousValue + 'RangeMin' )

						__MVPUBLIC ( Result + 'RangeMax' )
						__MVPUT( Result + 'RangeMax' ,  __MVGET ( PreviousValue + 'RangeMax' ) )
						__MVXRELEASE( PreviousValue + 'RangeMax' )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'BackColor' )
						__MVPUT( Result + 'BackColor' ,  __MVGET ( PreviousValue + 'BackColor' ) )
						__MVXRELEASE( PreviousValue + 'BackColor' )

						__MVPUBLIC ( Result + 'ForeColor' )
						__MVPUT( Result + 'ForeColor' ,  __MVGET ( PreviousValue + 'ForeColor' ) )
						__MVXRELEASE( PreviousValue + 'ForeColor' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'Smooth' )
						__MVPUT( Result + 'Smooth' ,  __MVGET ( PreviousValue + 'Smooth' ) )
						__MVXRELEASE( PreviousValue + 'Smooth' )

						__MVPUBLIC ( Result + 'Orientation' )
						__MVPUT( Result + 'Orientation' ,  __MVGET ( PreviousValue + 'Orientation' ) )
						__MVXRELEASE( PreviousValue + 'Orientation' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'RANGEMAX'
					__MVPUT( SelectedControlName + 'RangeMax' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'RANGEMIN'
					__MVPUT( SelectedControlName + 'RangeMin' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'BACKCOLOR'
					__MVPUT( SelectedControlName + 'BackColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'BackColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 14 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FORECOLOR'
					__MVPUT( SelectedControlName + 'ForeColor' , Result )
					if HB_ULEFT(ALLTRIM(result),1) == '{' .and. HB_URIGHT(ALLTRIM(result),1) == '}'
				        	SetProperty ( DesignForm , SelectedControlName , 'ForeColor' , &Result )
					elseif HMG_UPPER(ALLTRIM(result)) == 'NIL' .or. Empty(result)
						z := GetControlIndex ( SelectedControlName , DesignForm )
						_HMG_SYSDATA [ 15 ] [z] := Nil
						redrawwindow ( _HMG_SYSDATA [   3 ] [z] )
					else
						MsgStop('Invalid Color Array','HMG IDE')
					endif
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'SMOOTH'
					__MVPUT( SelectedControlName + 'Smooth' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ORIENTATION'

					If 	( HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'Orientation' ) ) ) == 'VERTICAL' ;
						.and. ;
						HMG_UPPER ( ALLTRIM ( Result ) ) == 'HORIZONTAL' )

						HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
						WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

						SetProperty ( DesignForm , SelectedControlName , 'Width' , WidthTemp )
						SetProperty ( DesignForm , SelectedControlName , 'Height' , HeightTemp )

					ElseIf 	( HMG_UPPER ( ALLTRIM ( __MVGET( SelectedControlName + 'Orientation' ) ) ) == 'HORIZONTAL' ;
						.and. ;
						HMG_UPPER ( ALLTRIM ( Result ) ) == 'VERTICAL' )

						HeightTemp := GetProperty ( DesignForm , SelectedControlName , 'Width' )
						WidthTemp := GetProperty ( DesignForm , SelectedControlName , 'Height' )

						SetProperty ( DesignForm , SelectedControlName , 'Width' , WidthTemp )
						SetProperty ( DesignForm , SelectedControlName , 'Height' , HeightTemp )

					EndIf

					__MVPUT( SelectedControlName + 'Orientation' , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'PLAYER'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Value' , Result )

						__MVPUBLIC ( Result + 'File' )
						__MVPUT( Result + 'File' ,  __MVGET ( PreviousValue + 'File' ) )
						__MVXRELEASE( PreviousValue + 'File' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						__MVPUBLIC ( Result + 'AutoSizeWindow' )
						__MVPUT( Result + 'AutoSizeWindow' ,  __MVGET ( PreviousValue + 'AutoSizeWindow' ) )
						__MVXRELEASE( PreviousValue + 'AutoSizeWindow' )

						__MVPUBLIC ( Result + 'AutoSizeMovie' )
						__MVPUT( Result + 'AutoSizeMovie' ,  __MVGET ( PreviousValue + 'AutoSizeMovie' ) )
						__MVXRELEASE( PreviousValue + 'AutoSizeMovie' )

						__MVPUBLIC ( Result + 'ErrorDlg' )
						__MVPUT( Result + 'ErrorDlg' ,  __MVGET ( PreviousValue + 'ErrorDlg' ) )
						__MVXRELEASE( PreviousValue + 'ErrorDlg' )

						__MVPUBLIC ( Result + 'Menu' )
						__MVPUT( Result + 'Menu' ,  __MVGET ( PreviousValue + 'Menu' ) )
						__MVXRELEASE( PreviousValue + 'Menu' )

						__MVPUBLIC ( Result + 'Open' )
						__MVPUT( Result + 'Open' ,  __MVGET ( PreviousValue + 'Open' ) )
						__MVXRELEASE( PreviousValue + 'Open' )

						__MVPUBLIC ( Result + 'PlayBar' )
						__MVPUT( Result + 'PlayBar' ,  __MVGET ( PreviousValue + 'PlayBar' ) )
						__MVXRELEASE( PreviousValue + 'PlayBar' )

						__MVPUBLIC ( Result + 'ShowAll' )
						__MVPUT( Result + 'ShowAll' ,  __MVGET ( PreviousValue + 'ShowAll' ) )
						__MVXRELEASE( PreviousValue + 'ShowAll' )

						__MVPUBLIC ( Result + 'ShowMode' )
						__MVPUT( Result + 'ShowMode' ,  __MVGET ( PreviousValue + 'ShowMode' ) )
						__MVXRELEASE( PreviousValue + 'ShowMode' )

						__MVPUBLIC ( Result + 'ShowName' )
						__MVPUT( Result + 'ShowName' ,  __MVGET ( PreviousValue + 'ShowName' ) )
						__MVXRELEASE( PreviousValue + 'ShowName' )

						__MVPUBLIC ( Result + 'ShowPosition' )
						__MVPUT( Result + 'ShowPosition' ,  __MVGET ( PreviousValue + 'ShowPosition' ) )
						__MVXRELEASE( PreviousValue + 'ShowPosition' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FILE'
					__MVPUT( SelectedControlName + 'File' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'AUTOSIZEWINDOW'
					__MVPUT( SelectedControlName + 'AUTOSIZEWINDOW' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'AUTOSIZEMOVIE'
					__MVPUT( SelectedControlName + 'AUTOSIZEMOVIE' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'ERRORDLG'
					__MVPUT( SelectedControlName + 'ERRORDLG' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'MENU'
					__MVPUT( SelectedControlName + 'MENU' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'OPEN'
					__MVPUT( SelectedControlName + 'OPEN' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'PLAYBAR'
					__MVPUT( SelectedControlName + 'PLAYBAR' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'SHOWALL'
					__MVPUT( SelectedControlName + 'SHOWALL' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'SHOWMODE'
					__MVPUT( SelectedControlName + 'SHOWMODE' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'SHOWNAME'
					__MVPUT( SelectedControlName + 'SHOWNAME' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'SHOWPOSITION'
					__MVPUT( SelectedControlName + 'SHOWPOSITION' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'ACTIVEX'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'ProgId' )
						__MVPUT( Result + 'ProgId' ,  __MVGET ( PreviousValue + 'ProgId' ) )
						__MVXRELEASE( PreviousValue + 'ProgId' )


						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						SetProperty ( DesignForm , SelectedControlName , 'Value' , Result )

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'PROGID'
					__MVPUT( SelectedControlName + 'PROGID' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'WINDOW'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						SetProperty ( DesignForm , SelectedControlName , 'Value' , Result )

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'IPADDRESS'
			*******************************************************

				If PropertyName == 'ROW'

					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)


				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						SetProperty ( DesignForm , SelectedControlName , 'Value' , Result )

						__MVPUBLIC ( Result + 'Value' )
						__MVPUT( Result + 'Value' ,  __MVGET ( PreviousValue + 'Value' ) )
						__MVXRELEASE( PreviousValue + 'Value' )

						__MVPUBLIC ( Result + 'FontName' )
						__MVPUT( Result + 'FontName' ,  __MVGET ( PreviousValue + 'FontName' ) )
						__MVXRELEASE( PreviousValue + 'FontName' )

						__MVPUBLIC ( Result + 'FontSize' )
						__MVPUT( Result + 'FontSize' ,  __MVGET ( PreviousValue + 'FontSize' ) )
						__MVXRELEASE( PreviousValue + 'FontSize' )

						__MVPUBLIC ( Result + 'ToolTip' )
						__MVPUT( Result + 'ToolTip' ,  __MVGET ( PreviousValue + 'ToolTip' ) )
						__MVXRELEASE( PreviousValue + 'ToolTip' )

						__MVPUBLIC ( Result + 'OnChange' )
						__MVPUT( Result + 'OnChange' ,  __MVGET ( PreviousValue + 'OnChange' ) )
						__MVXRELEASE( PreviousValue + 'OnChange' )

						__MVPUBLIC ( Result + 'OnGotFocus' )
						__MVPUT( Result + 'OnGotFocus' ,  __MVGET ( PreviousValue + 'OnGotFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnGotFocus' )

						__MVPUBLIC ( Result + 'OnLostFocus' )
						__MVPUT( Result + 'OnLostFocus' ,  __MVGET ( PreviousValue + 'OnLostFocus' ) )
						__MVXRELEASE( PreviousValue + 'OnLostFocus' )

						__MVPUBLIC ( Result + 'FontBold' )
						__MVPUT( Result + 'FontBold' ,  __MVGET ( PreviousValue + 'FontBold' ) )
						__MVXRELEASE( PreviousValue + 'FontBold' )

						__MVPUBLIC ( Result + 'FontItalic' )
						__MVPUT( Result + 'FontItalic' ,  __MVGET ( PreviousValue + 'FontItalic' ) )
						__MVXRELEASE( PreviousValue + 'FontItalic' )

						__MVPUBLIC ( Result + 'FontStrikeOut' )
						__MVPUT( Result + 'FontStrikeOut' ,  __MVGET ( PreviousValue + 'FontStrikeOut' ) )
						__MVXRELEASE( PreviousValue + 'FontStrikeOut' )

						__MVPUBLIC ( Result + 'FontUnderLine' )
						__MVPUT( Result + 'FontUnderLine' ,  __MVGET ( PreviousValue + 'FontUnderLine' ) )
						__MVXRELEASE( PreviousValue + 'FontUnderLine' )

						__MVPUBLIC ( Result + 'TabStop' )
						__MVPUT( Result + 'TabStop' ,  __MVGET ( PreviousValue + 'TabStop' ) )
						__MVXRELEASE( PreviousValue + 'TabStop' )

						__MVPUBLIC ( Result + 'Visible' )
						__MVPUT( Result + 'Visible' ,  __MVGET ( PreviousValue + 'Visible' ) )
						__MVXRELEASE( PreviousValue + 'Visible' )

						__MVPUBLIC ( Result + 'HelpId' )
						__MVPUT( Result + 'HelpId' ,  __MVGET ( PreviousValue + 'HelpId' ) )
						__MVXRELEASE( PreviousValue + 'HelpId' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				ElseIf PropertyName == 'COL'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'WIDTH'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HEIGHT'
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VALUE'
					__MVPUT( SelectedControlName + 'Value' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTNAME'
					__MVPUT( SelectedControlName + 'FontName' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , Result )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSIZE'
					__MVPUT( SelectedControlName + 'FontSize' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , VAL ( Result ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TOOLTIP'
					__MVPUT( SelectedControlName + 'ToolTip' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTBOLD'
					__MVPUT( SelectedControlName + 'FontBold' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTITALIC'
					__MVPUT( SelectedControlName + 'FontItalic' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTUNDERLINE'
					__MVPUT( SelectedControlName + 'FontUnderLine' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'FONTSTRIKEOUT'
					__MVPUT( SelectedControlName + 'FontStrikeout' , Result )
					SetProperty ( DesignForm , SelectedControlName , PropertyName , if ( HMG_UPPER(ALLTRIM(Result)) == '.T.' , .T. , .F. ) )
					RedrawWindow (DesignForm)
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'VISIBLE'
					__MVPUT( SelectedControlName + 'Visible' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'TABSTOP'
					__MVPUT( SelectedControlName + 'TabStop' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'HELPID'
					__MVPUT( SelectedControlName + 'HelpId' , Result )
					SelectControl (SelectedControlName)

				EndIf

			*******************************************************
			ElseIf	SelectedControlType == 'TIMER'
			*******************************************************

				If PropertyName == 'INTERVAL'
					__MVPUT( SelectedControlName + 'Interval' , Result )
					SelectControl (SelectedControlName)

				ElseIf PropertyName == 'NAME'

					x := GetControlIndex ( SelectedControlName , DesignForm )
					if x > 0

						If ALLTRIM(HMG_UPPER(PreviousValue)) == ALLTRIM(HMG_UPPER(Result))
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						If !IsControNameValid ( Result )
							MsgStop('Control Name Duplicated or Invalid','HMG IDE')
							RedrawWindow (DesignForm)
							SelectControl (SelectedControlName)
							Return
						EndIf

						__MVPUBLIC ( Result + 'Interval' )
						__MVPUT( Result + 'Interval' ,  __MVGET ( PreviousValue + 'Interval' ) )
						__MVXRELEASE( PreviousValue + 'Interval' )

						__MVPUBLIC ( Result + 'Action' )
						__MVPUT( Result + 'Action' ,  __MVGET ( PreviousValue + 'Action' ) )
						__MVXRELEASE( PreviousValue + 'Action' )

						_HMG_SYSDATA [   2 ] [x] := Result

						__MVPUBLIC ( '_' + DesignForm + '_' + Result )
						__MVPUT( '_' + DesignForm + '_' + Result , x )

						__MVPUT( '_' + DesignForm + '_' + SelectedControlName , 0 )

						SelectedControlName := Result

						RedrawWindow (DesignForm)
						SelectControl (SelectedControlName)

					EndIf

				EndIf

			EndIf

		Else

			*-.*.-*.-*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.*-.

			Properties.Grid_1.Item (i) := { aRow [1] , Result }

			if ALLTRIM( HMG_UPPER (aRow [1]) ) == 'TITLE'
				SetProperty ( DesignForm , aRow [1] , Result )


			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'VIRTUAL SIZED'

				If ALLTRIM( (HMG_UPPER ( Result) ) ) == '.T.'
					SetPropertyVirtualOn()
				elseIf ALLTRIM( (HMG_UPPER ( Result) ) ) == '.F.'
					SetPropertyVirtualOff()
				endif

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'VIRTUAL WIDTH'

				if VAL(Result) <= GetProperty( DesignForm , 'Width' )
					Properties.Grid_1.Item (i) := { aRow [1] , PreviousValue }
					MsgStop( 'Invalid Value' , 'ERROR' )
					Return
				else
					__MVPUT ( DesignForm + 'VirtualWidth' , Result )
					SetScrollRange ( DesignFormhandle , SB_HORZ , 0 , VAL(Result) - GetProperty( DesignForm , 'Width' ) , 1 )
				endif

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'VIRTUAL HEIGHT'

				if VAL(Result) <= GetProperty( DesignForm , 'Height' )
					Properties.Grid_1.Item (i) := { aRow [1] , PreviousValue }
					MsgStop( 'Invalid Value' , 'ERROR' )
					Return
				else
					__MVPUT ( DesignForm + 'VirtualHeight' , Result )
					SetScrollRange ( DesignFormhandle , SB_VERT , 0 , VAL(Result) - GetProperty( DesignForm , 'Height' ) , 1 )
				endif

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'WINDOWTYPE'
				__MVPUT ( DesignForm + 'WindowType' , Result )
				UpdateDesignFormProperties()

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'HELPBUTTON'
				__MVPUT ( DesignForm + 'HelpButton' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'BACKCOLOR'
				__MVPUT ( DesignForm + 'BackColor' , Result )

				If ALLTRIM(HMG_UPPER(Result)) <> 'NIL'

					SetWindowBackColor ( DesignFormHandle , &Result )

				Else

					nTemp := GetWindowSysColor()
					aTemp := { GetRed(nTemp) , GetGreen(nTemp) , GetBlue(nTemp) }

					SetWindowBackColor ( DesignFormHandle , aTemp )

				EndIf

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'NOTIFYICON'
				__MVPUT ( DesignForm + 'NotifyIcon' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'NOTIFYTOOLTIP'
				__MVPUT ( DesignForm + 'NotifyToolTip' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'CURSOR'
				__MVPUT ( DesignForm + 'Cursor' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'ICON'
				__MVPUT ( DesignForm + 'Icon' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'VISIBLE'
				__MVPUT ( DesignForm + 'Visible' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'TOPMOST'
				__MVPUT ( DesignForm + 'Topmost' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'AUTORELEASE'
				__MVPUT ( DesignForm + 'AutoRelease' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'MAXBUTTON'
				__MVPUT ( DesignForm + 'MaxButton' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'MINBUTTON'
				__MVPUT ( DesignForm + 'MinButton' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'SIZABLE'
				__MVPUT ( DesignForm + 'Sizable' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'SYSMENU'
				__MVPUT ( DesignForm + 'SysMenu' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'TITLEBAR'
				__MVPUT ( DesignForm + 'TitleBar' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'BREAK'
				__MVPUT ( DesignForm + 'Break' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'FOCUSED'
				__MVPUT ( DesignForm + 'Focused' , Result )

			Elseif ALLTRIM( HMG_UPPER (aRow [1]) ) == 'GRIPPERTEXT'
				__MVPUT ( DesignForm + 'GripperText' , Result )

			Else

				SetProperty ( DesignForm , aRow [1] , VAL ( Result ) )

			EndIf

                        RedrawWindow (DesignForm)
			SelectControl (SelectedControlName)

		EndIf

		Properties.Grid_1.Value := i
		Properties.Grid_1.SetFocus

	Else

		if ! Empty ( SelectedControlName )
			SelectControl (SelectedControlName)
		EndIf

		Properties.Grid_1.Value := i
		Properties.Grid_1.SetFocus

	EndIf

	DoMethod ( DesignForm , 'SetFocus' )

Return

*------------------------------------------------------------------------------*
Procedure _Open( Arg )
*------------------------------------------------------------------------------*
LOCAL Line, NextToken, cUserPropertyName, cUserPropertyValue
LOCAL CurrentRowSource, CurrentColumnFields, CurrentAllowDelete, CurrentBuffered, CurrentDynamicDisplay, CurrentWhen
LOCAL CurrentDynamicBackColor, CurrentDynamicForeColor, CurrentColumnWhen, CurrentColumnValid, CurrentColumnControls
LOCAL CurrentUpperCase, CurrentLowerCase, CurrentVertical, CurrentPictAlignment, CurrentCenterAlign, CurrentTransparent
LOCAL CurrentOnGotFocus, CurrentOnLostFocus, WinRow, WinCol, VirtualWidth, VirtualHeight
Local LineBuffer , Width , Height , char , Row , Col , Started , c , z , a , ControlType, x , FileName , Code , LineCount , i , w , b
Local CurrentRow
Local CurrentCol
Local CurrentWidth
Local CurrentHeight
Local CurrentCaption
Local CurrentAction
Local TimersLoaded := 0
Local TabPageCount := 0
Local CurrentItems
Local CurrentRangeMax
Local CurrentRangeMin
Local CurrentPicture
Local CurrentValue
Local CurrentWorkArea
Local CurrentFields
Local CurrentHeaders
Local CurrentWidths
Local CurrentOptions
Local CurrentCaptions
Local CurrentFile
Local CurrentAddress
Local Interval
Local aTemp
Local Value
Local Title
Local WindowType
Local CurrentFontName := 'Arial'
Local CurrentFontSize := 9
Local Fontname
Local FontSize
Local CurrentToolTip
Local CurrentOnChange
Local ToolTip
Local OnChange
Local OnGotFocus
Local OnLostFocus
Local CurrentInputmask
Local CurrentFormat
Local CurrentNumeric
Local CurrentDate
Local QuoteFlag
Local CurrentFontBold
Local CurrentFontItalic
Local CurrentFontUnderLine
Local CurrentFontStrikeout
Local CurrentHelpId
Local CurrentFlat
Local CurrentTabStop
Local CurrentVisible
Local CurrentField
Local CurrentBackColor
Local CurrentFontColor
Local CurrentOnDblClick
Local CurrentOnSave
Local CurrentSort
Local CurrentMultiSelect
Local CurrentOnEnter
Local CurrentOnDisplayChange
Local CurrentDisplayEdit
Local CurrentItemSource
Local CurrentValueSource
Local CurrentOnHeadClick
Local CurrentOnQueryData
Local CurrentAllowEdit
Local CurrentVirtual
Local CurrentLines
Local CurrentImage
Local CurrentJustify
Local CurrentItemCount
Local CurrentBoth
Local CurrentTop
Local CurrentLeft
Local CurrentNoTicks
Local CurrentWrap
Local CurrentReadOnly
Local CurrentIncrement
Local CurrentStretch
Local CurrentUpDown
Local CurrentShowNone
Local CurrentRightAlign
Local CurrentMaxLength
Local CurrentPassword
Local CurrentAutoSize
Local OnDblClick
Local NodeImages
Local ItemImages
Local HelpId
Local CurrentAllowAppend
Local CurrentreadOnlyFields
Local CurrentValid
Local CurrentValidMessages
Local CurrentLock
Local CurrentvScrollBar
Local CurrentSpacing
Local CurrentOpaque
Local CurrentMediaProp
Local CurrentSmooth
Local CurrentToday
Local CurrentTodayCircle
Local CurrentMultiLine
Local CurrentWeekNumbers
Local CurrentHandCursor
Local CurrentAutoPlay
Local CurrentCenter
Local ClauseArgument
Local Icon
Local CurrentMenuLevel := 0
Local _hmgide_MainMenuProcessing := .F.
Local _hmgide_ContextMenuProcessing := .F.
Local _hmgide_StatusBarProcessing := .F.
Local _hmgide_ToolBarProcessing := .F.
Local _hmgide_NotifyMenuProcessing := .F.
Local _hmgide_DropDownMenuProcessing := .F.
Local _hmgide_SplitBoxProcessing := .F.
Local CurrentPageImages
Local CurrentTabName
local _hmgide_CurrentDropDownMenu := ''
local CURRENTHSCROLLBAR
Local CurrentShowHeaders
Local cTmpName
local CurrentHorizontal
Local CurrentProgId

Local CurrentInputItems
Local CurrentDisplayItems

Local CurrentDroppedWidth
Local CurrentOnDropDown
Local CurrentOnCloseUp

Local CurrentHeaderImages
Local t
Local lUserControlActive := .F.
Local cUserControlName := ''
Local cCurrentComponentType := ''
Local nCurrentComponentSubType := 0
Local CurrentDragItems
Local CurrentCellNavigation := .F.

Local CurrentDisabledBackColor
Local CurrentDisabledFontColor

Local xWidth
Local xHeight

Local CurrentLockColumns

Private Name
Private MacroVar

_hmgide_CurrentMainMenu := ''
_hmgide_CurrentContextMenu := ''
_hmgide_CurrentNotifyMenu := ''
_hmgide_CurrentStatusBar := ''
_hmgide_CurrentToolBar := ''
_hmgide_CurrentToolBar := ''
_hmgide_aDropDownMenus := {}
_hmgide_CurrentSplitBox := ''

*	1: CHECKBUTTON
*	2: PROGRESSBAR
*	3: PLAYER
*	4: IPADDRESS
*	5: TIMER
*	6: HYPERLINK
*	7: ACTIVEX

	InitControlCounters()

	*msginfo(arg)

	CurrentControl := 1
	SelectedControlName := ''
	SelectedControlIndex := 0

	If VALTYPE ( Arg ) == 'C'
		FileName := Arg
	Else
		FileName := Getfile ( { {'HMG Forms','*.fmg'} } , 'Open File' , , .f. , .f. )
	EndIf

	If Empty (FileName)
		Return
	Endif

	Code := HB_MEMOREAD ( FileName )

	LineCount := MlCount (Code)

	LineBuffer := ''

	loading.progress_1.rangemax := LineCount
	loading.show

	For i := 1 To LineCount

		Line := ALLTRIM ( MemoLine ( Code , 1024 , i , 4 , .t. ) )

		loading.progress_1.value := i

		* Join Splitted Lines

		if HB_URIGHT ( Line , 1 ) == ';'

			Line := HB_ULEFT ( Line , HMG_LEN ( Line ) - 1 ) + ' '

			LineBuffer := LineBuffer + Line
			Loop

		Else

			if ! Empty ( LineBuffer )

				Line := LineBuffer + Line
				LineBuffer := ''

			EndIf

		Endif

		*

		Line := RemoveExtraSpaces (Line)



		// PROCESS USER COMPONENTS


		If lUserControlActive == .F.

			For t := 1 To HMG_LEN (aComponentNames)

				If HMG_UPPER( Line ) = 'DEFINE ' + ALLTRIM(HMG_UPPER(aComponentNames[t])) + ' '

					cUserControlName := ALLTRIM ( HB_USUBSTR ( Line , HB_UTF8RAT ( ' ' , Line ) , 128 ) )

					cCurrentComponentType := ALLTRIM(HMG_UPPER(aComponentNames[t]))

					nCurrentComponentSubType := t

					lUserControlActive := .T.

					Exit

				EndIf

			Next t

			If lUserControlActive == .T.

				Loop

			EndIf

		Else

			If HMG_UPPER (Line) = 'ROW'
				CurrentRow := VAL ( HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

			ElseIf HMG_UPPER (Line) = 'COL'
				CurrentCol := VAL ( HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

			ElseIf HMG_UPPER ( HB_ULEFT ( Line , 6 ) ) == 'WIDTH '
				CurrentWidth := VAL ( HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

			ElseIf HMG_UPPER (Line) = 'HEIGHT'
				CurrentHeight := VAL ( HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

			ElseIf HMG_UPPER( Line ) = 'END ' + ALLTRIM(HMG_UPPER(cCurrentComponentType))

				@ CurrentRow , CurrentCol LABEL &cUserControlName ;
					OF &DesignForm ;
					VALUE cUserControlName ACTION SelectControl (This.Name) ;
					WIDTH CurrentWidth HEIGHT CurrentHeight ;
					FONT 'ARIAL' SIZE 9 ;
					BORDER

				_HMG_SYSDATA [ 39 ] [ GetControlIndex ( cUserControlName , DesignForm ) ] := 10 + nCurrentComponentSubType

				lUserControlActive		:= .F.
				cCurrentComponentType		:= ''
				cUserControlName		:= ''
				nCurrentComponentSubType	:= 0

				Loop

			Else

				cUserPropertyName := ALLTRIM ( HB_ULEFT ( Line , HB_UAT ( ' ' , Line ) ) )
				cUserPropertyValue := ALLTRIM ( HB_USUBSTR ( Line , HB_UTF8RAT ( ' ' , Line ) , 128 ) )

				__MVPUBLIC ( cUserControlName + cUserPropertyName )

				__MVPUT ( cUserControlName + cUserPropertyName , cUserPropertyValue )

			EndIf

		EndIf

		//


		// DEFINE COMMAND

		If	HMG_UPPER (Line) = 'DEFINE MAIN MENU'

			_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Line + CRLF
			CurrentMenuLevel := 1

			_hmgide_MainMenuProcessing	:= .T.
			_hmgide_ContextMenuProcessing	:= .F.
			_hmgide_NotifyMenuProcessing	:= .F.
			_hmgide_DropDownMenuProcessing	:= .F.

		ElseIf	HMG_UPPER (Line) = 'DEFINE TOOLBAR'

			if _hmgide_SplitBoxProcessing == .T.
				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

				cTmpName := ALLTRIM ( HB_USUBSTR ( Line , 16 , 255 ) )
				cTmpName := ALLTRIM ( HB_ULEFT ( cTmpName , HB_UAT( ' ' , cTmpName ) ) )

				__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' )
				__MVPUT ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' , Space (8) + Line + CRLF )

			else
				_hmgide_CurrentToolBar := _hmgide_CurrentToolBar + Space(4) + Line + CRLF
			endif

			_hmgide_ToolBarProcessing := .T.

		ElseIf	HMG_UPPER (Line) = 'BUTTON '

			if _hmgide_ToolBarProcessing == .T.

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + Line + CRLF
					__MVPUT ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' , __MVGET ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' ) + Space (12) + Line + CRLF )
				else
					_hmgide_CurrentToolBar := _hmgide_CurrentToolBar + Space(8) + Line + CRLF
				EndIf

			EndIf

		ElseIf	HMG_UPPER (Line) = 'END TOOLBAR'

			if _hmgide_ToolBarProcessing == .T.
				_hmgide_ToolBarProcessing := .F.

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF
					__MVPUT ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' , __MVGET ( HMG_UPPER ( ALLTRIM ( cTmpName ) ) + 'SpxToolBar' ) + Space (8) + Line + CRLF )
				else
					_hmgide_CurrentToolBar := _hmgide_CurrentToolBar + Space(4) + Line + CRLF
				endif

				CurrentMenuLevel := 0
			endif

		ElseIf	HMG_UPPER (Line) = 'DEFINE CONTEXT MENU'

			_hmgide_CurrentContextMenu := _hmgide_CurrentContextMenu + Space(4) + Line + CRLF

			_hmgide_ContextMenuProcessing	:= .T.
			_hmgide_MainMenuProcessing	:= .F.
			_hmgide_NotifyMenuProcessing	:= .F.
			_hmgide_DropDownMenuProcessing	:= .F.

		ElseIf	HMG_UPPER (Line) = 'DEFINE NOTIFY MENU'

			_hmgide_CurrentNotifyMenu := _hmgide_CurrentNotifyMenu + Space(4) + Line + CRLF

			_hmgide_NotifyMenuProcessing	:= .T.
			_hmgide_ContextMenuProcessing	:= .F.
			_hmgide_MainMenuProcessing	:= .F.
			_hmgide_DropDownMenuProcessing	:= .F.

		ElseIf	HMG_UPPER (Line) = 'DEFINE DROPDOWN MENU'

			_hmgide_CurrentDropDownMenu := ''

			_hmgide_CurrentDropDownMenu := _hmgide_CurrentDropDownMenu + Space(4) + Line + CRLF

			_hmgide_DropDownMenuProcessing	:= .T.
			_hmgide_NotifyMenuProcessing	:= .F.
			_hmgide_ContextMenuProcessing	:= .F.
			_hmgide_MainMenuProcessing	:= .F.

		ElseIf	HMG_UPPER (Line) = 'END MENU'

			if _hmgide_MainMenuProcessing == .T.
				_hmgide_MainMenuProcessing := .F.
				_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Line + CRLF
				CurrentMenuLevel := 0
			endif

			if _hmgide_ContextMenuProcessing == .T.
				_hmgide_ContextMenuProcessing := .F.
				_hmgide_CurrentContextMenu := _hmgide_CurrentContextMenu + Space(4) + Line + CRLF
				CurrentMenuLevel := 0
			endif

			if _hmgide_NotifyMenuProcessing == .T.
				_hmgide_NotifyMenuProcessing := .F.
				_hmgide_CurrentNotifyMenu := _hmgide_CurrentNotifyMenu + Space(4) + Line + CRLF
				CurrentMenuLevel := 0
			endif

			if _hmgide_DropDownMenuProcessing == .T.
				_hmgide_DropDownMenuProcessing := .F.
				_hmgide_CurrentDropDownMenu := _hmgide_CurrentDropDownMenu + Space(4) + Line + CRLF
				CurrentMenuLevel := 0
				aadd ( _hmgide_aDropDownMenus , _hmgide_CurrentDropDownMenu )
			endif

		ElseIf	HMG_UPPER (Line) = 'DEFINE POPUP '

			_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Space(CurrentMenuLevel*4) + Line + CRLF
			CurrentMenuLevel++

		ElseIf	HMG_UPPER (Line) = 'MENUITEM '

			if _hmgide_MainMenuProcessing == .T.
				_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Space(CurrentMenuLevel*4) + Line + CRLF
			EndIf

			if _hmgide_ContextMenuProcessing == .T.
				_hmgide_CurrentContextMenu := _hmgide_CurrentContextMenu + Space(8) + Line + CRLF
			EndIf

			if _hmgide_NotifyMenuProcessing == .T.
				_hmgide_CurrentNotifyMenu := _hmgide_CurrentNotifyMenu + Space(8) + Line + CRLF
			EndIf

			if _hmgide_DropDownMenuProcessing == .T.
				_hmgide_CurrentDropDownMenu := _hmgide_CurrentDropDownMenu + Space(8) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'SEPARATOR'

			if _hmgide_MainMenuProcessing == .T.
				_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Space(CurrentMenuLevel*4) + Line + CRLF
			endif

			if _hmgide_ContextMenuProcessing == .T.
				_hmgide_CurrentContextMenu := _hmgide_CurrentContextMenu + Space(4) + Line + CRLF
			EndIf

			if _hmgide_NotifyMenuProcessing == .T.
				_hmgide_CurrentNotifyMenu := _hmgide_CurrentNotifyMenu + Space(4) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'END POPUP'

			CurrentMenuLevel--
			_hmgide_CurrentMainMenu := _hmgide_CurrentMainMenu + Space(4) + Space(CurrentMenuLevel*4) + Line + CRLF

		ElseIf	HMG_UPPER (Line) = 'DEFINE STATUSBAR'

			_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(4) + Line + CRLF

			_hmgide_StatusBarProcessing := .T.

		ElseIf	HMG_UPPER (Line) = 'STATUSITEM '

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(8) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'CLOCK'

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(8) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'DATE'

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(8) + Line + CRLF
			EndIf

			If	ControlType == 'TEXTBOX'

				CurrentDate := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if ALLTRIM(HMG_UPPER(CurrentDate)) == '.T.'
					__MVPUT( Name + 'DataType' , 'DATE' )
				endif

			EndIf

		ElseIf	HMG_UPPER (Line) = 'KEYBOARD'

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(8) + Line + CRLF
			EndIf

		ElseIf	HMG_UPPER (Line) = 'END STATUSBAR'

			if _hmgide_StatusBarProcessing == .T.
				_hmgide_CurrentStatusBar := _hmgide_CurrentStatusBar + Space(4) + Line + CRLF
				_hmgide_StatusBarProcessing := .F.
			EndIf

		ElseIf	HMG_UPPER (Line) = 'DEFINE SPLITBOX'

			_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(4) + Line + CRLF

			_hmgide_SplitBoxProcessing := .T.

		ElseIf	HMG_UPPER (Line) = 'LOAD WINDOW'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				ControlType := 'WINDOW'

				* Determine Name

				Name := ''
				Started := .F.

				For z := 13 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Name := Name + Char
					EndIf
				Next z

				* Determine Row

				Row := ''
				a := HB_UAT ( " AT " , HMG_UPPER (Line) )

				if a > 0

					Started := .F.

					For z := a + 4 To HMG_LEN ( Line )
						char := HB_USUBSTR ( Line , z , 1 )
						if char == ' '
							if Started
								Exit
							EndIf
						Else
							if ! Started
								Started := .T.
							EndIf
							Row := Row + Char
						EndIf
					Next z

				EndIf

				* Determine Col

				Col := ''
				a := HB_UAT ( " , " , HMG_UPPER (Line) )

				if a > 0

					Started := .F.

					For z := a + 3 To HMG_LEN ( Line )
						char := HB_USUBSTR ( Line , z , 1 )
						if char == ' '
							if Started
								Exit
							EndIf
						Else
							if ! Started
								Started := .T.
							EndIf
							Col := Col + Char
						EndIf
					Next z

				EndIf

				* Determine Width

				xWidth := ''
				a := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

				if a > 0

					Started := .F.

					For z := a + 7 To HMG_LEN ( Line )
						char := HB_USUBSTR ( Line , z , 1 )
						if char == ' '
							if Started
								Exit
							EndIf
						Else
							if ! Started
								Started := .T.
							EndIf
							xWidth := xWidth + Char
						EndIf
					Next z

				EndIf

				* Determine Height

				xHeight := ''
				a := HB_UAT ( " HEIGHT " , HMG_UPPER (Line) )

				if a > 0
					xHeight := HB_USUBSTR ( Line , a + 7 , 255 )
				Else
					xHeight := ''
				EndIf


				@ VAL(Row)  , VAL(Col) LABEL &Name ;
					OF &DesignForm ;
					VALUE Name ACTION SelectControl (This.Name) ;
					WIDTH VAL(xWidth) HEIGHT VAL(xHeight) ;
					BORDER

				w := GetControlIndex ( Name , DesignForm )
				_HMG_SYSDATA [ 39 ] [w] := 8

				CurrentWidth	:= -1
				CurrentHeight	:= -1

			endif


		ElseIf	HMG_UPPER (Line) = 'END SPLITBOX'

			_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(4) + Line + CRLF

			_hmgide_SplitBoxProcessing := .F.

		ElseIf	HMG_UPPER (Line) = 'DEFINE BUTTON'
			ControlType := 'BUTTON'
			Name := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )

			__MVPUBLIC ( Name + 'Caption' )
			__MVPUT( Name + 'Caption' , Name )
			__MVPUBLIC ( Name + 'Action' )
			__MVPUT( Name + 'Action' , 'Nil' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'Flat' )
			__MVPUT( Name + 'Flat' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'Picture' )
			__MVPUT( Name + 'Picture' , '' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'PictAlignment' )
			__MVPUT( Name + 'PictAlignment' , 'TOP' )
			__MVPUBLIC ( Name + 'MultiLine' )
			__MVPUT( Name + 'MultiLine' , '.F.' )


			DEFINE BUTTON &Name
			PARENT &DesignForm
			ON GOTFOCUS SelectControl( This.Name )
		ElseIf	HMG_UPPER (Line) = 'DEFINE CHECKBOX'
			ControlType := 'CHECKBOX'
			Name := HB_USUBSTR ( Line , 17 , HMG_LEN (Line) - 16 )
			DEFINE CHECKBOX &Name
			PARENT &DesignForm
			ONCHANGE SelectControl (This.Name)

			__MVPUBLIC ( Name + 'Caption' )
			__MVPUT( Name + 'Caption' , Name )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '.F.' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE LISTBOX'
			ControlType := 'LISTBOX'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE LISTBOX &Name
				PARENT &DesignForm
				ITEMS { Name }
				ON GOTFOCUS SelectControl ( This.Name )

			endif

			__MVPUBLIC ( Name + 'Items' )
			__MVPUT( Name + 'Items' , '{""}' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )
			__MVPUBLIC ( Name + 'OnDblClick' )
			__MVPUT( Name + 'OnDblClick' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Sort' )
			__MVPUT( Name + 'Sort' , '.F.' )
			__MVPUBLIC ( Name + 'MultiSelect' )
 			__MVPUT( Name + 'MultiSelect' , '.F.' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )
			__MVPUBLIC ( Name + 'DragItems' )
			__MVPUT( Name + 'DragItems' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE COMBOBOX'
			ControlType := 'COMBOBOX'
			Name := HB_USUBSTR ( Line , 17 , HMG_LEN (Line) - 16 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE COMBOBOX &Name
				PARENT &DesignForm
				ITEMS { Name }
				VALUE 1
				ONGOTFOCUS SelectControl ( This.Name )

			endif

			__MVPUBLIC ( Name + 'Items' )
			__MVPUT( Name + 'Items' , '{""}' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Sort' )
			__MVPUT( Name + 'Sort' , '.F.' )
			__MVPUBLIC ( Name + 'OnEnter' )
			__MVPUT( Name + 'OnEnter' , 'Nil' )
			__MVPUBLIC ( Name + 'OnDisplayChange' )
			__MVPUT( Name + 'OnDisplayChange' , 'Nil' )
			__MVPUBLIC ( Name + 'DisplayEdit' )
			__MVPUT( Name + 'DisplayEdit' , '.F.' )
			__MVPUBLIC ( Name + 'ValueSource' )
			__MVPUT( Name + 'ValueSource' , '' )
			__MVPUBLIC ( Name + 'ItemSource' )
			__MVPUT( Name + 'ItemSource' , 'Nil' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )

			__MVPUBLIC ( Name + 'DroppedWidth' )
			__MVPUT( Name + 'DroppedWidth' , 'Nil' )
			__MVPUBLIC ( Name + 'Image' )
			__MVPUT( Name + 'Image' , 'Nil' )
			__MVPUBLIC ( Name + 'OnDropDown' )
			__MVPUT( Name + 'OnDropDown' , 'Nil' )
			__MVPUBLIC ( Name + 'OnCloseUp' )
			__MVPUT( Name + 'OnCloseUp' , 'Nil' )


		ElseIf	HMG_UPPER (Line) = 'DEFINE CHECKBUTTON'
			ControlType := 'CHECKBUTTON'
			Name := HB_USUBSTR ( Line , 20 , HMG_LEN (Line) - 19 )
			DEFINE CHECKBUTTON &Name
			PARENT &DesignForm
			ONCHANGE SelectControl (This.name)
			CAPTION Name

			__MVPUBLIC ( Name + 'Caption' )
			__MVPUT( Name + 'Caption' , Name )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '.F.' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Picture' )
			__MVPUT( Name + 'Picture' , '' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE GRID'
			ControlType := 'GRID'
			Name := HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE GRID &Name
				PARENT &DesignForm
				ONGOTFOCUS SelectControl(This.name)
				HEADERS { '' , '' , '' }
				WIDTHS { 90 , 90 , 90 }
				ITEMS { { Name , '' , '' } }

			endif

			__MVPUBLIC ( Name + 'Items' )
			__MVPUT( Name + 'Items' , '{""}' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'Widths' )
			__MVPUT( Name + 'Widths' , '{}' )
			__MVPUBLIC ( Name + 'Headers' )
			__MVPUT( Name + 'Headers' , '{}' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'OnDblClick' )
			__MVPUT( Name + 'OnDblClick' , 'Nil' )
			__MVPUBLIC ( Name + 'OnHeadClick' )
			__MVPUT( Name + 'OnHeadClick' , 'Nil' )
			__MVPUBLIC ( Name + 'OnQueryData' )
			__MVPUT( Name + 'OnQueryData' , 'Nil' )
			__MVPUBLIC ( Name + 'MultiSelect' )
			__MVPUT( Name + 'MultiSelect' , '.F.' )
			__MVPUBLIC ( Name + 'AllowEdit' )
			__MVPUT( Name + 'AllowEdit' , '.F.' )
			__MVPUBLIC ( Name + 'Virtual' )
			__MVPUT( Name + 'Virtual' , '.F.' )
			__MVPUBLIC ( Name + 'Lines' )
			__MVPUT( Name + 'Lines' , '.T.' )
			__MVPUBLIC ( Name + 'Image' )
			__MVPUT( Name + 'Image' , 'Nil' )
			__MVPUBLIC ( Name + 'Justify' )
			__MVPUT( Name + 'Justify' , 'Nil' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'ItemCount' )
			__MVPUT( Name + 'ItemCount' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )

			__MVPUBLIC ( Name + 'DynamicBackColor' )
			__MVPUT( Name + 'DynamicBackColor' , 'Nil' )

			__MVPUBLIC ( Name + 'DynamicForeColor' )
			__MVPUT( Name + 'DynamicForeColor' , 'Nil' )

			__MVPUBLIC ( Name + 'ColumnWhen' )
			__MVPUT( Name + 'ColumnWhen' , 'Nil' )

			__MVPUBLIC ( Name + 'ColumnValid' )
			__MVPUT( Name + 'ColumnValid' , 'Nil' )

			__MVPUBLIC ( Name + 'ColumnControls' )
			__MVPUT( Name + 'ColumnControls' , 'Nil' )

			__MVPUBLIC ( Name + 'ShowHeaders' )
			__MVPUT( Name + 'ShowHeaders' , '.T.' )

			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )

			__MVPUBLIC ( Name + 'HeaderImages' )
			__MVPUT( Name + 'HeaderImages' , 'Nil' )

			__MVPUBLIC ( Name + 'CellNavigation' )
			__MVPUT( Name + 'CellNavigation' , '.F.' )



			__MVPUBLIC ( Name + 'RowSource' )
			__MVPUT( Name + 'RowSource' , 'Nil' )

			__MVPUBLIC ( Name + 'ColumnFields' )
			__MVPUT( Name + 'ColumnFields' , 'Nil' )

			__MVPUBLIC ( Name + 'AllowAppend' )
			__MVPUT( Name + 'AllowAppend' , '.F.' )

			__MVPUBLIC ( Name + 'AllowDelete' )
			__MVPUT( Name + 'AllowDelete' , '.F.' )

			__MVPUBLIC ( Name + 'Buffered' )
			__MVPUT( Name + 'Buffered' , '.F.' )

			__MVPUBLIC ( Name + 'DynamicDisplay' )
			__MVPUT( Name + 'DynamicDisplay' , '.F.' )

			__MVPUBLIC ( Name + 'OnSave' )
			__MVPUT( Name + 'OnSave' , 'Nil' )

			__MVPUBLIC ( Name + 'LockColumns' )
			__MVPUT( Name + 'LockColumns' , 'Nil' )



		ElseIf	HMG_UPPER (Line) = 'DEFINE SLIDER'
			ControlType := 'SLIDER'
			Name := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )
			DEFINE SLIDER &Name
			PARENT &DesignForm
			ONCHANGE SelectControl (This.Name)
			RANGEMIN 1
			RANGEMAX 10

			__MVPUBLIC ( Name + 'RangeMax' )
			__MVPUT( Name + 'RangeMax' , '1' )
			__MVPUBLIC ( Name + 'RangeMin' )
			__MVPUT( Name + 'RangeMin' , '10' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'TickMarks' )
			__MVPUT( Name + 'TickMarks' , 'BOTTOM' )
			__MVPUBLIC ( Name + 'Orientation' )
			__MVPUT( Name + 'Orientation' , 'HORIZONTAL' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE SPINNER'
			ControlType := 'SPINNER'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )
			DEFINE SPINNER &Name
			PARENT &DesignForm
			VALUE 5
			RANGEMIN 1
			RANGEMAX 10
			ONGOTFOCUS SelectControl (This.Name)

			__MVPUBLIC ( Name + 'RangeMax' )
			__MVPUT( Name + 'RangeMax' , '1' )
			__MVPUBLIC ( Name + 'RangeMin' )
			__MVPUT( Name + 'RangeMin' , '10' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )
			__MVPUBLIC ( Name + 'Wrap' )
			__MVPUT( Name + 'Wrap' , '.F.' )
			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , '.F.' )

			__MVPUBLIC ( Name + 'Increment' )
			__MVPUT( Name + 'Increment' , '1' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE IMAGE'
			ControlType := 'IMAGE'
			Name := HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 )
			DEFINE IMAGE &Name
			PARENT &DesignForm
			ACTION SelectControl (This.name)
			PICTURE 'demo'
			STRETCH .T.

			__MVPUBLIC ( Name + 'Picture' )
			__MVPUT( Name + 'Picture' , '' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Stretch' )
			__MVPUT( Name + 'Stretch' , '.F.' )
			__MVPUBLIC ( Name + 'Action' )
			__MVPUT( Name + 'Action' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE TREE'
			ControlType := 'TREE'

			* Determine Name

			Name := ''
			Started := .F.

			For z := 13 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Name := Name + Char
				EndIf
			Next z

			* Determine Row & Col

			a := HB_UAT ( " AT " , HMG_UPPER (Line) )
			c := HB_UAT ( "," , HMG_UPPER (Line) )
			Row := HB_USUBSTR ( Line , a + 4 , c - a - 4 )
			Col := ''
			Started := .F.

			For z := c + 1 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Col := Col + Char
				EndIf
			Next z

			* Determine Width

			a := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

			if a > 0

				Width := ''
				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Width := Width + Char
					EndIf
				Next z

			EndIf

			* Determine Height

			a := HB_UAT ( " HEIGHT " , HMG_UPPER (Line) )

			if a > 0

				Height := ''
				Started := .F.

				For z := a + 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Height := Height + Char
					EndIf
				Next z

			endif

			* Determine Value

			Value := ''

			a := HB_UAT ( " VALUE " , HMG_UPPER (Line) )

			if a > 0

				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Value := Value + Char
					EndIf
				Next z

			endif

			__MVPUBLIC ( Name + 'Value' )

			If Empty ( value )
				__MVPUT( Name + 'Value' , '0' )
			Else
				__MVPUT( Name + 'Value' , Value )
			EndIf

			* Determine FontName

			a := HB_UAT ( " FONT " , HMG_UPPER (Line) )

			FontName := ''

			if a > 0

				Started := .F.

				For z := a + 5 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						FontName := FontName + Char
					EndIf
				Next z

			endif

			Fontname := ALLTRIM ( FontName )

			if	HB_ULEFT ( Fontname , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( Fontname , 1 ) == "'"

				Fontname := HB_URIGHT ( Fontname , HMG_LEN( Fontname ) - 1 )

			EndIf

			if	HB_URIGHT ( Fontname , 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( Fontname , 1 ) == "'"

				Fontname := HB_ULEFT ( Fontname , HMG_LEN( Fontname ) - 1 )

			EndIf

			if Empty ( FontName )
				FontName := 'Arial'
			EndIf

			* Determine FontSize

			a := HB_UAT ( " SIZE " , HMG_UPPER (Line) )

			FontSize := ''

			if a > 0

				Started := .F.

				For z := a + 5 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						FontSize := FontSize + Char
					EndIf
				Next z

			endif

			FontSize := ALLTRIM ( FontSize )

			if Empty ( FontSize )
				FontSize := '9'
			EndIf

			__MVPUBLIC( Name + 'FontName' )
			__MVPUBLIC( Name + 'FontSize' )

			__MVPUT( Name + 'FontName' , FontName )
			__MVPUT( Name + 'FontSize' ,  FontSize )

			* Determine ToolTip

			a := HB_UAT ( " TOOLTIP " , HMG_UPPER (Line) )

			ToolTip := ''

			if a > 0

				Started := .F.

				For z := a + 9 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						if Started
							Exit
						Else
							Started := .T.
						EndIf
					Else
						if Started
							ToolTip := ToolTip + Char
						EndIf
					EndIf
				Next z

			EndIf

			ToolTip := ALLTRIM(ToolTip)

			if	HB_ULEFT ( ToolTip , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( ToolTip , 1 ) == "'"

				ToolTip := HB_URIGHT ( ToolTip , HMG_LEN( ToolTip ) - 1 )

			EndIf

			if	HB_URIGHT ( ToolTip, 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( ToolTip , 1 ) == "'"

				ToolTip := HB_ULEFT ( ToolTip , HMG_LEN( ToolTip ) - 1 )

			EndIf

			ToolTip := ALLTRIM(ToolTip)

			* Determine OnGotFocus

			a := HB_UAT ( " ON GOTFOCUS " , HMG_UPPER (Line) )

			OnGotFocus := ''

			if a > 0

				Started := .F.

				For z := a + 13 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 9 )
					if NextToken == 'ON CHANGE'
						Exit
					endif

					NextToken := HB_USUBSTR ( Line , z , 12 )
					if NextToken == 'ON LOSTFOCUS'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnGotFocus := OnGotFocus + Char

				Next z

				OnGotFocus := ALLTRIM(OnGotFocus)

				if Empty (OnGotFocus)
					OnGotFocus := 'Nil'
				EndIf

			EndIf

			* Determine OnChange

			a := HB_UAT ( " ON CHANGE " , HMG_UPPER (Line) )

			OnChange := ''

			if a > 0

				Started := .F.

				For z := a + 11 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 12 )

					if NextToken == 'ON LOSTFOCUS'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnChange := OnChange + Char

				Next z

				OnChange := ALLTRIM(OnChange)

				if Empty (OnChange)
					OnChange := 'Nil'
				EndIf

			EndIf

			* Determine OnLostFocus

			a := HB_UAT ( " ON LOSTFOCUS " , HMG_UPPER (Line) )

			OnLostFocus := ''

			if a > 0

				Started := .F.

				For z := a + 14 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 11 )

					if NextToken == 'ON DBLCLICK'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnLostFocus := OnLostFocus + Char

				Next z

				OnLostFocus := ALLTRIM(OnLostFocus)

				if Empty (OnLostFocus)
					OnLostFocus := 'Nil'
				EndIf

			EndIf

			* Determine OnDblClick

			a := HB_UAT ( " ON DBLCLICK " , HMG_UPPER (Line) )

			OnDblClick := ''

			if a > 0

				Started := .F.

				For z := a + 13 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 10 )

					if NextToken == 'NODEIMAGES'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnDblClick := OnDblClick + Char

				Next z

				OnDblClick := ALLTRIM(OnDblClick)

				if Empty (OnDblClick)
					OnDblClick := 'Nil'
				EndIf

			EndIf

			* Determine NodeImages

			a := HB_UAT ( " NODEIMAGES " , HMG_UPPER (Line) )

			NodeImages := ''

			if a > 0

				Started := .F.

				For z := a + 12 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 10 )

					if NextToken == 'ITEMIMAGES'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					NodeImages := NodeImages + Char

				Next z

				NodeImages := ALLTRIM(NodeImages)

				if Empty (NodeImages)
					NodeImages := 'Nil'
				EndIf

			EndIf

			* Determine ItemImages

			a := HB_UAT ( " ITEMIMAGES " , HMG_UPPER (Line) )

			ItemImages := ''

			if a > 0

				Started := .F.

				For z := a + 12 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 12 )
					if NextToken == 'NOROOTBUTTON'
						Exit
					endif
					NextToken := HB_USUBSTR ( Line , z , 7 )
					if NextToken == 'ITEMIDS'
						Exit
					endif
					NextToken := HB_USUBSTR ( Line , z , 6 )
					if NextToken == 'HELPID'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					ItemImages := ItemImages + Char

				Next z

				ItemImages := ALLTRIM(ItemImages)

				if Empty (ItemImages)
					ItemImages := 'Nil'
				EndIf

			EndIf

			* Determine RootButton

			__MVPUBLIC ( Name + 'RootButton' )

			a := HB_UAT ( " NOROOTBUTTON" , HMG_UPPER (Line) )

			if a != 0
				__MVPUT( Name + 'RootButton' , '.F.' )
			else
				__MVPUT( Name + 'RootButton' , '.T.' )
			endif

			* Determine ItemIds

			__MVPUBLIC ( Name + 'ItemIds' )

			a := HB_UAT ( " ITEMIDS" , HMG_UPPER (Line) )

			if a != 0
				__MVPUT( Name + 'ItemIds' , '.T.' )
			else
				__MVPUT( Name + 'ItemIds' , '.F.' )
			endif

			* Determine HelpId

			a := HB_UAT ( " HELPID " , HMG_UPPER (Line) )

			HelpId := ''

			if a > 0

				Started := .F.

				For z := a + 8 To HMG_LEN ( Line )

					char := HB_USUBSTR ( Line , z , 1 )

					HelpId := HelpId + Char

				Next z

				HelpId := ALLTRIM(HelpId)

				if Empty (HelpId)
					HelpId := 'Nil'
				EndIf

			EndIf

			*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , HelpId )

			__MVPUBLIC ( Name + 'ItemImages' )
			__MVPUT( Name + 'ItemImages' , ItemImages )

			__MVPUBLIC ( Name + 'NodeImages' )
			__MVPUT( Name + 'NodeImages' , NodeImages )

			__MVPUBLIC ( Name + 'OnDblClick' )
			__MVPUT( Name + 'OnDblClick' , OnDblClick )

			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , ToolTip )

			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , OnGotFocus )

			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , OnChange )

			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , OnLostFocus )

			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUBLIC ( Name + 'FontUnderLine' )


			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

				__MVPUBLIC ( Name + 'Row' )
				__MVPUT( Name + 'Row' , 'Nil' )

				__MVPUBLIC ( Name + 'Col' )
				__MVPUT( Name + 'Col' , 'Nil' )

				__MVPUBLIC ( Name + 'Break' )
				__MVPUT( Name + 'Break' , '.F.' )

				__MVPUBLIC ( Name + 'Width' )
				__MVPUT( Name + 'Width' , Width )
				__MVPUBLIC ( Name + 'Height' )
				__MVPUT( Name + 'Height' , Height )

			else

				*

				if	Empty (Width) .and. Empty (Height)

					DEFINE TREE &Name OF &DesignForm AT VAL (Row) , VAL (Col) FONT Fontname SIZE VAL(FontSize) ON GOTFOCUS SelectControl( This.Name )

				ElseIf Empty (Width) .and. !Empty (Height)

					DEFINE TREE &Name OF &DesignForm AT VAL (Row) , VAL (Col) HEIGHT VAL ( Height )  FONT Fontname SIZE VAL(FontSize) ON GOTFOCUS SelectControl( This.Name )

				ElseIf !Empty (Width) .and. Empty (Height)

					DEFINE TREE &Name OF &DesignForm AT VAL (Row) , VAL (Col) WIDTH VAL ( Width )  FONT Fontname SIZE VAL(FontSize) ON GOTFOCUS SelectControl( This.Name )

				ElseIf !Empty (Width) .and. !Empty (Height)

					DEFINE TREE &Name OF &DesignForm AT VAL (Row) , VAL (Col) WIDTH VAL ( Width ) HEIGHT VAL ( Height )  FONT Fontname SIZE VAL(FontSize) ON GOTFOCUS SelectControl( This.Name )

				EndIf

				NODE Name
				END NODE

			endif

			* Determine Bold
			a := HB_UAT ( " BOLD" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'FontBold' , '.T.' )
				SetProperty ( DesignForm , Name , 'FontBold' , .T. )
			else
				__MVPUT( Name + 'FontBold' , '.F.' )
			endif
			* Determine Italic
			a := HB_UAT ( " ITALIC" , HMG_UPPER (Line) )
			if a > 0
				SetProperty ( DesignForm , Name , 'FontItalic' , .T. )
				__MVPUT( Name + 'FontItalic' , '.T.' )
			else
				__MVPUT( Name + 'FontItalic' , '.F.' )
			endif
			* Determine UnderLine
			a := HB_UAT ( " UNDERLINE" , HMG_UPPER (Line) )
			if a > 0
				SetProperty ( DesignForm , Name , 'FontUnderLine' , .T. )
				__MVPUT( Name + 'FontUnderLine' , '.T.' )
			else
				__MVPUT( Name + 'FontUnderLine' , '.F.' )
			endif
			* Determine StrikeOut
			a := HB_UAT ( " STRIKEOUT" , HMG_UPPER (Line) )
			if a > 0
				SetProperty ( DesignForm , Name , 'FontStrikeOut' , .T. )
				__MVPUT( Name + 'FontStrikeOut' , '.T.' )
			else
				__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			endif

		ElseIf	HMG_UPPER (Line) = 'DEFINE DATEPICKER'
			ControlType := 'DATEPICKER'
			Name := HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 )
			DEFINE DATEPICKER &Name
			PARENT &DesignForm
			ONGOTFOCUS SelectControl(This.Name)

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , 'CTOD(  /  /  )' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'OnEnter' )
			__MVPUT( Name + 'OnEnter' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'ShowNone' )
			__MVPUT( Name + 'ShowNone' , '.F.' )
			__MVPUBLIC ( Name + 'UpDown' )
			__MVPUT( Name + 'UpDown' , '.F.' )
			__MVPUBLIC ( Name + 'RightAlign' )
			__MVPUT( Name + 'RightAlign' , '.F.' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE TEXTBOX'
			ControlType := 'TEXTBOX'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )
			DEFINE TEXTBOX &Name
			PARENT &DesignForm
			VALUE Name
			ON GOTFOCUS SelectControl( This.Name )

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'InputMask' )
			__MVPUT( Name + 'InputMask' , '' )
			__MVPUBLIC ( Name + 'Format' )
			__MVPUT( Name + 'Format' , '' )
			__MVPUBLIC ( Name + 'DataType' )
			__MVPUT( Name + 'DataType' , 'CHARACTER' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'OnEnter' )
			__MVPUT( Name + 'OnEnter' , 'Nil' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , '' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , '' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , '.F.' )
			__MVPUBLIC ( Name + 'RightAlign' )
			__MVPUT( Name + 'RightAlign' , '.F.' )
			__MVPUBLIC ( Name + 'MaxLength' )
			__MVPUT( Name + 'MaxLength' , 'Nil' )
			__MVPUBLIC ( Name + 'Password' )
			__MVPUT( Name + 'Password' , '.F.' )
			__MVPUBLIC ( Name + 'CaseConvert' )
			__MVPUT( Name + 'CaseConvert' , 'NONE' )
			__MVPUBLIC ( Name + 'DisabledBackColor' )
			__MVPUT( Name + 'DisabledBackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'DisabledFontColor' )
			__MVPUT( Name + 'DisabledFontColor' , 'Nil' )


		ElseIf	HMG_UPPER (Line) = 'DEFINE EDITBOX'
			ControlType := 'EDITBOX'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )

			currenthscrollbar := ''
			currentvscrollbar := ''

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE EDITBOX &Name
				PARENT &DesignForm
				ON GOTFOCUS SelectControl (This.Name)
				VALUE Name

			endif

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )
			__MVPUBLIC ( Name + 'MaxLength' )
			__MVPUT( Name + 'MaxLength' , 'Nil' )
			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , '.F.' )
			__MVPUBLIC ( Name + 'hScrollBar' )
			__MVPUT( Name + 'hScrollBar' , '.T.' )
			__MVPUBLIC ( Name + 'vScrollBar' )
			__MVPUT( Name + 'vScrollBar' , '.T.' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )
			__MVPUBLIC ( Name + 'DisabledBackColor' )
			__MVPUT( Name + 'DisabledBackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'DisabledFontColor' )
			__MVPUT( Name + 'DisabledFontColor' , 'Nil' )


		ElseIf	HMG_UPPER (Line) = 'DEFINE LABEL'
			ControlType := 'LABEL'
			Name := HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 )
			DEFINE LABEL &Name
			PARENT &DesignForm
			VALUE Name

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'Action' )
			__MVPUT( Name + 'Action' , 'Nil' )
			__MVPUBLIC ( Name + 'AutoSize' )
			__MVPUT( Name + 'AutoSize' , '.F.' )
			__MVPUBLIC ( Name + 'Alignment' )
			__MVPUT( Name + 'Alignment' , 'LEFT' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE BROWSE'
			ControlType := 'BROWSE'
			Name := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE BROWSE &Name
				PARENT &DesignForm
				HEADERS { Name }
				WIDTHS { 100 }
				WORKAREA Test
				FIELDS { 'Test->Code' }
				TOOLTIP Name
				ON GOTFOCUS SelectControl (This.Name)
				VSCROLLBAR .F.

			endif

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'WorkArea' )
			__MVPUT( Name + 'WorkArea' , 'Nil' )
			__MVPUBLIC ( Name + 'Fields' )
			__MVPUT( Name + 'Fields' , '{}' )
			__MVPUBLIC ( Name + 'Widths' )
			__MVPUT( Name + 'Widths' , '{}' )
			__MVPUBLIC ( Name + 'Headers' )
			__MVPUT( Name + 'Headers' , '{}' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'OnDblClick' )
			__MVPUT( Name + 'OnDblClick' , 'Nil' )
			__MVPUBLIC ( Name + 'AllowEdit' )
			__MVPUT( Name + 'AllowEdit' , '.F.' )
			__MVPUBLIC ( Name + 'AllowAppend' )
			__MVPUT( Name + 'AllowAppend' , '.F.' )
			__MVPUBLIC ( Name + 'OnHeadClick' )
			__MVPUT( Name + 'OnHeadClick' , 'Nil' )
			__MVPUBLIC ( Name + 'AllowDelete' )
			__MVPUT( Name + 'AllowDelete' , '.F.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Image' )
			__MVPUT( Name + 'Image' , 'Nil' )
			__MVPUBLIC ( Name + 'Justify' )
			__MVPUT( Name + 'Justify' , 'Nil' )
			__MVPUBLIC ( Name + 'Lines' )
			__MVPUT( Name + 'Lines' , '.T.' )
			__MVPUBLIC ( Name + 'ReadOnlyFields' )
			__MVPUT( Name + 'ReadOnlyFields' , 'Nil' )
			__MVPUBLIC ( Name + 'Valid' )
			__MVPUT( Name + 'Valid' , 'Nil' )
			__MVPUBLIC ( Name + 'ValidMessages' )
			__MVPUT( Name + 'ValidMessages' , 'Nil' )
			__MVPUBLIC ( Name + 'Lock' )
			__MVPUT( Name + 'Lock' , 'Nil' )
			__MVPUBLIC ( Name + 'vScrollBar' )
			__MVPUT( Name + 'vScrollBar' , '.T.' )
			__MVPUBLIC ( Name + 'DynamicBackColor' )
			__MVPUT( Name + 'DynamicBackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'DynamicForeColor' )
			__MVPUT( Name + 'DynamicForeColor' , 'Nil' )
			__MVPUBLIC ( Name + 'InputMask' )
			__MVPUT( Name + 'InputMask' , 'Nil' )
			__MVPUBLIC ( Name + 'Format' )
			__MVPUT( Name + 'Format' , 'Nil' )
			__MVPUBLIC ( Name + 'When' )
			__MVPUT( Name + 'When' , 'Nil' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )

			__MVPUBLIC ( Name + 'InputItems' )
			__MVPUT( Name + 'InputItems' , 'Nil' )

			__MVPUBLIC ( Name + 'DisplayItems' )
			__MVPUT( Name + 'DisplayItems' , 'Nil' )

			__MVPUBLIC ( Name + 'HeaderImages' )
			__MVPUT( Name + 'HeaderImages' , 'Nil' )


		ElseIf	HMG_UPPER (Line) = 'DEFINE RADIOGROUP'
			ControlType := 'RADIOGROUP'
			Name := HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 )
			CurrentOptions := "{ 'Option 1','Option 2'}"

			CurrentFontBold		:= '.F.'
			CurrentFontItalic	:= '.F.'
			CurrentFontUnderLine	:= '.F.'
			CurrentFontStrikeout	:= '.F.'
			CurrentHorizontal	:= '.F.'

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'Spacing' )
			__MVPUT( Name + 'Spacing' , '25' )

			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , 'Nil' )

			__MVPUBLIC ( Name + 'Orientation' )
			__MVPUT( Name + 'Orientation' , 'VERTICAL' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE FRAME'
			ControlType := 'FRAME'
			Name := HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 )
			DEFINE FRAME &Name
			PARENT &DesignForm

			__MVPUBLIC ( Name + 'Caption' )
			__MVPUT( Name + 'Caption' , "" )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE TAB'
			TabPageCount := 0
			ControlType := 'TAB'

			* Determine Name

			Name := ''
			Started := .F.

			For z := 12 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Name := Name + Char
				EndIf
			Next z

			* Determine Row & Col

			a := HB_UAT ( " AT " , HMG_UPPER (Line) )
			c := HB_UAT ( "," , HMG_UPPER (Line) )
			Row := HB_USUBSTR ( Line , a + 4 , c - a - 4 )
			Col := ''
			Started := .F.

			For z := c + 1 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Col := Col + Char
				EndIf
			Next z

			* Determine Width

			a := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

			if a > 0

				Width := ''
				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Width := Width + Char
					EndIf
				Next z

			EndIf

			* Determine Height

			a := HB_UAT ( " HEIGHT " , HMG_UPPER (Line) )

			if a > 0

				Height := ''
				Started := .F.

				For z := a + 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Height := Height + Char
					EndIf
				Next z

			endif

			* Determine Value

			a := HB_UAT ( " VALUE " , HMG_UPPER (Line) )

			Value := ''

			if a > 0

				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Value := Value + Char
					EndIf
				Next z

			endif

			* Determine FontName

			a := HB_UAT ( ' FONT "' , HMG_UPPER (Line) )

			FontName := ''

			if a > 0

				Started := .F.

				For z := a + 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						FontName := FontName + Char
					EndIf
				Next z

			endif

			Fontname := ALLTRIM ( FontName )

			if Empty ( FontName )
				FontName := 'Arial'
			EndIf

			* Determine FontSize

			a := HB_UAT ( " SIZE " , HMG_UPPER (Line) )

			FontSize := ''

			if a > 0

				Started := .F.

				For z := a + 5 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						FontSize := FontSize + Char
					EndIf
				Next z

			endif

			FontSize := ALLTRIM ( FontSize )

			if Empty ( FontSize )
				FontSize := '9'
			EndIf

			* Determine ToolTip

			a := HB_UAT ( " TOOLTIP " , HMG_UPPER (Line) )

			ToolTip := ''

			if a > 0

				Started := .F.

				For z := a + 9 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						if Started
							Exit
						Else
							Started := .T.
						EndIf
					Else
						if Started
							ToolTip := ToolTip + Char
						EndIf
					EndIf
				Next z

			EndIf

			ToolTip := ALLTRIM(ToolTip)

			if	HB_ULEFT ( ToolTip , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( ToolTip , 1 ) == "'"

				ToolTip := HB_URIGHT ( ToolTip , HMG_LEN( ToolTip ) - 1 )

			EndIf

			if	HB_URIGHT ( ToolTip, 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( ToolTip , 1 ) == "'"

				ToolTip := HB_ULEFT ( ToolTip , HMG_LEN( ToolTip ) - 1 )

			EndIf

			ToolTip := ALLTRIM(ToolTip)


			* Determine OnChange

			a := HB_UAT ( " ON CHANGE " , HMG_UPPER (Line) )

			OnChange := ''

			if a > 0

				Started := .F.

				For z := a + 11 To HMG_LEN ( Line )

					NextToken := HB_USUBSTR ( Line , z , 9 )

					if NextToken == 'NOTABSTOP'
						Exit
					endif

					if NextToken == 'MULTILINE'
						Exit
					endif

					char := HB_USUBSTR ( Line , z , 1 )

					OnChange := OnChange + Char

				Next z

				OnChange := ALLTRIM(OnChange)

				if Empty (OnChange)
					OnChange := 'Nil'
				EndIf

			EndIf

			__MVPUBLIC( Name + 'FontName' )
			__MVPUBLIC( Name + 'FontSize' )
			__MVPUT( Name + 'FontName' , FontName )
			__MVPUT( Name + 'FontSize' ,  FontSize )
			__MVPUBLIC( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , ToolTip )
			__MVPUBLIC( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , OnChange )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUBLIC ( Name + 'Buttons' )
			__MVPUBLIC ( Name + 'Flat' )
			__MVPUBLIC ( Name + 'HotTrack' )
			__MVPUBLIC ( Name + 'Vertical' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUBLIC ( Name + 'Multiline' )

			CurrentTabName := Name

			DEFINE TAB &Name OF &DesignForm AT VAL (Row) , VAL (Col) WIDTH VAL ( Width ) HEIGHT VAL ( Height ) ;
				FONT Fontname SIZE VAL(FontSize) ;
				ON CHANGE ( SelectControl (This.Name) , SelectControl (This.Name) )

			* Determine MultiLine
			a := HB_UAT ( " MULTILINE" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'Multiline' , '.T.' )
			else
				__MVPUT( Name + 'Multiline' , '.F.' )
			endif

			* Determine TabStop
			a := HB_UAT ( " NOTABSTOP" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'TabStop' , '.F.' )
			else
				__MVPUT( Name + 'TabStop' , '.T.' )
			endif

			* Determine Vertical
			a := HB_UAT ( " VERTICAL" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'Vertical' , '.T.' )
				_HMG_SYSDATA [ 269 ]	:= .T.
			else
				__MVPUT( Name + 'Vertical' , '.F.' )
			endif

			* Determine HotTrack
			a := HB_UAT ( " HOTTRACK" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'HotTrack' , '.T.' )
				_HMG_SYSDATA [ 268 ]	:= .T.
			else
				__MVPUT( Name + 'HotTrack' , '.F.' )
			endif

			* Determine Buttons
			a := HB_UAT ( " BUTTONS" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'Buttons' , '.T.' )
				_HMG_SYSDATA [ 266 ]	:= .T.
			else
				__MVPUT( Name + 'Buttons' , '.F.' )
			endif

			* Determine Flat
			a := HB_UAT ( " FLAT" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'Flat' , '.T.' )
				_HMG_SYSDATA [ 267 ]	:= .T.
			else
				__MVPUT( Name + 'Flat' , '.F.' )
			endif


			* Determine Bold
			a := HB_UAT ( " BOLD" , HMG_UPPER (Line) )
			if a > 0
				__MVPUT( Name + 'FontBold' , '.T.' )
				_HMG_SYSDATA [ 301 ]	:= .T.
			else
				__MVPUT( Name + 'FontBold' , '.F.' )
			endif
			* Determine Italic
			a := HB_UAT ( " ITALIC" , HMG_UPPER (Line) )
			if a > 0
				_HMG_SYSDATA [ 302 ]	:= .T.
				__MVPUT( Name + 'FontItalic' , '.T.' )
			else
				__MVPUT( Name + 'FontItalic' , '.F.' )
			endif
			* Determine UnderLine
			a := HB_UAT ( " UNDERLINE" , HMG_UPPER (Line) )
			if a > 0
				_HMG_SYSDATA [ 303 ]	:= .T.
				__MVPUT( Name + 'FontUnderLine' , '.T.' )
			else
				__MVPUT( Name + 'FontUnderLine' , '.F.' )
			endif
			* Determine StrikeOut
			a := HB_UAT ( " STRIKEOUT" , HMG_UPPER (Line) )
			if a > 0
				_HMG_SYSDATA [ 304 ]	:= .T.
				__MVPUT( Name + 'FontStrikeOut' , '.T.' )
			else
				__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			endif


			CurrentCaptions :=  '{ '
			CurrentPageImages := '{ '

			if empty(value)
				value := '0'
			endif

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , Value )
			__MVPUBLIC ( Name + 'Captions' )
			__MVPUBLIC ( Name + 'PageCount' )
			__MVPUT( Name + 'PageCount' , '0' )
			__MVPUT( Name + 'Captions' ,  "{'',''}" )

		ElseIf	HMG_UPPER (Line) = 'PAGE '
			TabPageCount ++

			* Get Image

			x := HB_UTF8RAT ( ' IMAGE ' , HMG_UPPER(Line) )

			if x > 0 .and. !IsLiteral ( Line , x )
				CurrentImage := HB_USUBSTR ( Line , x + 7 , 255 )
				Line := HB_ULEFT ( Line , x )
			Else
				CurrentImage := ''
			EndIf

			if	HB_ULEFT ( CurrentImage , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( CurrentImage , 1 ) == "'"

				CurrentImage := HB_URIGHT (CurrentImage , HMG_LEN(CurrentImage) - 1 )

			EndIf

			if	HB_URIGHT ( CurrentImage , 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( CurrentImage , 1 ) == "'"

				CurrentImage := HB_ULEFT (CurrentImage , HMG_LEN(CurrentImage) - 1 )

			EndIf

			CurrentPageImages :=  CurrentpageImages + chr(34) + CurrentImage + chr(34) + " , "


			CurrentCaption := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN (Line) - 5 ) )

			if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( CurrentCaption , 1 ) == "'"

				CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

			EndIf

			if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( CurrentCaption , 1 ) == "'"

				CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

			EndIf

			DEFINE PAGE CurrentCaption

			CurrentCaptions :=  CurrentCaptions + chr(34) + CurrentCaption + chr(34) + " , "

		ElseIf	HMG_UPPER (Line) = 'END PAGE'
			END PAGE

		ElseIf	HMG_UPPER (Line) = 'END TAB'

			END TAB

			CurrentCaptions :=  ALLTRIM(CurrentCaptions)
			CurrentCaptions := HB_ULEFT ( CurrentCaptions , HMG_LEN(CurrentCaptions) - 1 )
			CurrentCaptions :=  CurrentCaptions + ' }'

			CurrentPageImages :=  ALLTRIM(CurrentPageImages)
			CurrentPageImages := HB_ULEFT ( CurrentpageImages , HMG_LEN(CurrentPageImages) - 1 )
			CurrentpageImages :=  CurrentPageImages + ' }'

			__MVPUT( CurrentTabName + 'PageCount' , ALLTRIM(STR(TabpageCount)) )
			__MVPUT( CurrentTabName + 'Captions' ,  CurrentCaptions )

			__MVPUBLIC ( CurrentTabName + 'PageImages' )
			__MVPUT( CurrentTabName + 'PageImages' ,  CurrentPageImages )


		ElseIf	HMG_UPPER (Line) = 'DEFINE ANIMATEBOX'
			ControlType := 'ANIMATEBOX'
			Name := HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 )
			DEFINE ANIMATEBOX &Name
			PARENT &DesignForm
			FILE ''
			CENTER .T.
			AUTOPLAY .T.

			__MVPUBLIC ( Name + 'File' )
			__MVPUT( Name + 'File' , "" )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Transparent' )
			__MVPUT( Name + 'Transparent' , '.F.' )
			__MVPUBLIC ( Name + 'AutoPlay' )
			__MVPUT( Name + 'AutoPlay' , '.F.' )
			__MVPUBLIC ( Name + 'Center' )
			__MVPUT( Name + 'Center' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE HYPERLINK'
			ControlType := 'HYPERLINK'
			Name := HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 )
			DEFINE HYPERLINK &Name
			PARENT &DesignForm
			ADDRESS _HLK

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'Address' )
			__MVPUT( Name + 'Address' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'AutoSize' )
			__MVPUT( Name + 'AutoSize' , '.F.' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'FontColor' )
			__MVPUT( Name + 'FontColor' , 'Nil' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'HandCursor' )
			__MVPUT( Name + 'HandCursor' , '.F.' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE MONTHCALENDAR'
			ControlType := 'MONTHCALENDAR'
			Name := HB_USUBSTR ( Line , 22 , HMG_LEN (Line) - 21 )
			DEFINE MONTHCALENDAR &Name
			PARENT &DesignForm
			ON CHANGE SelectControl (This.Name)

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , 'CTOD(  /  /  )' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'Today' )
			__MVPUT( Name + 'Today' , '.T.' )
			__MVPUBLIC ( Name + 'TodayCircle' )
			__MVPUT( Name + 'TodayCircle' , '.T.' )
			__MVPUBLIC ( Name + 'WeekNumbers' )
			__MVPUT( Name + 'WeekNumbers' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE RICHEDITBOX'
			ControlType := 'RICHEDITBOX'
			Name := HB_USUBSTR ( Line , 20 , HMG_LEN (Line) - 19 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				DEFINE RICHEDITBOX &Name
				PARENT &DesignForm
				ON GOTFOCUS SelectControl (This.Name)
				VALUE Name

			endif

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'MaxLength' )
			__MVPUT( Name + 'MaxLength' , 'Nil' )
			__MVPUBLIC ( Name + 'Field' )
			__MVPUT( Name + 'Field' , 'Nil' )
			__MVPUBLIC ( Name + 'ReadOnly' )
			__MVPUT( Name + 'ReadOnly' , '.F.' )
			__MVPUBLIC ( Name + 'Break' )
			__MVPUT( Name + 'Break' , '.F.' )


		ElseIf	HMG_UPPER (Line) = 'DEFINE ACTIVEX'
			ControlType := 'ACTIVEX'
			Name := HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 )

			__MVPUBLIC ( Name + 'ProgId' )
			__MVPUT( Name + 'ProgId' , '' )



		ElseIf	HMG_UPPER (Line) = 'DEFINE PROGRESSBAR'
			ControlType := 'PROGRESSBAR'
			Name := HB_USUBSTR ( Line , 20 , HMG_LEN (Line) - 19 )

			__MVPUBLIC ( Name + 'RangeMax' )
			__MVPUT( Name + 'RangeMax' , '1' )
			__MVPUBLIC ( Name + 'RangeMin' )
			__MVPUT( Name + 'RangeMin' , '10' )
			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '0' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'BackColor' )
			__MVPUT( Name + 'BackColor' , 'Nil' )
			__MVPUBLIC ( Name + 'ForeColor' )
			__MVPUT( Name + 'ForeColor' , 'Nil' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )
			__MVPUBLIC ( Name + 'Smooth' )
			__MVPUT( Name + 'Smooth' , '.F.' )
			__MVPUBLIC ( Name + 'Orientation' )
			__MVPUT( Name + 'Orientation' , 'HORIZONTAL' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE PLAYER'
			ControlType := 'PLAYER'
			Name := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )

			__MVPUBLIC ( Name + 'File' )
			__MVPUT( Name + 'File' , "" )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )

			__MVPUBLIC ( Name + 'AutoSizeWindow' )
			__MVPUT( Name + 'AutoSizeWindow' , '.T.' )

			__MVPUBLIC ( Name + 'AutoSizeMovie' )
			__MVPUT( Name + 'AutoSizeMovie' , '.T.' )

			__MVPUBLIC ( Name + 'ErrorDlg' )
			__MVPUT( Name + 'ErrorDlg' , '.T.' )

			__MVPUBLIC ( Name + 'Menu' )
			__MVPUT( Name + 'Menu' , '.T.' )

			__MVPUBLIC ( Name + 'Open' )
			__MVPUT( Name + 'Open' , '.T.' )

			__MVPUBLIC ( Name + 'PlayBar' )
			__MVPUT( Name + 'PlayBar' , '.T.' )

			__MVPUBLIC ( Name + 'ShowAll' )
			__MVPUT( Name + 'ShowAll' , '.F.' )

			__MVPUBLIC ( Name + 'ShowMode' )
			__MVPUT( Name + 'ShowMode' , '.F.' )

			__MVPUBLIC ( Name + 'ShowName' )
			__MVPUT( Name + 'ShowName' , '.F.' )

			__MVPUBLIC ( Name + 'ShowPosition' )
			__MVPUT( Name + 'ShowPosition' , '.F.' )


		ElseIf	HMG_UPPER (Line) = 'DEFINE IPADDRESS'
			ControlType := 'IPADDRESS'
			Name := HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 )

			CurrentFontBold		:= '.F.'
			CurrentFontItalic	:= '.F.'
			CurrentFontUnderLine	:= '.F.'
			CurrentFontStrikeout	:= '.F.'

			__MVPUBLIC ( Name + 'Value' )
			__MVPUT( Name + 'Value' , '{ 0 , 0 , 0 , 0 }' )
			__MVPUBLIC ( Name + 'FontName' )
			__MVPUT( Name + 'FontName' , 'Arial' )
			__MVPUBLIC ( Name + 'FontSize' )
			__MVPUT( Name + 'FontSize' , '9' )
			__MVPUBLIC ( Name + 'ToolTip' )
			__MVPUT( Name + 'ToolTip' , '' )
			__MVPUBLIC ( Name + 'OnChange' )
			__MVPUT( Name + 'OnChange' , 'Nil' )
			__MVPUBLIC ( Name + 'OnGotFocus' )
			__MVPUT( Name + 'OnGotFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'OnLostFocus' )
			__MVPUT( Name + 'OnLostFocus' , 'Nil' )
			__MVPUBLIC ( Name + 'FontBold' )
			__MVPUT( Name + 'FontBold' , '.F.' )
			__MVPUBLIC ( Name + 'FontItalic' )
			__MVPUT( Name + 'FontItalic' , '.F.' )
			__MVPUBLIC ( Name + 'FontStrikeOut' )
			__MVPUT( Name + 'FontStrikeOut' , '.F.' )
			__MVPUBLIC ( Name + 'FontUnderLine' )
			__MVPUT( Name + 'FontUnderLine' , '.F.' )
			__MVPUBLIC ( Name + 'TabStop' )
			__MVPUT( Name + 'TabStop' , '.T.' )
			__MVPUBLIC ( Name + 'Visible' )
			__MVPUT( Name + 'Visible' , '.T.' )
			__MVPUBLIC ( Name + 'HelpId' )
			__MVPUT( Name + 'HelpId' , 'Nil' )

		ElseIf	HMG_UPPER (Line) = 'DEFINE TIMER'
			ControlType := 'TIMER'

			* Determine Name

			Name := ''
			Started := .F.

			For z := 14 To HMG_LEN ( Line )
				char := HB_USUBSTR ( Line , z , 1 )
				if char == ' '
					if Started
						Exit
					EndIf
				Else
					if ! Started
						Started := .T.
					EndIf
					Name := Name + Char
				EndIf
			Next z

			* Determine Interval

			Interval := ''
			a := HB_UAT ( " INTERVAL " , HMG_UPPER (Line) )

			if a > 0

				Started := .F.

				For z := a + 9 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Interval := Interval + Char
					EndIf
				Next z

			EndIf

			* Determine Action

			CurrentAction := ''
			a := HB_UAT ( " ACTION " , HMG_UPPER (Line) )

			if a > 0
				CurrentAction := HB_USUBSTR ( Line , a + 7 , HMG_LEN (Line) - ( a + 6 ) )
			Else
				CurrentAction := ''
			EndIf

			DEFINE BUTTON &Name
				PARENT &DesignForm
				ROW GetProperty ( DesignForm , 'Height' ) - 45 - GetTitleHeight()
				COL 10 + (TimersLoaded * 40)
				WIDTH 30
				HEIGHT 30
				ACTION SelectControl (This.name)
				PICTURE 'timer'
				FLAT .T.
			END BUTTON

			_HMG_SYSDATA [ 39 ] [ GetControlIndex ( Name , DesignForm ) ] := 5

			TimersLoaded++

			if empty ( interval )
				interval := '0'
			endif
			if empty ( Currentaction )
				Currentaction := 'Nil'
			endif

			__MVPUBLIC ( Name + 'Interval' )
			__MVPUT( Name + 'Interval' , Interval )
			__MVPUBLIC ( Name + 'Action' )
			__MVPUT( Name + 'Action' , Currentaction )


*******************************************************************************





*******************************************************************************

		// END COMMAND

		ElseIf	HMG_UPPER (Line) = 'END BUTTON'
			END BUTTON
		ElseIf	HMG_UPPER (Line) = 'END CHECKBOX'
			END CHECKBOX
		ElseIf	HMG_UPPER (Line) = 'END LISTBOX'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END LISTBOX

			endif

		ElseIf	HMG_UPPER (Line) = 'END COMBOBOX'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END COMBOBOX

			endif

		ElseIf	HMG_UPPER (Line) = 'END CHECKBUTTON'
			END CHECKBUTTON
			_HMG_SYSDATA [ 39 ] [ GetControlIndex ( Name , DesignForm ) ] := 1
		ElseIf	HMG_UPPER (Line) = 'END GRID'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				if ALLTRIM(HMG_UPPER(  __MVGET ( Name + 'ShowHeaders' )  )) == '.T.'
					SHOWHEADERS .T.
				else
					SHOWHEADERS .F.
				endif

				END GRID

			endif

		ElseIf	HMG_UPPER (Line) = 'END SLIDER'
			END SLIDER
			if __MVGET ( name + 'Orientation' ) == 'VERTICAL' ;
				.and. ;
				__MVGET ( name + 'TickMarks' ) == 'BOTTOM'

				__MVPUT ( name + 'TickMarks' , 'RIGHT' )

			endif
		ElseIf	HMG_UPPER (Line) = 'END SPINNER'
			END SPINNER
		ElseIf	HMG_UPPER (Line) = 'END IMAGE'
			END IMAGE
		ElseIf	HMG_UPPER (Line) = 'END TREE'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END TREE

			endif

		ElseIf	HMG_UPPER (Line) = 'END DATEPICKER'
			END DATEPICKER
		ElseIf	HMG_UPPER (Line) = 'END TEXTBOX'
			END TEXTBOX
		ElseIf	HMG_UPPER (Line) = 'END EDITBOX'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				IF HMG_UPPER ( ALLTRIM( CURRENTHSCROLLBAR ) ) == '.T.'
					HSCROLLBAR .T.
				ELSE
					HSCROLLBAR .F.
				ENDIF

				IF HMG_UPPER ( ALLTRIM( CURRENTVSCROLLBAR ) ) == '.T.'
					VSCROLLBAR .T.
				ELSE
					VSCROLLBAR .F.
				ENDIF

				END EDITBOX

			endif

		ElseIf	HMG_UPPER (Line) = 'END LABEL'
			ACTION SelectControl( This.Name )
			END LABEL
		ElseIf	HMG_UPPER (Line) = 'END BROWSE'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END BROWSE

			endif

		ElseIf	HMG_UPPER (Line) = 'END RADIOGROUP'

			aTemp := StringToArray ( CurrentOptions )

			DEFINE RADIOGROUP &Name
				WIDTH CurrentWidth
				ROW CurrentRow
				COL CurrentCol
				PARENT &DesignForm
				OPTIONS aTemp
				ON CHANGE SelectControl (This.Name)
				FONTNAME CurrentFontName
				FONTSIZE CurrentFontSize
				BACKCOLOR &CurrentBackColor
				FONTCOLOR &CurrentFontColor
				SPACING CurrentSpacing

				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

				if ALLTRIM(HMG_UPPER(CurrentHorizontal)) == '.T.'
					HORIZONTAL .T.
				else
					HORIZONTAL .F.
				endif

			END RADIOGROUP

			__MVPUBLIC ( Name + 'Options' )
			__MVPUT( Name + 'Options' , CurrentOptions )

		ElseIf	HMG_UPPER (Line) = 'END FRAME'

			if empty ( currentcaption )
				FONTSIZE 1
			endif

			END FRAME
		ElseIf	HMG_UPPER (Line) = 'END ANIMATEBOX'
			END ANIMATEBOX

		ElseIf	HMG_UPPER (Line) = 'END HYPERLINK'
			END HYPERLINK

			w := GetControlIndex ( Name , DesignForm )
			macrovar := 'SelectControl ('+ chr(34) + Name + chr(34) + ')'
			_HMG_SYSDATA [ 6 ] [w] := { || &macrovar }
			_HMG_SYSDATA [ 39 ] [w] := 6

			RedrawWindow ( GetControlHandle ( Name , DesignForm ) )

		ElseIf	HMG_UPPER (Line) = 'END MONTHCALENDAR'
			END MONTHCALENDAR

		ElseIf	HMG_UPPER (Line) = 'END RICHEDITBOX'

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(8) + Line + CRLF

			else

				END RICHEDITBOX

			endif

		ElseIf	HMG_UPPER (Line) = 'END PROGRESSBAR'

			@ CurrentRow , CurrentCol LABEL &Name ;
				OF &DesignForm ;
				VALUE Name ACTION SelectControl (This.Name) ;
				WIDTH if ( CurrentWidth == -1 , 120 , CurrentWidth ) ;
				HEIGHT if ( CurrentHeight == -1 , 25 , CurrentHeight ) ;
				BORDER ;
				BACKCOLOR &CurrentBackColor ;
				FONTCOLOR &CurrentFontColor

			w := GetControlIndex ( Name , DesignForm )
			_HMG_SYSDATA [ 39 ] [w] := 2

			CurrentWidth	:= -1
			CurrentHeight	:= -1

		ElseIf	HMG_UPPER (Line) = 'END PLAYER'

			@ CurrentRow , CurrentCol LABEL &Name ;
				OF &DesignForm ;
				VALUE Name ACTION SelectControl (This.Name) ;
				WIDTH if ( CurrentWidth == -1 , 120 , CurrentWidth ) HEIGHT if ( CurrentHeight == -1 , 120 , CurrentHeight ) ;
				BORDER

			w := GetControlIndex ( Name , DesignForm )
			_HMG_SYSDATA [ 39 ] [w] := 3

			CurrentWidth	:= -1
			CurrentHeight	:= -1

		ElseIf	HMG_UPPER (Line) = 'END ACTIVEX'

			@ CurrentRow , CurrentCol LABEL &Name ;
				OF &DesignForm ;
				VALUE Name ACTION SelectControl (This.Name) ;
				WIDTH if ( CurrentWidth == -1 , 120 , CurrentWidth ) HEIGHT if ( CurrentHeight == -1 , 120 , CurrentHeight ) ;
				BORDER

			w := GetControlIndex ( Name , DesignForm )
			_HMG_SYSDATA [ 39 ] [w] := 7

			CurrentWidth	:= -1
			CurrentHeight	:= -1


		ElseIf	HMG_UPPER (Line) = 'END IPADDRESS'

			@ CurrentRow , CurrentCol LABEL &Name ;
				OF &DesignForm ;
				VALUE Name ACTION SelectControl (This.Name) ;
				WIDTH if ( CurrentWidth == -1 , 120 , CurrentWidth ) HEIGHT if ( CurrentHeight == -1 , 24 , CurrentHeight ) ;
				BORDER

			w := GetControlIndex ( Name , DesignForm )
			_HMG_SYSDATA [ 39 ] [w] := 4

			SetProperty ( DesignForm , Name , 'FontName' , CurrentFontName )
			SetProperty ( DesignForm , Name , 'FontSize' , VAL ( CurrentFontSize ) )

			SetProperty ( DesignForm , Name , 'FontBold' , if ( ALLTRIM(HMG_UPPER(CurrentFontBold )) == '.T.' , .T. , .F. ) )
			SetProperty ( DesignForm , Name , 'FontItalic' , if ( ALLTRIM(HMG_UPPER(CurrentFontItalic )) == '.T.' , .T. , .F. ) )
			SetProperty ( DesignForm , Name , 'FontUnderLine' , if ( ALLTRIM(HMG_UPPER(CurrentFontUnderLine )) == '.T.' , .T. , .F. ) )
			SetProperty ( DesignForm , Name , 'FontStrikeout' , if ( ALLTRIM(HMG_UPPER(CurrentFontStrikeout )) == '.T.' , .T. , .F. ) )

			CurrentWidth	:= -1
			CurrentHeight	:= -1



		///////////////////////////////////////////////////////////////
		// ROWSOURCE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ROWSOURCE'

			CurrentRowSource := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ROWSOURCE ' + CurrentRowSource + CRLF

				__MVPUT( Name + 'ROWSOURCE' , CurrentRowSource )

			else

				__MVPUT( Name + 'ROWSOURCE' , CurrentRowSource )

			endif

		///////////////////////////////////////////////////////////////
		// COLUMNFIELDS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COLUMNFIELDS'

			CurrentColumnFields := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COLUMNFIELDS ' + CurrentColumnFields + CRLF

				__MVPUT( Name + 'COLUMNFIELDS' , CurrentColumnFields )

			else

				__MVPUT( Name + 'COLUMNFIELDS' , CurrentColumnFields )

			endif

		///////////////////////////////////////////////////////////////
		// ALLOWAPPEND PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ALLOWAPPEND'

			CurrentAllowAppend := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWAPPEND ' + CurrentAllowAppend + CRLF

				__MVPUT( Name + 'ALLOWAPPEND' , CurrentAllowAppend )

			else

				__MVPUT( Name + 'ALLOWAPPEND' , CurrentAllowAppend )

			endif

		///////////////////////////////////////////////////////////////
		// ALLOWDELETE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ALLOWDELETE'

			CurrentAllowDelete := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWDELETE ' + CurrentAllowDelete + CRLF

				__MVPUT( Name + 'ALLOWDELETE' , CurrentAllowDelete )

			else

				__MVPUT( Name + 'ALLOWDELETE' , CurrentAllowDelete )

			endif


		///////////////////////////////////////////////////////////////
		// BUFFERED PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'BUFFERED'

			CurrentBuffered := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BUFFERED ' + CurrentBuffered + CRLF

				__MVPUT( Name + 'BUFFERED' , CurrentBuffered )

			else

				__MVPUT( Name + 'BUFFERED' , CurrentBuffered )

			endif

		///////////////////////////////////////////////////////////////
		// DYNAMICDISPLAY PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DYNAMICDISPLAY'

			CurrentDynamicDisplay := ALLTRIM(HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DYNAMICDISPLAY ' + CurrentDynamicDisplay + CRLF

				__MVPUT( Name + 'DYNAMICDISPLAY' , CurrentDynamicDisplay )

			else

				__MVPUT( Name + 'DYNAMICDISPLAY' , CurrentDynamicDisplay )

			endif


		///////////////////////////////////////////////////////////////
		// WHEN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WHEN'

			CurrentWhen := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WHEN ' + CurrentWhen + CRLF

				__MVPUT( Name + 'WHEN' , CurrentWhen )

			else

				__MVPUT( Name + 'WHEN' , CurrentWhen )

			endif

		///////////////////////////////////////////////////////////////
		// DYNAMICBACKCOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DYNAMICBACKCOLOR'

			CurrentDynamicBackColor := ALLTRIM(HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DYNAMICBACKCOLOR ' + CurrentDynamicBackColor + CRLF

				__MVPUT( Name + 'DYNAMICBACKCOLOR' , CurrentDynamicBackColor )

			else

				__MVPUT( Name + 'DYNAMICBACKCOLOR' , CurrentDynamicBackColor )

			endif

		///////////////////////////////////////////////////////////////
		// DYNAMICFORECOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DYNAMICFORECOLOR'

			CurrentDynamicForeColor := ALLTRIM(HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DYNAMICFORECOLOR ' + CurrentDynamicForeColor + CRLF

				__MVPUT( Name + 'DYNAMICFORECOLOR' , CurrentDynamicForeColor )

			else

				__MVPUT( Name + 'DYNAMICFORECOLOR' , CurrentDynamicForeColor )

			endif

		///////////////////////////////////////////////////////////////
		// INPUTITEMS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'INPUTITEMS'

			CurrentInputItems := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'INPUTITEMS ' + CurrentInputItems + CRLF

				__MVPUT( Name + 'INPUTITEMS' , CurrentInputItems )

			else

				__MVPUT( Name + 'INPUTITEMS' , CurrentInputItems )

			endif

		///////////////////////////////////////////////////////////////
		// DISPLAYITEMS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DISPLAYITEMS'

			CurrentDisplayItems := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DISPLAYITEMS ' + CurrentDisplayItems + CRLF

				__MVPUT( Name + 'DISPLAYITEMS' , CurrentDisplayItems )

			else

				__MVPUT( Name + 'DISPLAYITEMS' , CurrentDisplayItems )

			endif

		///////////////////////////////////////////////////////////////
		// COLUMNWHEN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COLUMNWHEN'

			CurrentColumnWhen := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COLUMNWHEN ' + CurrentColumnWhen + CRLF

				__MVPUT( Name + 'COLUMNWHEN' , CurrentColumnWhen )

			else

				__MVPUT( Name + 'COLUMNWHEN' , CurrentColumnWhen )

			endif

		///////////////////////////////////////////////////////////////
		// COLUMNVALID PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COLUMNVALID'

			CurrentColumnValid := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COLUMNVALID ' + CurrentColumnValid + CRLF

				__MVPUT( Name + 'COLUMNVALID' , CurrentColumnValid )

			else

				__MVPUT( Name + 'COLUMNVALID' , CurrentColumnValid )

			endif

		///////////////////////////////////////////////////////////////
		// COLUMNCONTROLS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COLUMNCONTROLS'

			CurrentColumnControls := ALLTRIM(HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COLUMNCONTROLS ' + CurrentColumnControls + CRLF

				__MVPUT( Name + 'COLUMNCONTROLS' , CurrentColumnControls )

			else

				__MVPUT( Name + 'COLUMNCONTROLS' , CurrentColumnControls )

			endif

		///////////////////////////////////////////////////////////////
		// TODAY PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOTODAY '

			CurrentToday := HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOTODAY ' + CurrentToday + CRLF

				if ALLTRIM(HMG_UPPER(CurrentToday)) == '.T.'
					__MVPUT( Name + 'Today' , '.F.' )
				else
					__MVPUT( Name + 'Today' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentToday)) == '.T.'
					__MVPUT( Name + 'Today' , '.F.' )
					NOTODAY .T.
				else
					__MVPUT( Name + 'Today' , '.T.' )
					NOTODAY .F.
				endif

			endif

		///////////////////////////////////////////////////////////////
		// TODAYCIRCLE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOTODAYCIRCLE'

			CurrentTodayCircle := HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOTODAYCIRCLE ' + CurrentTodayCircle + CRLF

				if ALLTRIM(HMG_UPPER(CurrentTodayCircle)) == '.T.'
					__MVPUT( Name + 'TodayCircle' , '.F.' )
				else
					__MVPUT( Name + 'TodayCircle' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentTodayCircle)) == '.T.'
					__MVPUT( Name + 'TodayCircle' , '.F.' )
					NOTODAYCIRCLE .T.
				else
					__MVPUT( Name + 'TodayCircle' , '.T.' )
					NOTODAYCIRCLE .F.
				endif

			endif

		///////////////////////////////////////////////////////////////
		// WEEKNUMBERS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WEEKNUMBERS'

			CurrentWeekNumbers := HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WEEKNUMBERS ' + CurrentWeekNumbers + CRLF

				if ALLTRIM(HMG_UPPER(CurrentWeekNumbers)) == '.T.'
					__MVPUT( Name + 'WeekNumbers' , '.T.' )
				else
					__MVPUT( Name + 'WeekNumbers' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentWeekNumbers)) == '.T.'
					__MVPUT( Name + 'WeekNumbers' , '.T.' )
					WEEKNUMBERS .T.
				else
					__MVPUT( Name + 'WeekNumbers' , '.F.' )
					WEEKNUMBERS .F.
				endif

			endif

		///////////////////////////////////////////////////////////////
		// AUTOSIZEWINDOW PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOAUTOSIZEWINDOW'

			CurrentMediaProp := HB_USUBSTR ( Line , 18 , HMG_LEN (Line) - 17 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOAUTOSIZEWINDOW ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'AutoSizeWindow' , '.F.' )
				else
					__MVPUT( Name + 'AutoSizeWindow' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'AutoSizeWindow' , '.F.' )
				else
					__MVPUT( Name + 'AutoSizeWindow' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// AUTOSIZEMOVIE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOAUTOSIZEMOVIE'

			CurrentMediaProp := HB_USUBSTR ( Line , 17 , HMG_LEN (Line) - 16 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOAUTOSIZEMOVIE ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'AutoSizeMovie' , '.F.' )
				else
					__MVPUT( Name + 'AutoSizeMovie' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'AutoSizeMovie' , '.F.' )
				else
					__MVPUT( Name + 'AutoSizeMovie' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// ERRORDLG PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOERRORDLG'

			CurrentMediaProp := HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOERRORDLG ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ErrorDlg' , '.F.' )
				else
					__MVPUT( Name + 'ErrorDlg' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ErrorDlg' , '.F.' )
				else
					__MVPUT( Name + 'ErrorDlg' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// MENU PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOMENU'

			CurrentMediaProp := HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOMENU ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Menu' , '.F.' )
				else
					__MVPUT( Name + 'Menu' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Menu' , '.F.' )
				else
					__MVPUT( Name + 'Menu' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// OPEN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOOPEN'

			CurrentMediaProp := HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOOPEN ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Open' , '.F.' )
				else
					__MVPUT( Name + 'Open' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Open' , '.F.' )
				else
					__MVPUT( Name + 'Open' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// PLAYBAR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOPLAYBAR'

			CurrentMediaProp := HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOPLAYBAR ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'PlayBar' , '.F.' )
				else
					__MVPUT( Name + 'PlayBar' , '.T.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'PlayBar' , '.F.' )
				else
					__MVPUT( Name + 'PlayBar' , '.T.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// SHOWALL PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWALL'

			CurrentMediaProp := HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWALL ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowAll' , '.T.' )
				else
					__MVPUT( Name + 'ShowAll' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowAll' , '.T.' )
				else
					__MVPUT( Name + 'ShowAll' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// BREAK PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'BREAK'

			CurrentMediaProp := HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BREAK ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'Break' , '.T.' )
				else
					__MVPUT( Name + 'Break' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// SHOWMODE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWMODE'

			CurrentMediaProp := HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWMODE ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowMode' , '.T.' )
				else
					__MVPUT( Name + 'ShowMode' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowMode' , '.T.' )
				else
					__MVPUT( Name + 'ShowMode' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// SHOWNAME PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWNAME'

			CurrentMediaProp := HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWNAME ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowName' , '.T.' )
				else
					__MVPUT( Name + 'ShowName' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowName' , '.T.' )
				else
					__MVPUT( Name + 'ShowName' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// SHOWPOSITION PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWPOSITION'

			CurrentMediaProp := HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWPOSITION ' + CurrentMediaProp + CRLF

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowPosition' , '.T.' )
				else
					__MVPUT( Name + 'ShowPosition' , '.F.' )
				endif

			else

				if ALLTRIM(HMG_UPPER(CurrentMediaProp)) == '.T.'
					__MVPUT( Name + 'ShowPosition' , '.T.' )
				else
					__MVPUT( Name + 'ShowPosition' , '.F.' )
				endif

			endif

		///////////////////////////////////////////////////////////////
		// ROW PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ROW'

			CurrentRow := VAL ( HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ROW Nil' + CRLF

				__MVPUT ( Name + 'Row' , 'Nil' )

			else

				ROW CurrentRow

			endif

		///////////////////////////////////////////////////////////////
		// COL PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'COL'

			CurrentCol := VAL ( HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'COL Nil' + CRLF

				__MVPUT ( Name + 'Col' , 'Nil' )

			else

				COL CurrentCol

			endif





		///////////////////////////////////////////////////////////////
		// LOCKCOLUMNS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'LOCKCOLUMNS '

			CurrentLockColumns := VAL ( HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'LOCKCOLUMNS ' + ALLTRIM ( STR ( CurrentLockColumns ) ) + CRLF

			endif

			__MVPUT ( Name + 'LockColumns' , ALLTRIM ( STR ( CurrentLockColumns ) ) )


		///////////////////////////////////////////////////////////////
		// WIDTH PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WIDTH '

			CurrentWidth := VAL ( HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WIDTH ' + ALLTRIM ( STR ( CurrentWidth ) ) + CRLF

				__MVPUT ( Name + 'Width' , ALLTRIM ( STR ( CurrentWidth ) ) )

			else

				WIDTH CurrentWidth

			endif

		///////////////////////////////////////////////////////////////
		// HEIGHT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HEIGHT'

			CurrentHeight := VAL ( HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

			if _hmgide_SplitBoxProcessing == .T.

				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEIGHT ' + ALLTRIM ( STR ( CurrentHeight ) ) + CRLF

				__MVPUT ( Name + 'Height' , ALLTRIM ( STR ( CurrentHeight ) ) )

			else

				HEIGHT CurrentHeight

			endif

		///////////////////////////////////////////////////////////////
		// PROGID PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'PROGID'

			CurrentProgId := HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 )


			if	HB_ULEFT ( CurrentProgId , 1 ) == '"' ;
				.or. ;
				HB_ULEFT ( CurrentProgId , 1 ) == "'"

				CurrentProgId := HB_URIGHT (CurrentProgId , HMG_LEN(CurrentProgId) - 1 )

			EndIf

			if	HB_URIGHT ( CurrentProgId , 1 ) == '"' ;
				.or. ;
				HB_URIGHT ( CurrentProgId , 1 ) == "'"

				CurrentProgId := HB_ULEFT (CurrentProgId , HMG_LEN(CurrentProgId) - 1 )

			EndIf

			__MVPUT( Name + 'PROGID' , CurrentProgId )

		///////////////////////////////////////////////////////////////
		// CAPTION PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'CAPTION'

			If ControlType == 'BUTTON'

				CurrentCaption := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				If   HMG_UPPER(CurrentCaption) == "NIL"
                                     CurrentCaption := ""
                                EndIf

				__MVPUT( Name + 'Caption' , CurrentCaption )

				CAPTION CurrentCaption

			ElseIf ControlType == 'CHECKBOX'

				CurrentCaption := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				__MVPUT( Name + 'Caption' , CurrentCaption )

				CAPTION CurrentCaption

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentCaption := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				__MVPUT( Name + 'Caption' , CurrentCaption )

				CAPTION CurrentCaption

			ElseIf ControlType == 'FRAME'

				CurrentCaption := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_URIGHT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentCaption , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentCaption , 1 ) == "'"

					CurrentCaption := HB_ULEFT (CurrentCaption , HMG_LEN(CurrentCaption) - 1 )

				EndIf

				if ALLTRIM(HMG_UPPER(CurrentCaption)) == 'NIL'

					__MVPUT( Name + 'Caption' , "" )
					CurrentCaption := ""
					CAPTION ""

				else

					__MVPUT( Name + 'Caption' , CurrentCaption )
					CAPTION CurrentCaption

				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// TOP PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'TOP'

			If ControlType == 'SLIDER'

				CurrentTop := ALLTRIM(HB_USUBSTR ( Line , 5 , HMG_LEN (Line) - 4 ) )

				if ALLTRIM(HMG_UPPER(CurrentTop)) == ".T."
					__MVPUT( Name + 'TickMarks' , 'TOP' )
					TOP .T.
				endif

			EndIf


		///////////////////////////////////////////////////////////////
		// CASECONVERT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'CASECONVERT LOWER'

			__MVPUT( Name + 'CaseConvert' , 'LOWER' )

		ElseIf	HMG_UPPER (Line) = 'CASECONVERT UPPER'

			__MVPUT( Name + 'CaseConvert' , 'UPPER' )

		ElseIf	HMG_UPPER (Line) = 'CASECONVERT NONE'

			__MVPUT( Name + 'CaseConvert' , 'NONE' )

		///////////////////////////////////////////////////////////////
		// UPPERCASE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'UPPERCASE'

			If ControlType == 'TEXTBOX'

				CurrentUpperCase := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if ALLTRIM(HMG_UPPER(CurrentUpperCase)) == ".T."
					__MVPUT( Name + 'CaseConvert' , 'UPPER' )
				endif

			EndIf


		///////////////////////////////////////////////////////////////
		// DRAGITEMS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DRAGITEMS'

			CurrentDragItems := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

			if _hmgide_SplitBoxProcessing == .T.
				_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DRAGITEMS ' + CurrentDragItems + CRLF
			endif

			if ALLTRIM(HMG_UPPER(CurrentDragItems)) == ".T."
				__MVPUT( Name + 'DragItems' , '.T.' )
			else
				__MVPUT( Name + 'DragItems' , '.F.' )
			endif

		///////////////////////////////////////////////////////////////
		// LOWERCASE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'LOWERCASE'

			If ControlType == 'TEXTBOX'

				CurrentLowerCase := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if ALLTRIM(HMG_UPPER(CurrentLowerCase)) == ".T."
					__MVPUT( Name + 'CaseConvert' , 'LOWER' )
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// BOTH PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'BOTH'

			If ControlType == 'SLIDER'

				CurrentBoth := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if ALLTRIM(HMG_UPPER(CurrentBoth)) == ".T."
					__MVPUT( Name + 'TickMarks' , 'BOTH' )
					BOTH .T.
				endif

			EndIf
		///////////////////////////////////////////////////////////////
		// NOTICKS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NOTICKS'

			If ControlType == 'SLIDER'

				CurrentNoticks := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if ALLTRIM(HMG_UPPER(CurrentNoTicks)) == ".T."
					__MVPUT( Name + 'TickMarks' , 'NONE' )
					NOTICKS .T.
				endif

			EndIf
		///////////////////////////////////////////////////////////////
		// LEFT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'LEFT'

			If ControlType == 'SLIDER'

				CurrentLeft := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if ALLTRIM(HMG_UPPER(CurrentLeft)) == ".T."
					__MVPUT( Name + 'TickMarks' , 'LEFT' )
					LEFT .T.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// VERTICAL PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VERTICAL'

			If ControlType == 'SLIDER'

				CurrentVertical := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if ALLTRIM(HMG_UPPER(CurrentVertical)) == ".T."
					__MVPUT( Name + 'Orientation' , 'VERTICAL' )
					VERTICAL .T.
				endif

			ElseIf ControlType == 'PROGRESSBAR'

				CurrentVertical := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if ALLTRIM(HMG_UPPER(CurrentVertical)) == ".T."
					__MVPUT( Name + 'Orientation' , 'VERTICAL' )
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// HORIZONTAL PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HORIZONTAL'

			If ControlType == 'RADIOGROUP'

				CurrentHorizontal := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if ALLTRIM(HMG_UPPER(CurrentHorizontal)) == ".T."

					__MVPUT( Name + 'Orientation' , 'HORIZONTAL' )
					HORIZONTAL .T.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ITEMSOURCE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ITEMSOURCE'

			If ControlType == 'COMBOBOX'

				CurrentItemSource := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMSOURCE ' + CurrentItemSource + CRLF
				endif

				__MVPUT( Name + 'ItemSource' , CurrentItemSource )

			EndIf

		///////////////////////////////////////////////////////////////
		// VALUESOURCE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VALUESOURCE'

			If ControlType == 'COMBOBOX'

				CurrentValueSource := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUESOURCE ' + CurrentValueSource + CRLF
				endif

				__MVPUT( Name + 'ValueSource' , CurrentValueSource )

			EndIf

		///////////////////////////////////////////////////////////////
		// FIELD PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FIELD '

			If ControlType == 'CHECKBOX'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Field' , CurrentField )

			ElseIf ControlType == 'DATEPICKER'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Field' , CurrentField )

			ElseIf ControlType == 'TEXTBOX'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Field' , CurrentField )

			ElseIf ControlType == 'EDITBOX'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FIELD ' + CurrentField + CRLF
				endif

				__MVPUT( Name + 'Field' , CurrentField )

			ElseIf ControlType == 'RICHEDITBOX'

				CurrentField := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FIELD ' + CurrentField + CRLF
				endif

				__MVPUT( Name + 'Field' , CurrentField )

			EndIf

		///////////////////////////////////////////////////////////////
		// ACTION EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ACTION'

			If ControlType == 'BUTTON'

				CurrentAction := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Action' , CurrentAction )

			ElseIf ControlType == 'IMAGE'

				CurrentAction := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Action' , CurrentAction )

			ElseIf ControlType == 'LABEL'

				CurrentAction := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Action' , CurrentAction )

			EndIf

		///////////////////////////////////////////////////////////////
		// ITEMS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ITEMS'

			If ControlType == 'LISTBOX'

				CurrentItems := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMS ' + CurrentItems + CRLF
				endif

				__MVPUT( Name + 'Items' , CurrentItems )

			ElseIf ControlType == 'COMBOBOX'

				CurrentItems := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMS ' + CurrentItems + CRLF
				endif

				__MVPUT( Name + 'Items' , CurrentItems )

			ElseIf ControlType == 'GRID'

				CurrentItems := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMS ' + CurrentItems + CRLF
				endif

				__MVPUT( Name + 'Items' , CurrentItems )

			EndIf

		///////////////////////////////////////////////////////////////
		// SHOWHEADERS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SHOWHEADERS'

			If ControlType == 'GRID'

				CurrentShowHeaders := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SHOWHEADERS ' + CurrentShowHeaders + CRLF
				endif

				__MVPUT( Name + 'ShowHeaders' , CurrentShowHeaders )

			EndIf

		///////////////////////////////////////////////////////////////
		// RANGEMAX PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'RANGEMAX'

			If ControlType == 'SLIDER'

				CurrentRangeMax := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMax' , CurrentRangeMax )

			ElseIf ControlType == 'SPINNER'

				CurrentRangeMax := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMax' , CurrentRangeMax )

			ElseIf ControlType == 'PROGRESSBAR'

				CurrentRangeMax := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMax' , CurrentRangeMax )

			EndIf

		///////////////////////////////////////////////////////////////
		// RANGEMIN PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'RANGEMIN'

			If ControlType == 'SLIDER'

				CurrentRangeMin := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMin' , CurrentRangeMin )

			ElseIf ControlType == 'SPINNER'

				CurrentRangeMin := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMin' , CurrentRangeMin )

			ElseIf ControlType == 'PROGRESSBAR'

				CurrentRangeMin := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'RangeMin' , CurrentRangeMin )

			EndIf

		///////////////////////////////////////////////////////////////
		// PICTURE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'PICTURE'

			If	ControlType == 'BUTTON'

				CurrentPicture := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_URIGHT ( CurrentPicture , HMG_LEN( CurrentPicture ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_ULEFT ( CurrentPicture , HMG_LEN( CurrentPicture ) - 1 )

				EndIf

				if ALLTRIM ( HMG_UPPER (CurrentPicture) ) == 'NIL'
					CurrentPicture := ''
				endif

				__MVPUT( Name + 'Picture' , CurrentPicture )

			ElseIf	ControlType == 'CHECKBUTTON'

				CurrentPicture := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_URIGHT ( CurrentPicture , HMG_LEN( CurrentPicture ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_ULEFT ( CurrentPicture , HMG_LEN( CurrentPicture ) - 1 )

				EndIf

				if ALLTRIM ( HMG_UPPER (CurrentPicture) ) == 'NIL'
					CurrentPicture := ''
				endif

				__MVPUT( Name + 'Picture' , CurrentPicture )

			ElseIf ControlType == 'IMAGE'

				CurrentPicture := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_URIGHT (CurrentPicture , HMG_LEN(CurrentPicture) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentPicture , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentPicture , 1 ) == "'"

					CurrentPicture := HB_ULEFT (CurrentPicture , HMG_LEN(CurrentPicture) - 1 )

				EndIf

				__MVPUT( Name + 'Picture' , CurrentPicture )

			EndIf

		///////////////////////////////////////////////////////////////
		// PICTALIGNMENT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'PICTALIGNMENT'

			If	ControlType == 'BUTTON'

				CurrentPictAlignment := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )

				__MVPUT( Name + 'PictAlignment' , CurrentPictAlignment )

			EndIf

		///////////////////////////////////////////////////////////////
		// INCREMENT PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'INCREMENT'

			If ControlType == 'SPINNER'

				CurrentIncrement := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				__MVPUT( Name + 'Increment' , CurrentIncrement )

			EndIf

		///////////////////////////////////////////////////////////////
		// MAXLENGTH PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'MAXLENGTH'

			If ControlType == 'TEXTBOX'

				CurrentMaxLength := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				__MVPUT( Name + 'MaxLength' , CurrentMaxLength )

			ElseIf ControlType == 'EDITBOX'

				CurrentMaxLength := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'MAXLENGTH ' + CurrentMaxLength + CRLF
				endif

				__MVPUT( Name + 'MaxLength' , CurrentMaxLength )

			ElseIf ControlType == 'RICHEDITBOX'

				CurrentMaxLength := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'MAXLENGTH ' + CurrentMaxLength + CRLF
				endif

				__MVPUT( Name + 'MaxLength' , CurrentMaxLength )

			EndIf

		///////////////////////////////////////////////////////////////
		// VALUE PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'VALUE'

			If ControlType == 'DATEPICKER'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'TEXTBOX'

				QuoteFlag := .F.

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

					QuoteFlag := .T.

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

					QuoteFlag := .T.

				EndIf

				if	QuoteFlag == .T.

					__MVPUT( Name + 'Value' , CurrentValue )

				Elseif 	HMG_UPPER(ALLTRIM(CurrentValue)) == 'NIL'

					__MVPUT( Name + 'Value' , '' )

				Else

					__MVPUT( Name + 'Value' , CurrentValue )

				EndIf

			ElseIf ControlType == 'EDITBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + '"' + CurrentValue + '"' + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'LABEL'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				__MVPUT( Name + 'Value' , CurrentValue )

				VALUE CurrentValue

			ElseIf ControlType == 'BROWSE'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + CurrentValue + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'GRID'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + CurrentValue + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'HYPERLINK'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				__MVPUT( Name + 'Value' , CurrentValue )

				VALUE CurrentValue

			ElseIf ControlType == 'RICHEDITBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if	HB_ULEFT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_URIGHT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentValue , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentValue , 1 ) == "'"

					CurrentValue := HB_ULEFT (CurrentValue , HMG_LEN(CurrentValue) - 1 )

				EndIf

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + '"' + CurrentValue + '"' + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'MONTHCALENDAR'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'IPADDRESS'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'LISTBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + CurrentValue + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'COMBOBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALUE ' + CurrentValue + CRLF
				endif

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'CHECKBOX'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'SPINNER'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'SLIDER'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'RADIOGROUP'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )

			ElseIf ControlType == 'PROGRESSBAR'

				CurrentValue := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				__MVPUT( Name + 'Value' , CurrentValue )


			EndIf

		///////////////////////////////////////////////////////////////
		// WORKAREA PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WORKAREA'

			If ControlType == 'BROWSE'

				CurrentWorkArea := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WORKAREA ' + CurrentWorkArea + CRLF
				endif

				__MVPUT( Name + 'WorkArea' , CurrentWorkArea )

			EndIf

		///////////////////////////////////////////////////////////////
		// FIELDS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FIELDS'

			If ControlType == 'BROWSE'

				CurrentFields := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FIELDS ' + CurrentFields + CRLF
				endif

				__MVPUT( Name + 'Fields' , CurrentFields )

			EndIf

		///////////////////////////////////////////////////////////////
		// VALID PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VALID '

			If ControlType == 'BROWSE'

				CurrentValid := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALID ' + CurrentValid + CRLF
				endif

				__MVPUT( Name + 'Valid' , CurrentValid )

			EndIf

		///////////////////////////////////////////////////////////////
		// VALIDMESSAGES PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VALIDMESSAGES'

			If ControlType == 'BROWSE'

				CurrentValidMessages := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VALIDMESSAGES ' + CurrentValidMessages + CRLF
				endif

				__MVPUT( Name + 'ValidMessages' , CurrentValidMessages )

			EndIf

		///////////////////////////////////////////////////////////////
		// LOCK PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'LOCK'

			If ControlType == 'BROWSE'

				CurrentLock := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'LOCK ' + CurrentLock + CRLF
				endif

				__MVPUT( Name + 'Lock' , CurrentLock )

			EndIf

		///////////////////////////////////////////////////////////////
		// DISABLEDBACKCOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DISABLEDBACKCOLOR'

			If ControlType == 'EDITBOX'

				CurrentDisabledBackColor := ALLTRIM(HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DISABLEDBACKCOLOR ' + CurrentDisabledBackColor + CRLF
				endif

				__MVPUT( Name + 'DisabledBackColor' , CurrentDisabledBackColor )


			ElseIf ControlType == 'TEXTBOX'

				CurrentDisabledBackColor := ALLTRIM(HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 ) )

				__MVPUT( Name + 'DisabledBackColor' , CurrentDisabledBackColor )

			EndIf

		///////////////////////////////////////////////////////////////
		// DISABLEDFONTCOLOR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DISABLEDFONTCOLOR'

			If ControlType == 'EDITBOX'

				CurrentDisabledFontColor := ALLTRIM(HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DISABLEDFONTCOLOR ' + CurrentDisabledFontColor + CRLF
				endif

				__MVPUT( Name + 'DisabledFontColor' , CurrentDisabledFontColor )

			ElseIf ControlType == 'TEXTBOX'

				CurrentDisabledFontColor := ALLTRIM(HB_USUBSTR ( Line , 19 , HMG_LEN (Line) - 18 ) )

				__MVPUT( Name + 'DisabledFontColor' , CurrentDisabledFontColor )

			EndIf


		///////////////////////////////////////////////////////////////
		// VSCROLLBAR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'VSCROLLBAR'

			If ControlType == 'BROWSE'

				CurrentvScrollBar := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VSCROLLBAR ' + CurrentvScrollBar + CRLF
				endif

				__MVPUT( Name + 'vScrollBar' , CurrentvScrollBar )

			ElseIf ControlType == 'EDITBOX'

				CurrentvScrollBar := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VSCROLLBAR ' + CurrentvScrollBar + CRLF
				endif

				__MVPUT( Name + 'vScrollBar' , CurrentvScrollBar )

			EndIf

		///////////////////////////////////////////////////////////////
		// HSCROLLBAR PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HSCROLLBAR'

			If ControlType == 'EDITBOX'

				CurrenthScrollBar := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HSCROLLBAR ' + CurrenthScrollBar + CRLF
				endif

				__MVPUT( Name + 'hScrollBar' , CurrenthScrollBar )

			EndIf

		///////////////////////////////////////////////////////////////
		// WIDTHS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'WIDTHS'

			If ControlType == 'BROWSE'

				CurrentWidths := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WIDTHS ' + CurrentWidths + CRLF
				endif

				__MVPUT( Name + 'Widths' , CurrentWidths )

			ElseIf ControlType == 'GRID'

				CurrentWidths := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'WIDTHS ' + CurrentWidths + CRLF
				endif

				__MVPUT( Name + 'Widths' , CurrentWidths )

			EndIf

		///////////////////////////////////////////////////////////////
		// ITEMCOUNT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ITEMCOUNT'

			If ControlType == 'GRID'

				CurrentItemCount := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ITEMCOUNT ' + CurrentItemCount + CRLF
				endif

				__MVPUT( Name + 'ItemCount' , CurrentItemCount )

			EndIf


		///////////////////////////////////////////////////////////////
		// HEADERS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HEADERS'

			If ControlType == 'BROWSE'

				CurrentHeaders := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEADERS ' + CurrentHeaders + CRLF
				endif

				__MVPUT( Name + 'Headers' , CurrentHeaders )

			ElseIf ControlType == 'GRID'

				CurrentHeaders := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEADERS ' + CurrentHeaders + CRLF
				endif

				__MVPUT( Name + 'Headers' , CurrentHeaders )

			EndIf


		///////////////////////////////////////////////////////////////
		// HEADERIMAGES PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'HEADERIMAGES'

			If ControlType == 'BROWSE'

				CurrentHeaderImages := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEADERIMAGES ' + CurrentHeaderImages + CRLF
				endif

				__MVPUT( Name + 'HeaderImages' , CurrentHeaderImages )

			ElseIf ControlType == 'GRID'

				CurrentHeaderImages := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HEADERIMAGES ' + CurrentHeaderImages + CRLF
				endif

				__MVPUT( Name + 'HeaderImages' , CurrentHeaderImages )

			EndIf


		///////////////////////////////////////////////////////////////
		// OPTIONS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'OPTIONS'

			If ControlType == 'RADIOGROUP'

				CurrentOptions := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				__MVPUT( Name + 'Options' , CurrentOptions )

			EndIf

		///////////////////////////////////////////////////////////////
		// FILE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FILE'

			If ControlType == 'ANIMATEBOX'

				CurrentFile := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if	HB_ULEFT ( CurrentFile , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFile , 1 ) == "'"

					CurrentFile := HB_URIGHT (CurrentFile , HMG_LEN(CurrentFile) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFile , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFile , 1 ) == "'"

					CurrentFile := HB_ULEFT (CurrentFile , HMG_LEN(CurrentFile) - 1 )

				EndIf

				__MVPUBLIC ( Name + 'File' )
				__MVPUT( Name + 'File' , CurrentFile )

			ElseIf ControlType == 'PLAYER'

				CurrentFile := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )

				if	HB_ULEFT ( CurrentFile , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFile , 1 ) == "'"

					CurrentFile := HB_URIGHT (CurrentFile , HMG_LEN(CurrentFile) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFile , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFile , 1 ) == "'"

					CurrentFile := HB_ULEFT (CurrentFile , HMG_LEN(CurrentFile) - 1 )

				EndIf

				__MVPUBLIC ( Name + 'File' )
				__MVPUT( Name + 'File' , CurrentFile )

			EndIf

		///////////////////////////////////////////////////////////////
		// ADDRESS PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ADDRESS'

			If ControlType == 'HYPERLINK'

				CurrentAddress := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentAddress , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentAddress , 1 ) == "'"

					CurrentAddress := HB_URIGHT (CurrentAddress , HMG_LEN(CurrentAddress) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentAddress , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentAddress , 1 ) == "'"

					CurrentAddress := HB_ULEFT (CurrentAddress , HMG_LEN(CurrentAddress) - 1 )

				EndIf

				__MVPUT( Name + 'Address' , CurrentAddress )

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTNAME PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTNAME'

			If ControlType == 'BUTTON'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf ControlType == 'LISTBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"'  + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"' + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf ControlType == 'GRID'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"' + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"'  + CurrentFontName + '"'  + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'BROWSE'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"' + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'FRAME'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				FONTNAME CurrentFontName

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTNAME ' + '"' + CurrentFontName + '"'  + CRLF
				else
					FONTNAME CurrentFontName
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontName := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				if	HB_ULEFT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_URIGHT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFontName , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFontName , 1 ) == "'"

					CurrentFontName := HB_ULEFT ( CurrentFontName , HMG_LEN( CurrentFontName ) - 1 )

				EndIf

				__MVPUT( Name + 'FontName' , CurrentFontName )

			EndIf

		///////////////////////////////////////////////////////////////
		// HELPID PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'HELPID'
			If ControlType == 'BUTTON'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'CHECKBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'LISTBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'CHECKBUTTON'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'GRID'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'SLIDER'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'SPINNER'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'IMAGE'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'DATEPICKER'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'TEXTBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'EDITBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'LABEL'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'IPADDRESS'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'BROWSE'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'RADIOGROUP'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'PLAYER'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'PROGRESSBAR'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'RICHEDITBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'HELPID ' + CurrentHelpId + CRLF
				endif

			ElseIf ControlType == 'MONTHCALENDAR'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'HYPERLINK'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			ElseIf ControlType == 'ANIMATEBOX'
				CurrentHelpId := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'HelpId' , CurrentHelpId )
			EndIf

		///////////////////////////////////////////////////////////////
		// BACKCOLOR PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'BACKCOLOR'
			If ControlType == 'CHECKBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			ElseIf ControlType == 'LISTBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'GRID'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'SLIDER'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			ElseIf ControlType == 'SPINNER'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			ElseIf ControlType == 'TEXTBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			ElseIf ControlType == 'EDITBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif


			ElseIf ControlType == 'LABEL'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			ElseIf ControlType == 'BROWSE'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'RADIOGROUP'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			ElseIf ControlType == 'FRAME'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			ElseIf ControlType == 'PROGRESSBAR'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			ElseIf ControlType == 'RICHEDITBOX'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'BACKCOLOR ' + CurrentBackColor + CRLF

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
						__MVPUT( Name + 'BackColor' , CurrentBackColor )
						BACKCOLOR &CurrentBackColor
					Else
						__MVPUT( Name + 'BackColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'HYPERLINK'
				CurrentBackColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentBackColor , 1 ) == '{'
					__MVPUT( Name + 'BackColor' , CurrentBackColor )
					BACKCOLOR &CurrentBackColor
				Else
					__MVPUT( Name + 'BackColor' , 'NIL' )
				endif
			EndIf
		///////////////////////////////////////////////////////////////
		// FONTCOLOR PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'FONTCOLOR'
			If ControlType == 'CHECKBOX'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif
			ElseIf ControlType == 'LISTBOX'

				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTCOLOR ' + CurrentFontColor + CRLF

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
						FONTCOLOR &CurrentFontColor
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'GRID'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTCOLOR ' + CurrentFontColor + CRLF

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
						FONTCOLOR &CurrentFontColor
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'SPINNER'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif
			ElseIf ControlType == 'TEXTBOX'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif
			ElseIf ControlType == 'EDITBOX'

				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTCOLOR ' + CurrentFontColor + CRLF

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
						FONTCOLOR &CurrentFontColor
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'LABEL'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif
			ElseIf ControlType == 'BROWSE'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTCOLOR ' + CurrentFontColor + CRLF

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				else

					if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
						__MVPUT( Name + 'FontColor' , CurrentFontColor )
						FONTCOLOR &CurrentFontColor
					else
						__MVPUT( Name + 'FontColor' , 'NIL' )
					endif

				endif

			ElseIf ControlType == 'RADIOGROUP'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif
			ElseIf ControlType == 'FRAME'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif
			ElseIf ControlType == 'HYPERLINK'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'FontColor' , CurrentFontColor )
					FONTCOLOR &CurrentFontColor
				else
					__MVPUT( Name + 'FontColor' , 'NIL' )
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// FORECOLOR PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'FORECOLOR'
			If ControlType == 'PROGRESSBAR'
				CurrentFontColor := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				if HB_ULEFT ( CurrentFontColor , 1 ) == '{'
					__MVPUT( Name + 'ForeColor' , CurrentFontColor )
				else
					__MVPUT( Name + 'ForeColor' , 'NIL' )
				endif
			endif

		///////////////////////////////////////////////////////////////
		// DISPLAYEDIT PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'DISPLAYEDIT'
			If ControlType == 'COMBOBOX'

				CurrentDisplayEdit := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )

				__MVPUT( Name + 'DisplayEdit' , CurrentDisplayEdit )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DISPLAYEDIT ' + CurrentDisplayEdit + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// DROPPEDWIDTH PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DROPPEDWIDTH'
			If ControlType == 'COMBOBOX'

				CurrentDroppedWidth := ALLTRIM(HB_USUBSTR ( Line , 14 , HMG_LEN (Line) - 13 ) )

				__MVPUT( Name + 'DroppedWidth' , CurrentDroppedWidth )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'DROPPEDWIDTH ' + CurrentDroppedWidth + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// JUSTIFY PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'JUSTIFY'
			If ControlType == 'GRID'
				CurrentJustify := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Justify' , CurrentJustify )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'JUSTIFY ' + CurrentJustify + CRLF
				endif

			ElseIf ControlType == 'BROWSE'
				CurrentJustify := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Justify' , CurrentJustify )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'JUSTIFY ' + CurrentJustify + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// IMAGE PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'IMAGE'
			If ControlType == 'GRID'
				CurrentImage := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )
				__MVPUT( Name + 'Image' , CurrentImage )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'IMAGE ' + CurrentImage + CRLF
				endif

			ElseIf ControlType == 'BROWSE'
				CurrentImage := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )
				__MVPUT( Name + 'Image' , CurrentImage )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'IMAGE ' + CurrentImage + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentImage := ALLTRIM(HB_USUBSTR ( Line , 7 , HMG_LEN (Line) - 6 ) )
				__MVPUT( Name + 'Image' , CurrentImage )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'IMAGE ' + CurrentImage + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// WRAP PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'WRAP'
			If ControlType == 'SPINNER'
				CurrentWrap := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )
				__MVPUT( Name + 'Wrap' , CurrentWrap )

			EndIf

		///////////////////////////////////////////////////////////////
		// CENTER PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'CENTER '
			If ControlType == 'ANIMATEBOX'
				CurrentCenter := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Center' , CurrentCenter )

			EndIf

		///////////////////////////////////////////////////////////////
		// READONLY PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'READONLY '
			If ControlType == 'SPINNER'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )
			ElseIf ControlType == 'TEXTBOX'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )
			ElseIf ControlType == 'RICHEDITBOX'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'READONLY ' + CurrentReadOnly + CRLF
				endif

			ElseIf ControlType == 'EDITBOX'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'READONLY ' + CurrentReadOnly + CRLF
				endif

			ElseIf ControlType == 'RADIOGROUP'
				CurrentReadOnly := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ReadOnly' , CurrentReadOnly )

			EndIf

		///////////////////////////////////////////////////////////////
		// READONLYFIELDS PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'READONLYFIELDS'
			If ControlType == 'BROWSE'
				CurrentReadOnlyFields := ALLTRIM(HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 ) )
				__MVPUT( Name + 'ReadOnlyFields' , CurrentReadOnlyFields )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'READONLYFIELDS ' + CurrentReadOnlyFields + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// STRETCH PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'STRETCH'
			If ControlType == 'IMAGE'
				CurrentStretch := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Stretch' , CurrentStretch )

			EndIf

		///////////////////////////////////////////////////////////////
		// FLAT PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'FLAT'
			If ControlType == 'BUTTON'
				CurrentFlat := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )
				__MVPUT( Name + 'Flat' , CurrentFlat )
				if ALLTRIM(HMG_UPPER(CurrentFlat)) == '.T.'
					FLAT .T.
				else
					FLAT .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// HANDCURSOR PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'HANDCURSOR'
			If ControlType == 'HYPERLINK'
				CurrentHandCursor := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'HandCursor' , CurrentHandCursor )
			EndIf

		///////////////////////////////////////////////////////////////
		// AUTOPLAY PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'AUTOPLAY'
			If ControlType == 'ANIMATEBOX'
				CurrentAutoPlay := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'AutoPlay' , CurrentAutoPlay )
			EndIf

		///////////////////////////////////////////////////////////////
		// SMOOTH PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'SMOOTH'
			If ControlType == 'PROGRESSBAR'
				CurrentSmooth := ALLTRIM ( HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Smooth' , CurrentSmooth )
			EndIf

		///////////////////////////////////////////////////////////////
		// AUTOSIZE PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'AUTOSIZE'
			If ControlType == 'LABEL'
				CurrentAutoSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'AutoSize' , CurrentAutoSize )
			ElseIf ControlType == 'HYPERLINK'
				CurrentAutoSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'AutoSize' , CurrentAutoSize )
			EndIf

		///////////////////////////////////////////////////////////////
		// PASSWORD PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'PASSWORD'
			If ControlType == 'TEXTBOX'
				CurrentPassword := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'Password' , CurrentPassword )
			EndIf

		///////////////////////////////////////////////////////////////
		// TABSTOP PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'TABSTOP'
			If ControlType == 'BUTTON'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'CHECKBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'LISTBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TABSTOP ' + CurrentTabStop + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TABSTOP ' + CurrentTabStop  + CRLF
				endif

			ElseIf ControlType == 'CHECKBUTTON'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'SLIDER'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'SPINNER'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'DATEPICKER'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'TEXTBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'EDITBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TABSTOP ' + CurrentTabStop + CRLF
				endif

			ElseIf ControlType == 'IPADDRESS'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'RADIOGROUP'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			ElseIf ControlType == 'RICHEDITBOX'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TABSTOP ' + CurrentTabStop + CRLF
				endif

			ElseIf ControlType == 'MONTHCALENDAR'
				CurrentTabStop := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'TabStop' , CurrentTabStop )
			EndIf

		///////////////////////////////////////////////////////////////
		// SHOWNONE PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'SHOWNONE'
			If ControlType == 'DATEPICKER'
				CurrentShowNone := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'ShowNone' , CurrentShowNone )
				if ALLTRIM(HMG_UPPER(CurrentShowNone)) == '.T.'
					SHOWNONE .T.
				else
					SHOWNONE .F.
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// UPDOWN PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'UPDOWN'
			If ControlType == 'DATEPICKER'
				CurrentUpDown := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'UpDown' , CurrentUpDown )
				if ALLTRIM(HMG_UPPER(CurrentUpDown)) == '.T.'
					UPDOWN .T.
				else
					UPDOWN .F.
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// RIGHTALIGN PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'RIGHTALIGN'
			If ControlType == 'DATEPICKER'
				CurrentRightAlign := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'RightAlign' , CurrentRightAlign )
				if ALLTRIM(HMG_UPPER(CurrentRightAlign)) == '.T.'
					RIGHTALIGN .T.
				else
					RIGHTALIGN .F.
				endif
			ElseIf ControlType == 'TEXTBOX'
				CurrentRightAlign := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'RightAlign' , CurrentRightAlign )
				if ALLTRIM(HMG_UPPER(CurrentRightAlign)) == '.T.'
					RIGHTALIGN .T.
				else
					RIGHTALIGN .F.
				endif
			ElseIf ControlType == 'LABEL'
				CurrentRightAlign := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				if ALLTRIM(HMG_UPPER(CurrentRightAlign)) == '.T.'
					RIGHTALIGN .T.
					__MVPUT( Name + 'Alignment' , 'RIGHT' )
				else
					RIGHTALIGN .F.
					__MVPUT( Name + 'Alignment' , 'LEFT' )
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// CENTERALIGN PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'CENTERALIGN'
			If ControlType == 'LABEL'
				CurrentCenterAlign := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				if ALLTRIM(HMG_UPPER(CurrentCenterAlign)) == '.T.'
					__MVPUT( Name + 'Alignment' , 'CENTER' )
					CENTERALIGN .T.
				else
					__MVPUT( Name + 'Alignment' , 'LEFT' )
					CENTERALIGN .F.
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// VISIBLE PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'VISIBLE'
			If ControlType == 'BUTTON'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'CHECKBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'LISTBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VISIBLE ' + CurrentVisible + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VISIBLE ' + CurrentVisible + CRLF
				endif

			ElseIf ControlType == 'CHECKBUTTON'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'SLIDER'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'SPINNER'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'IMAGE'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'DATEPICKER'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'TEXTBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'EDITBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VISIBLE ' + CurrentVisible + CRLF
				endif

			ElseIf ControlType == 'LABEL'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'IPADDRESS'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'RADIOGROUP'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'PROGRESSBAR'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'RICHEDITBOX'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VISIBLE ' + CurrentVisible + CRLF
				endif

			ElseIf ControlType == 'MONTHCALENDAR'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			ElseIf ControlType == 'HYPERLINK'
				CurrentVisible := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Visible' , CurrentVisible )
			EndIf

		///////////////////////////////////////////////////////////////
		// ALLOWEDIT PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'ALLOWEDIT'
			If ControlType == 'GRID'
				CurrentAllowEdit := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'AllowEdit' , CurrentAllowEdit )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWEDIT ' + CurrentAllowEdit + CRLF
				endif

			ElseIf ControlType == 'BROWSE'
				CurrentAllowEdit := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'AllowEdit' , CurrentAllowEdit )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWEDIT ' + CurrentAllowEdit + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ALLOWAPPEND PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'ALLOWAPPEND'
			If ControlType == 'BROWSE'
				CurrentAllowAppend := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'AllowAppend' , CurrentAllowAppend )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWAPPEND ' + CurrentAllowAppend + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ALLOWDELETE PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'ALLOWDELETE'
			If ControlType == 'BROWSE'
				CurrentAllowDelete := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'AllowDelete' , CurrentAllowDelete )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ALLOWDELETE ' + CurrentAllowDelete + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// VIRTUAL PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'VIRTUAL'
			If ControlType == 'GRID'
				CurrentVirtual := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Virtual' , CurrentVirtual )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'VIRTUAL ' + CurrentVirtual + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// LINES PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'NOLINES'
			If ControlType == 'GRID'
				CurrentLines := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOLINES ' + CurrentLines + CRLF

					if ALLTRIM(HMG_UPPER(CurrentLines)) == '.T.'
						__MVPUT( Name + 'Lines' , '.F.' )
					else
						__MVPUT( Name + 'Lines' , '.T.' )
					endif

				else

					if ALLTRIM(HMG_UPPER(CurrentLines)) == '.T.'
						NOLINES .T.
						__MVPUT( Name + 'Lines' , '.F.' )
					else
						NOLINES .F.
						__MVPUT( Name + 'Lines' , '.T.' )
					endif

				endif

			ElseIf ControlType == 'BROWSE'
				CurrentLines := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'NOLINES ' + CurrentLines + CRLF

					if ALLTRIM(HMG_UPPER(CurrentLines)) == '.T.'
						__MVPUT( Name + 'Lines' , '.F.' )
					else
						__MVPUT( Name + 'Lines' , '.T.' )
					endif

				else

					if ALLTRIM(HMG_UPPER(CurrentLines)) == '.T.'
						NOLINES .T.
						__MVPUT( Name + 'Lines' , '.F.' )
					else
						NOLINES .F.
						__MVPUT( Name + 'Lines' , '.T.' )
					endif

				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// TRANSPARENT PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'TRANSPARENT'
			If ControlType == 'BUTTON'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			ElseIf ControlType == 'CHECKBOX'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			ElseIf ControlType == 'LABEL'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			ElseIf ControlType == 'RADIOGROUP'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			ElseIf ControlType == 'FRAME'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
				if ALLTRIM(HMG_UPPER(CurrentTransparent)) == '.F.'
					OPAQUE .T.
				endif
			ElseIf ControlType == 'ANIMATEBOX'
				CurrentTransparent := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'Transparent' , CurrentTransparent )
			EndIf

		///////////////////////////////////////////////////////////////
		// OPAQUE PROPERTY
		///////////////////////////////////////////////////////////////
		ElseIf	HMG_UPPER (Line) = 'OPAQUE'
			If ControlType == 'FRAME'
				CurrentOpaque := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				if ALLTRIM(HMG_UPPER(CurrentOpaque)) == '.T.'
					__MVPUT( Name + 'Transparent' , '.F.' )
					OPAQUE .T.
				else
					__MVPUT( Name + 'Transparent' , '.T.' )
					OPAQUE .F.
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// FONTSIZE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTSIZE'

			If ControlType == 'BUTTON'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf ControlType == 'LISTBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf ControlType == 'GRID'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'BROWSE'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				CurrentFontSize := VAL ( CurrentFontSize )

			ElseIf	ControlType == 'FRAME'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSIZE ' + CurrentFontSize + CRLF
				else
					FONTSIZE VAL ( CurrentFontSize )
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontSize := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )

				__MVPUT( Name + 'FontSize' , CurrentFontSize )

				FONTSIZE VAL ( CurrentFontSize )

			EndIf

		///////////////////////////////////////////////////////////////
		// SPACING PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SPACING'

			If	ControlType == 'RADIOGROUP'
				CurrentSpacing := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'Spacing' , CurrentSpacing )
				CurrentSpacing := VAL ( CurrentSpacing )
			EndIf

		///////////////////////////////////////////////////////////////
		// TOOLTIP PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'TOOLTIP'

			If ControlType == 'BUTTON'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'CHECKBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'LISTBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'COMBOBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'CHECKBUTTON'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'GRID'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'SLIDER'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'SPINNER'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'DATEPICKER'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'TEXTBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'EDITBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'BROWSE'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'HYPERLINK'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'TOOLTIP ' + '"' + CurrentToolTip + '"' + CRLF
				else
					TOOLTIP CurrentToolTip
				endif

			ElseIf	ControlType == 'PROGRESSBAR'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			ElseIf	ControlType == 'IPADDRESS'

				CurrentToolTip := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if	HB_ULEFT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_URIGHT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentToolTip , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentToolTip , 1 ) == "'"

					CurrentToolTip := HB_ULEFT ( CurrentToolTip , HMG_LEN( CurrentToolTip ) - 1 )

				EndIf

				__MVPUT( Name + 'ToolTip' , CurrentToolTip )

				TOOLTIP CurrentToolTip

			EndIf


		///////////////////////////////////////////////////////////////
		// ONDROPDOWN EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONDROPDOWN'

			If ControlType == 'COMBOBOX'
				CurrentOnDropDown := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnDropDown' , CurrentOnDropDown )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDROPDOWN ' + CurrentOnDropDown + CRLF
				endif
			EndIf

		///////////////////////////////////////////////////////////////
		// ONCLOSEUP EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONCLOSEUP'

			If ControlType == 'COMBOBOX'
				CurrentOnCloseUp := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'OnCloseUp' , CurrentOnCloseUp )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCLOSEUP ' + CurrentOnCloseUp + CRLF
				endif
			EndIf


		///////////////////////////////////////////////////////////////
		// ONENTER EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONENTER'
			If ControlType == 'COMBOBOX'
				CurrentOnEnter := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'OnEnter' , CurrentOnEnter )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONENTER ' + CurrentOnEnter + CRLF
				endif

			ElseIf ControlType == 'DATEPICKER'
				CurrentOnEnter := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'OnEnter' , CurrentOnEnter )
			ElseIf ControlType == 'TEXTBOX'
				CurrentOnEnter := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )
				__MVPUT( Name + 'OnEnter' , CurrentOnEnter )
			EndIf

		///////////////////////////////////////////////////////////////
		// ONDISPLAYCHANGE EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONDISPLAYCHANGE'
			If ControlType == 'COMBOBOX'
				CurrentOnDisplayChange := ALLTRIM(HB_USUBSTR ( Line , 17 , HMG_LEN (Line) - 16 ) )
				__MVPUT( Name + 'OnDisplayChange' , CurrentOnDisplayChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDISPLAYCHANGE ' + CurrentOnDisplayChange + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ONCHANGE EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONCHANGE'

			If ControlType == 'CHECKBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'LISTBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'COMBOBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'CHECKBUTTON'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'GRID'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'SLIDER'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'SPINNER'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'DATEPICKER'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'TEXTBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'EDITBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONCHANGE ' + CurrentOnChange + CRLF
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentOnChange := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'OnChange' , CurrentOnChange )

			EndIf

		///////////////////////////////////////////////////////////////
		// ONGOTFOCUS EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONGOTFOCUS'

			If	ControlType == 'BUTTON'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'CHECKBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'LISTBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'COMBOBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'CHECKBUTTON'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'GRID'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'SPINNER'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'DATEPICKER'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'TEXTBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			ElseIf	ControlType == 'EDITBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'RICHEDITBOX'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONGOTFOCUS ' + CurrentOnGotFocus + CRLF
				endif

			ElseIf	ControlType == 'IPADDRESS'
				CurrentOnGotFocus := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnGotFocus' , CurrentOnGotFocus )

			EndIf





		///////////////////////////////////////////////////////////////
		// ONSAVE EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONSAVE'

			If	ControlType == 'GRID'
				CurrentOnSave := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'OnSave' , CurrentOnSave )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONSAVE ' + CurrentOnSave + CRLF
				endif

			EndIf


		///////////////////////////////////////////////////////////////
		// ONDBLCLICK EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONDBLCLICK'

			If	ControlType == 'LISTBOX'
				CurrentOnDblClick := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnDblClick' , CurrentOnDblClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDBLCLICK ' + CurrentOnDblClick + CRLF
				endif

			ElseIf	ControlType == 'GRID'
				CurrentOnDblClick := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnDblClick' , CurrentOnDblClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDBLCLICK ' + CurrentOnDblClick + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'
				CurrentOnDblClick := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'OnDblClick' , CurrentOnDblClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONDBLCLICK ' + CurrentOnDblClick + CRLF
				endif

			EndIf
		///////////////////////////////////////////////////////////////
		// ONHEADCLICK EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONHEADCLICK'

			If	ControlType == 'GRID'
				CurrentOnHeadClick := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnHeadClick' , CurrentOnHeadClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONHEADCLICK ' + CurrentOnHeadClick + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'
				CurrentOnHeadClick := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnHeadClick' , CurrentOnHeadClick )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONHEADCLICK ' + CurrentOnHeadClick + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ONQUERYDATA EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONQUERYDATA'

			If	ControlType == 'GRID'
				CurrentOnQueryData := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnQueryData' , CurrentOnQueryData )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONQUERYDATA ' + CurrentOnQueryData + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// ONLOSTFOCUS EVENT
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'ONLOSTFOCUS'

			If	ControlType == 'BUTTON'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'CHECKBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'LISTBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'COMBOBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'CHECKBUTTON'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'GRID'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'SPINNER'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'DATEPICKER'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'TEXTBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			ElseIf	ControlType == 'EDITBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'BROWSE'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'RICHEDITBOX'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'ONLOSTFOCUS ' + CurrentOnLostFocus + CRLF
				endif

			ElseIf	ControlType == 'IPADDRESS'
				CurrentOnLostFocus := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'OnLostFocus' , CurrentOnLostFocus )

			EndIf

		///////////////////////////////////////////////////////////////
		// INPUTMASK PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'INPUTMASK'

			If	ControlType == 'TEXTBOX'

				CurrentInputMask := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )

				if	HB_ULEFT ( CurrentInputMask , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentInputMask , 1 ) == "'"

					CurrentInputMask := HB_URIGHT ( CurrentInputMask , HMG_LEN( CurrentInputMask ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentInputMask , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentInputMask , 1 ) == "'"

					CurrentInputMask := HB_ULEFT ( CurrentInputMask , HMG_LEN( CurrentInputMask ) - 1 )

				EndIf

				if ALLTRIM ( HMG_UPPER (CurrentInputMask) ) == 'NIL'
					CurrentInputMask := ''
				endif

				__MVPUT( Name + 'InputMask' , CurrentInputMask )

			EndIf

			If	ControlType == 'BROWSE'

				CurrentInputMask := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'InputMask' , CurrentInputMask )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'INPUTMASK ' + CurrentInputMask + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FORMAT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FORMAT'

			If	ControlType == 'TEXTBOX'

				CurrentFormat := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )

				if	HB_ULEFT ( CurrentFormat , 1 ) == '"' ;
					.or. ;
					HB_ULEFT ( CurrentFormat , 1 ) == "'"

					CurrentFormat := HB_URIGHT ( CurrentFormat , HMG_LEN( CurrentFormat ) - 1 )

				EndIf

				if	HB_URIGHT ( CurrentFormat , 1 ) == '"' ;
					.or. ;
					HB_URIGHT ( CurrentFormat , 1 ) == "'"

					CurrentFormat := HB_ULEFT ( CurrentFormat , HMG_LEN( CurrentFormat ) - 1 )

				EndIf

				if ALLTRIM ( HMG_UPPER (CurrentFormat) ) == 'NIL'
					CurrentFormat := ''
				endif

				__MVPUT( Name + 'Format' , CurrentFormat )

			EndIf

			If	ControlType == 'BROWSE'
				CurrentFormat := ALLTRIM(HB_USUBSTR ( Line , 8 , HMG_LEN (Line) - 7 ) )
				__MVPUT( Name + 'Format' , CurrentFormat )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FORMAT ' + CurrentFormat + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// NUMERIC PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'NUMERIC'

			If	ControlType == 'TEXTBOX'

				CurrentNumeric := ALLTRIM(HB_USUBSTR ( Line , 9 , HMG_LEN (Line) - 8 ) )

				if ALLTRIM(HMG_UPPER(CurrentNumeric)) == '.T.'
					__MVPUT( Name + 'DataType' , 'NUMERIC' )
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// SORT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'SORT'

			If ControlType == 'LISTBOX'
				CurrentSort := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )
				__MVPUT( Name + 'Sort' , CurrentSort )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SORT ' + CurrentSort + CRLF
				endif

			ElseIf ControlType == 'COMBOBOX'
				CurrentSort := ALLTRIM(HB_USUBSTR ( Line , 6 , HMG_LEN (Line) - 5 ) )
				__MVPUT( Name + 'Sort' , CurrentSort )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'SORT ' + CurrentSort + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// MULTISELECT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'MULTISELECT'

			If ControlType == 'LISTBOX'
				CurrentMultiSelect := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'MultiSelect' , CurrentMultiSelect )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'MULTISELECT ' + CurrentMultiSelect + CRLF
				endif

			ElseIf ControlType == 'GRID'
				CurrentMultiSelect := ALLTRIM(HB_USUBSTR ( Line , 13 , HMG_LEN (Line) - 12 ) )
				__MVPUT( Name + 'MultiSelect' , CurrentMultiSelect )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'MULTISELECT ' + CurrentMultiSelect + CRLF
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// CELLNAVIGATION PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'CELLNAVIGATION'

			If ControlType == 'GRID'
				CurrentCellNavigation := ALLTRIM(HB_USUBSTR ( Line , 16 , HMG_LEN (Line) - 15 ) )
				__MVPUT( Name + 'CellNavigation' , CurrentCellNavigation )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'CELLNAVIGATION ' + CurrentCellNavigation + CRLF
				endif

			EndIf



		///////////////////////////////////////////////////////////////
		// MULTILINE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'MULTILINE'

			If ControlType == 'BUTTON'

				CurrentMultiLine := ALLTRIM(HB_USUBSTR ( Line , 11 , HMG_LEN (Line) - 10 ) )
				__MVPUT( Name + 'MultiLine' , CurrentMultiLine )
				if ALLTRIM(HMG_UPPER(CurrentMultiLine)) == '.T.'
					MULTILINE .T.
				else
					MULTILINE .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTBOLD PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTBOLD'

			If ControlType == 'BUTTON'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf ControlType == 'LISTBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf ControlType == 'GRID'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'FRAME'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTBOLD ' + CurrentFontBold + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
						FONTBOLD .T.
					else
						FONTBOLD .F.
					endif

				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontBold := ALLTRIM(HB_USUBSTR ( Line , 10 , HMG_LEN (Line) - 9 ) )
				__MVPUT( Name + 'FontBold' , CurrentFontBold )
				if ALLTRIM(HMG_UPPER(CurrentFontBold)) == '.T.'
					FONTBOLD .T.
				else
					FONTBOLD .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTITALIC PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTITALIC'

			If ControlType == 'BUTTON'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf ControlType == 'LISTBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf ControlType == 'GRID'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'FRAME'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTITALIC ' + CurrentFontItalic + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
						FONTITALIC .T.
					else
						FONTITALIC .F.
					endif
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontItalic := ALLTRIM(HB_USUBSTR ( Line , 12 , HMG_LEN (Line) - 11 ) )
				__MVPUT( Name + 'FontItalic' , CurrentFontItalic )
				if ALLTRIM(HMG_UPPER(CurrentFontItalic)) == '.T.'
					FONTITALIC .T.
				else
					FONTITALIC .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTSTRIKEOUT PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTSTRIKEOUT'

			If ControlType == 'BUTTON'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf ControlType == 'LISTBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf ControlType == 'GRID'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'FRAME'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTSTRIKEOUT ' + CurrentFontStrikeout + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
						FONTSTRIKEOUT .T.
					else
						FONTSTRIKEOUT .F.
					endif
				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontStrikeout := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontStrikeout' , CurrentFontStrikeout )
				if ALLTRIM(HMG_UPPER(CurrentFontStrikeout)) == '.T.'
					FONTSTRIKEOUT .T.
				else
					FONTSTRIKEOUT .F.
				endif

			EndIf

		///////////////////////////////////////////////////////////////
		// FONTUNDERLINE PROPERTY
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'FONTUNDERLINE'

			If ControlType == 'BUTTON'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf ControlType == 'CHECKBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf ControlType == 'LISTBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf ControlType == 'COMBOBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf ControlType == 'CHECKBUTTON'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf ControlType == 'GRID'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf	ControlType == 'SPINNER'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'DATEPICKER'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'TEXTBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'EDITBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf	ControlType == 'LABEL'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'BROWSE'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf	ControlType == 'RADIOGROUP'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'FRAME'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'HYPERLINK'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'MONTHCALENDAR'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			ElseIf	ControlType == 'RICHEDITBOX'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )

				if _hmgide_SplitBoxProcessing == .T.
					_hmgide_CurrentSplitBox := _hmgide_CurrentSplitBox + Space(12) + 'FONTUNDERLINE ' + CurrentFontUnderLine + CRLF
				else

					if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
						FONTUNDERLINE .T.
					else
						FONTUNDERLINE .F.
					endif

				endif

			ElseIf	ControlType == 'IPADDRESS'

				CurrentFontUnderLine := ALLTRIM(HB_USUBSTR ( Line , 15 , HMG_LEN (Line) - 14 ) )
				__MVPUT( Name + 'FontUnderLine' , CurrentFontUnderLine )
				if ALLTRIM(HMG_UPPER(CurrentFontUnderLine)) == '.T.'
					FONTUNDERLINE .T.
				else
					FONTUNDERLINE .F.
				endif

			EndIf


		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////
		// DEFINE WINDOW COMMAND
		///////////////////////////////////////////////////////////////

		ElseIf	HMG_UPPER (Line) = 'DEFINE WINDOW TEMPLATE'

			* Determine AT

			a := 27
			b := HB_UAT ( "," , HMG_UPPER (Line) )
			c := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

			WinRow := HB_USUBSTR ( Line , a , b-a )
			WinCol := HB_USUBSTR ( Line , b + 1 , c-b  )

			* Determine Width

			a := HB_UAT ( " WIDTH " , HMG_UPPER (Line) )

			if a > 0

				Width := ''
				Started := .F.

				For z := a + 6 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Width := Width + Char
					EndIf
				Next z

			EndIf

			* Determine Height

			a := HB_UAT ( " HEIGHT " , HMG_UPPER (Line) )

			if a > 0

				Height := ''
				Started := .F.

				For z := a + 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						Height := Height + Char
					EndIf
				Next z

			EndIf



			* Determine Virtual Width

			a := HB_UAT ( " VIRTUAL WIDTH " , HMG_UPPER (Line) )

			if a > 0

				VirtualWidth := ''
				Started := .F.

				For z := a + 14 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						VirtualWidth := VirtualWidth + Char
					EndIf
				Next z

			else

				VirtualWidth := 'Nil'

			EndIf

			if VirtualWidth = 'Nil'
				lVirtualForm := .F.
			else
				lVirtualForm := .T.
			endif

			* Determine Virtual Height

			a := HB_UAT ( " VIRTUAL HEIGHT " , HMG_UPPER (Line) )

			if a > 0

				VirtualHeight := ''
				Started := .F.

				For z := a + 15 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == ' '
						if Started
							Exit
						EndIf
					Else
						if ! Started
							Started := .T.
						EndIf
						VirtualHeight := VirtualHeight + Char
					EndIf
				Next z

			else

				VirtualHeight := 'Nil'

			EndIf

			if VirtualHeight = 'Nil'
				lVirtualForm := .F.
			else
				lVirtualForm := .T.
			endif

			__MVPUBLIC	( DesignForm + 'VirtualWidth' )
			__MVPUBLIC	( DesignForm + 'VirtualHeight' )
			__MVPUBLIC	( DesignForm + 'VirtualSized' )
			__MVPUT		( DesignForm + 'VirtualWidth' , VirtualWidth )
			__MVPUT		( DesignForm + 'VirtualHeight' , VirtualHeight )

			if VirtualHeight = 'Nil' .and. VirtualWidth = 'Nil'
				__MVPUT		( DesignForm + 'VirtualSized' , '.F.' )
			else
				__MVPUT		( DesignForm + 'VirtualSized' , '.T.' )
			endif


*

			* Determine Title

			a := HB_UAT ( " TITLE " , HMG_UPPER (Line) )

			Title := ''

			if a > 0

				For z := a + 8 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						exit
					Else
						Title := Title + Char
					EndIf
				Next z

			EndIf

			Title := ALLTRIM(Title)

			line := HB_URIGHT (line , HMG_LEN(line) - z )

			line := ALLTRIM(line)


			* Determine Icon

			Icon := ""

			if line = 'ICON NIL'
				icon := ""
				line := HB_URIGHT ( line , HMG_LEN(line) - 8 )

			elseif line = 'ICON "'

				For z := 7 To HMG_LEN ( Line )
					char := HB_USUBSTR ( Line , z , 1 )
					if char == '"'
						Exit
					Else
						Icon := Icon + Char
					EndIf
				Next z

				line := HB_URIGHT ( line , HMG_LEN(line) - z )

			EndIf

			Icon := ALLTRIM(Icon)

			line := ALLTRIM(line)


			* Determine Type

			if	line = "MAIN "

				WindowType := 'MAIN'

			elseif	line = "MODAL "

				WindowType := 'MODAL'

			elseif  line = "CHILD "

				WindowType := 'CHILD'

			elseif  line = "PANEL "

				WindowType := 'PANEL'

			elseif line = "SPLITCHILD "

				WindowType := 'SPLITCHILD'

			else

				WindowType := 'STANDARD'

				line := ' ' + line
			endif

			/*
			MsgInfo ( WindowType , 'WindowType' )
			MsgInfo ( Width , 'Width' )
			MsgInfo ( Height , 'Height' )
			MsgInfo ( VirtualWidth , 'VirtualWidth' )
			MsgInfo ( VirtualHeight , 'VirtualHeight' )
                        */

			New(.F.)
			OpenFormName := FileName


			If ! Empty ( Width )
				SetProperty ( DesignForm , 'Width' , VAL (Width) )
			EndIf

			If ! Empty ( Height )
				SetProperty ( DesignForm , 'Height' , VAL (Height) )
			EndIf

			If ! Empty ( Title )
				SetProperty ( DesignForm , 'Title' , Title )
			EndIf


			If ! Empty ( WinRow )
				SetProperty ( DesignForm , 'Row' , VAL(WinRow) )
			EndIf

			If ! Empty ( WinCol )
				SetProperty ( DesignForm , 'Col' , VAL(WinCol) )
			EndIf

			__MVPUT ( DesignForm + 'WindowType' , WindowType )
			__MVPUT		( DesignForm + 'Icon' , Icon )

			////////////////////////////////////////////////////////
			If	WindowType == 'STANDARD' ;
				.Or. ;
				WindowType == 'MAIN' ;
				.Or. ;
				WindowType == 'CHILD' ;
				.Or. ;
				WindowType == 'PANEL'

			////////////////////////////////////////////////////////

				*..............................................
				* Determine Caption
				*..............................................

				a := HB_UAT ( " NOCAPTION " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'TitleBar' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'TitleBar' , '.T.' )
				EndIf

				*..............................................
				* Determine SysMenu
				*..............................................

				a := HB_UAT ( " NOSYSMENU " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'SysMenu' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'SysMenu' , '.T.' )
				EndIf

				*..............................................
				* Determine Visible
				*..............................................

				a := HB_UAT ( " NOSHOW " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Visible' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'Visible' , '.T.' )
				EndIf

				*..............................................
				* Determine Topmost
				*..............................................

				a := HB_UAT ( " TOPMOST " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Topmost' , '.T.' )
				Else
					__MVPUT ( DesignForm + 'Topmost' , '.F.' )
				EndIf

				*..............................................
				* Determine AutoRelease
				*..............................................

				a := HB_UAT ( " NOAUTORELEASE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'AutoRelease' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'AutoRelease' , '.T.' )
				EndIf

				*..............................................
				* Determine MaxButton
				*..............................................

				a := HB_UAT ( " NOMAXIMIZE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'MaxButton' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'MaxButton' , '.T.' )
				EndIf

				*..............................................
				* Determine MinButton
				*..............................................

				a := HB_UAT ( " NOMINIMIZE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'MinButton' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'MinButton' , '.T.' )
				EndIf

				*..............................................
				* Determine Sizable
				*..............................................

				a := HB_UAT ( " NOSIZE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Sizable' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'Sizable' , '.T.' )
				EndIf

				*..............................................
				* Determine Cursor
				*..............................................

				a := HB_UAT ( " CURSOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 8 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 7 )

						if NextToken == 'ON INIT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if HMG_UPPER (ClauseArgument) == 'NIL'
					ClauseArgument := ''
				Else
					ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
					ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
				EndIf

				__MVPUT ( DesignForm + 'Cursor' , ClauseArgument )

				*..............................................
				* Determine OnInit
				*..............................................

				a := HB_UAT ( " ON INIT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 9 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'ON RELEASE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnInit' , ClauseArgument )

				*..............................................
				* Determine OnRelease
				*..............................................

				a := HB_UAT ( " ON RELEASE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 12 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 19 )

						if NextToken == 'ON INTERACTIVECLOSE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnRelease' , ClauseArgument )

				*..............................................
				* Determine OnInteractiveClose
				*..............................................

				a := HB_UAT ( " ON INTERACTIVECLOSE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 21 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON MOUSECLICK'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnInteractiveClose' , ClauseArgument )

				*..............................................
				* Determine OnMouseClick
				*..............................................

				a := HB_UAT ( " ON MOUSECLICK " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON MOUSEDRAG'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseClick' , ClauseArgument )

				*..............................................
				* Determine OnMouseDrag
				*..............................................

				a := HB_UAT ( " ON MOUSEDRAG " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON MOUSEMOVE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseDrag' , ClauseArgument )

				* Determine OnMouseMove

				a := HB_UAT ( " ON MOUSEMOVE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 7 )

						if NextToken == 'ON SIZE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseMove' , ClauseArgument )

				*..............................................
				* Determine OnSize
				*..............................................

				a := HB_UAT ( " ON SIZE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 9 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON MAXIMIZE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnSize' , ClauseArgument )

				*..............................................
				* Determine OnMaximize
				*..............................................

				a := HB_UAT ( " ON MAXIMIZE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON MINIMIZE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMaximize' , ClauseArgument )

				*..............................................
				* Determine OnMinimize
				*..............................................

				a := HB_UAT ( " ON MINIMIZE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 8 )

						if NextToken == 'ON PAINT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMinimize' , ClauseArgument )

				*..............................................
				* Determine OnPaint
				*..............................................

				a := HB_UAT ( " ON PAINT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 10 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 9 )

						if NextToken == 'BACKCOLOR'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnPaint' , ClauseArgument )

				*..............................................
				* Determine BackColor
				*..............................................

				a := HB_UAT ( " BACKCOLOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 11 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'NOTIFYICON'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'BackColor' , ClauseArgument )

				if ALLTRIM(HMG_UPPER(ClauseArgument)) = '{'
					SetWindowBackColor ( DesignFormHandle , &ClauseArgument )
				endif

				*..............................................
				* Determine NotifyIcon
				*..............................................

				a := HB_UAT ( " NOTIFYICON " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 12 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'NOTIFYTOOLTIP'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

					if HMG_UPPER (ClauseArgument) == 'NIL'

						ClauseArgument := ''

					Else

						ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
						ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )

					EndIf

				EndIf

				__MVPUT ( DesignForm + 'NotifyIcon' , ClauseArgument )

				*..............................................
				* Determine NotifyToolTip
				*..............................................

				a := HB_UAT ( " NOTIFYTOOLTIP " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 14 )

						if NextToken == 'ON NOTIFYCLICK'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

					if HMG_UPPER (ClauseArgument) == 'NIL'

						ClauseArgument := ''

					Else

						ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
						ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )

					EndIf

				EndIf

				__MVPUT ( DesignForm + 'NotifyToolTip' , ClauseArgument )

				*..............................................
				* Determine OnNotifyClick
				*..............................................

				a := HB_UAT ( " ON NOTIFYCLICK " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 16 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON GOTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnNotifyClick' , ClauseArgument )

				*..............................................
				* Determine OnGotFocus
				*..............................................

				a := HB_UAT ( " ON GOTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON LOSTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnGotFocus' , ClauseArgument )

				*..............................................
				* Determine OnLostFocus
				*..............................................

				a := HB_UAT ( " ON LOSTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON SCROLLUP'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnLostFocus' , ClauseArgument )

				*..............................................
				* Determine OnScrollUp
				*..............................................

				a := HB_UAT ( " ON SCROLLUP " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLDOWN'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollUp' , ClauseArgument )
				*..............................................
				* Determine OnScrollDown
				*..............................................

				a := HB_UAT ( " ON SCROLLDOWN " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLLEFT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollDown' , ClauseArgument )
				*..............................................
				* Determine OnScrollLeft
				*..............................................

				a := HB_UAT ( " ON SCROLLLEFT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 14 )

						if NextToken == 'ON SCROLLRIGHT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollLeft' , ClauseArgument )
				*..............................................
				* Determine OnScrollRight
				*..............................................

				a := HB_UAT ( " ON SCROLLRIGHT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 16 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON HSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollRight' , ClauseArgument )
				*..............................................
				* Determine OnHScroolBox
				*..............................................

				a := HB_UAT ( " ON HSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON VSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnHScrollBox' , ClauseArgument )

				*..............................................
				* Determine OnVScroolBox
				*..............................................

				a := HB_UAT ( " ON VSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'HELPBUTTON'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnVScrollBox' , ClauseArgument )

				*..............................................
				* Determine HelpButton
				*..............................................

				a := HB_UAT ( " HELPBUTTON" , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'HelpButton' , '.T.' )
				EndIf

			////////////////////////////////////////////////////////
			ElseIf	WindowType == 'MODAL'
			////////////////////////////////////////////////////////

				*..............................................
				* Determine Caption
				*..............................................

				a := HB_UAT ( " NOCAPTION " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'TitleBar' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'TitleBar' , '.T.' )
				EndIf

				*..............................................
				* Determine SysMenu
				*..............................................

				a := HB_UAT ( " NOSYSMENU " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'SysMenu' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'SysMenu' , '.T.' )
				EndIf

				*..............................................
				* Determine Visible
				*..............................................

				a := HB_UAT ( " NOSHOW " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Visible' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'Visible' , '.T.' )
				EndIf

				*..............................................
				* Determine AutoRelease
				*..............................................

				a := HB_UAT ( " NOAUTORELEASE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'AutoRelease' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'AutoRelease' , '.T.' )
				EndIf

				*..............................................
				* Determine Sizable
				*..............................................

				a := HB_UAT ( " NOSIZE " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Sizable' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'Sizable' , '.T.' )
				EndIf

				*..............................................
				* Determine Cursor
				*..............................................

				a := HB_UAT ( " CURSOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 8 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 7 )

						if NextToken == 'ON INIT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if HMG_UPPER (ClauseArgument) == 'NIL'
					ClauseArgument := ''
				Else
					ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
					ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
				EndIf

				__MVPUT ( DesignForm + 'Cursor' , ClauseArgument )

				*..............................................
				* Determine OnInit
				*..............................................

				a := HB_UAT ( " ON INIT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 9 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'ON RELEASE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnInit' , ClauseArgument )

				*..............................................
				* Determine OnRelease
				*..............................................

				a := HB_UAT ( " ON RELEASE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 12 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 19 )

						if NextToken == 'ON INTERACTIVECLOSE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnRelease' , ClauseArgument )

				*..............................................
				* Determine OnInteractiveClose
				*..............................................

				a := HB_UAT ( " ON INTERACTIVECLOSE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 21 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON MOUSECLICK'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnInteractiveClose' , ClauseArgument )

				*..............................................
				* Determine OnMouseClick
				*..............................................

				a := HB_UAT ( " ON MOUSECLICK " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON MOUSEDRAG'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseClick' , ClauseArgument )

				*..............................................
				* Determine OnMouseDrag
				*..............................................

				a := HB_UAT ( " ON MOUSEDRAG " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON MOUSEMOVE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseDrag' , ClauseArgument )

				*..............................................
				* Determine OnMouseMove
				*..............................................

				a := HB_UAT ( " ON MOUSEMOVE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 7 )

						if NextToken == 'ON SIZE'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnMouseMove' , ClauseArgument )

				*..............................................
				* Determine OnSize
				*..............................................

				a := HB_UAT ( " ON SIZE " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 9 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 8 )

						if NextToken == 'ON PAINT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnSize' , ClauseArgument )

				*..............................................
				* Determine OnPaint
				*..............................................

				a := HB_UAT ( " ON PAINT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 10 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 9 )

						if NextToken == 'BACKCOLOR'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnPaint' , ClauseArgument )

				*..............................................
				* Determine BackColor
				*..............................................

				a := HB_UAT ( " BACKCOLOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 11 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON GOTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'BackColor' , ClauseArgument )

				if ALLTRIM(HMG_UPPER(ClauseArgument)) = '{'
					SetWindowBackColor ( DesignFormHandle , &ClauseArgument )
				endif

				*..............................................
				* Determine OnGotFocus
				*..............................................

				a := HB_UAT ( " ON GOTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON LOSTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnGotFocus' , ClauseArgument )

				*..............................................
				* Determine OnLostFocus
				*..............................................

				a := HB_UAT ( " ON LOSTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON SCROLLUP'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnLostFocus' , ClauseArgument )

				*..............................................
				* Determine OnScrollUp
				*..............................................

				a := HB_UAT ( " ON SCROLLUP " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLDOWN'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollUp' , ClauseArgument )
				*..............................................
				* Determine OnScrollDown
				*..............................................

				a := HB_UAT ( " ON SCROLLDOWN " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLLEFT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollDown' , ClauseArgument )
				*..............................................
				* Determine OnScrollLeft
				*..............................................

				a := HB_UAT ( " ON SCROLLLEFT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 14 )

						if NextToken == 'ON SCROLLRIGHT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollLeft' , ClauseArgument )
				*..............................................
				* Determine OnScrollRight
				*..............................................

				a := HB_UAT ( " ON SCROLLRIGHT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 16 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON HSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollRight' , ClauseArgument )
				*..............................................
				* Determine OnHScroolBox
				*..............................................

				a := HB_UAT ( " ON HSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON VSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnHScrollBox' , ClauseArgument )
				*..............................................
				* Determine OnVScroolBox
				*..............................................

				a := HB_UAT ( " ON VSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 10 )

						if NextToken == 'HELPBUTTON'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnVScrollBox' , ClauseArgument )

				*..............................................
				* Determine HelpButton
				*..............................................

				a := HB_UAT ( " HELPBUTTON" , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'HelpButton' , '.T.' )
				EndIf

			////////////////////////////////////////////////////////
			ElseIf	WindowType == 'SPLITCHILD'
			////////////////////////////////////////////////////////

				*..............................................
				* Determine Caption
				*..............................................

				a := HB_UAT ( " NOCAPTION " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'TitleBar' , '.F.' )
				Else
					__MVPUT ( DesignForm + 'TitleBar' , '.T.' )
				EndIf

				*..............................................
				* Determine Break
				*..............................................

				a := HB_UAT ( " BREAK " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Break' , '.T.' )
				Else
					__MVPUT ( DesignForm + 'Break' , '.F.' )
				EndIf

				*..............................................
				* Determine Focused
				*..............................................

				a := HB_UAT ( " FOCUSED " , HMG_UPPER (Line) )

				if a > 0
					__MVPUT ( DesignForm + 'Focused' , '.T.' )
				Else
					__MVPUT ( DesignForm + 'Focused' , '.F.' )
				EndIf

				*..............................................
				* Determine Cursor
				*..............................................

				a := HB_UAT ( " CURSOR " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 8 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )
						if NextToken == 'ON GOTFOCUS'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 11 )
						if NextToken == 'GRIPPERTEXT'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 5 )
						if NextToken == 'BREAK'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 7 )
						if NextToken == 'FOCUSED'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if HMG_UPPER (ClauseArgument) == 'NIL'
					ClauseArgument := ''
				Else
					ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
					ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
				EndIf

				__MVPUT ( DesignForm + 'Cursor' , ClauseArgument )

				*..............................................
				* Determine GripperText
				*..............................................

				a := HB_UAT ( " GRIPPERTEXT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 5 )
						if NextToken == 'BREAK'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 7 )
						if NextToken == 'FOCUSED'
							Exit
						endif
						NextToken := HB_USUBSTR ( Line , z , 11 )
						if NextToken == 'ON GOTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if HMG_UPPER (ClauseArgument) == 'NIL'
					ClauseArgument := ''
				Else
					ClauseArgument := HB_ULEFT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
					ClauseArgument := HB_URIGHT ( ClauseArgument , HMG_LEN(ClauseArgument) - 1 )
				EndIf

				__MVPUT ( DesignForm + 'GripperText' , ClauseArgument )

				*..............................................
				* Determine OnGotFocus
				*..............................................

				a := HB_UAT ( " ON GOTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 12 )

						if NextToken == 'ON LOSTFOCUS'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnGotFocus' , ClauseArgument )

				*..............................................
				* Determine OnLostFocus
				*..............................................

				a := HB_UAT ( " ON LOSTFOCUS " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 14 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 11 )

						if NextToken == 'ON SCROLLUP'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnLostFocus' , ClauseArgument )


				*..............................................
				* Determine OnScrollUp
				*..............................................

				a := HB_UAT ( " ON SCROLLUP " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 13 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLDOWN'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollUp' , ClauseArgument )
				*..............................................
				* Determine OnScrollDown
				*..............................................

				a := HB_UAT ( " ON SCROLLDOWN " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON SCROLLLEFT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollDown' , ClauseArgument )
				*..............................................
				* Determine OnScrollLeft
				*..............................................

				a := HB_UAT ( " ON SCROLLLEFT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 14 )

						if NextToken == 'ON SCROLLRIGHT'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollLeft' , ClauseArgument )
				*..............................................
				* Determine OnScrollRight
				*..............................................

				a := HB_UAT ( " ON SCROLLRIGHT " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 16 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON HSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnScrollRight' , ClauseArgument )
				*..............................................
				* Determine OnHScroolBox
				*..............................................

				a := HB_UAT ( " ON HSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						NextToken := HB_USUBSTR ( Line , z , 13 )

						if NextToken == 'ON VSCROLLBOX'
							Exit
						endif

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnHScrollBox' , ClauseArgument )
				*..............................................
				* Determine OnVScroolBox
				*..............................................

				a := HB_UAT ( " ON VSCROLLBOX " , HMG_UPPER (Line) )

				ClauseArgument := ''

				if a > 0

					Started := .F.

					For z := a + 15 To HMG_LEN ( Line )

						char := HB_USUBSTR ( Line , z , 1 )

						ClauseArgument := ClauseArgument + Char

					Next z

					ClauseArgument := ALLTRIM ( ClauseArgument )

				EndIf

				if Empty ( ClauseArgument )
					ClauseArgument := 'Nil'
				EndIf

				__MVPUT ( DesignForm + 'OnVScrollBox' , ClauseArgument )

			EndIf

		EndIf



	Next i

	loading.hide

	UpdateCombo()
	Properties.Combo_1.Value := 1
	DesignFormModified := .F.

	if ! _IsWindowDefined ( 'Form_1' )

		__MVPUBLIC	( DesignForm + 'VirtualWidth' )
		__MVPUBLIC	( DesignForm + 'VirtualHeight' )
		__MVPUBLIC	( DesignForm + 'VirtualSized' )
		__MVPUT		( DesignForm + 'VirtualWidth' , 'Nil' )
		__MVPUT		( DesignForm + 'VirtualHeight' , 'Nil' )
		__MVPUT		( DesignForm + 'VirtualSized' , '.F.' )

		lVirtualForm := .F.

		New(.F.)
		OpenFormName := FileName

	endif

	UpdateDesignFormProperties()

	If nComponentCount > 0
		Form_main.user.enabled := .T.
	EndIf

	DoMethod (DesignForm , 'Activate')

	If nComponentCount > 0
		Form_main.user.enabled := .F.
	EndIf

	lVirtualForm := .F.

Return

*------------------------------------------------------------------------------*
// Procedure RemoveExtraSpaces (Line)
Function RemoveExtraSpaces (Line)
*------------------------------------------------------------------------------*
Local i , l , c , p , NewLine

	l := HMG_LEN (Line)

	p := ''
	NewLine := ''

	For i := 1 To l

		c := HB_USUBSTR ( Line , i , 1 )

		if ! ( c == ' ' .and. p == ' ' )

			if c != chr (8)
				NewLine := NewLine + c
			endif

		EndIf

		p := c

	Next i

Return ( NewLine )

*------------------------------------------------------------------------------*
Procedure UpdateCombo
*------------------------------------------------------------------------------*
Local i

	Properties.Combo_1.DeleteAllItems

	Properties.Combo_1.AddItem ( 'Form' )

        For i := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )

		If _HMG_SYSDATA [   4 ] [i] == DesignFormhandle

			If !Empty (_HMG_SYSDATA [   2 ] [ i ] ) .and. HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'INTERNAL_TIMER_1' .and.  HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'TEXT_DUMMY'  .and. _HMG_SYSDATA [ 13 ]  [i] ==  .F.

				Properties.Combo_1.AddItem ( _HMG_SYSDATA [   2 ] [ i ] )

			EndIf

		EndIf

	Next i

Return

Procedure QuerySave()

	if IsWindowDefined(&DesignForm)

		IF DesignFormModified == .T.

			if MsgYesNo ( 'Save Current Form' , 'HFD' )
				Save()
			EndIf

		EndIf

	EndIf

Return


Function HitTest ( mr , mc , cr , cc , cw , ch )
Local RetVal := .F.

	If 	mr >= cr ;
		.and. ;
	 	mr <= ( cr + ch ) ;
		.and. ;
	 	mc >= cc  ;
		.and. ;
	 	mc <= ( cc + cw )

		RetVal := .T.

	EndIf

Return RetVal

Procedure MainMenuWizard()
Return
Procedure ToolBarWizard()
Return
Procedure StatusBarWizard()
Return
Procedure SplitBoxWizard()
Return
Procedure ReportWizard()
Return
Procedure ReportDesigner()
Return
*------------------------------------------------------------------------------*
Function TabHit ( TestRow , TestCol )
*------------------------------------------------------------------------------*
LOCAL ControlRow , ControlCol , ControlWidth , ControlHeight
Local i
Local TabName := ''

        For i := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )

		If _HMG_SYSDATA [   4 ] [i] == DesignFormhandle

			If _HMG_SYSDATA [ 1 ] [ i ] == 'TAB'

				ControlRow := _HMG_SYSDATA [ 18 ] [i]
				ControlCol := _HMG_SYSDATA [ 19 ] [i]
				ControlWidth := _HMG_SYSDATA [ 20 ] [i]
				ControlHeight := _HMG_SYSDATA [ 21 ] [i]

				if HitTest( TestRow , TestCol , ControlRow , ControlCol , ControlWidth , ControlHeight ) == .T.
					TabName := _HMG_SYSDATA [   2 ] [ i ]
					Exit
				EndIf

			EndIf

		EndIf

	Next i

Return TabName
*------------------------------------------------------------------------------*
Function IsFrameActive(i)
*------------------------------------------------------------------------------*
LOCAL TabValue
Local RetVal
Local x
Local PageMap
Local y
Local z
Local TabIndex
Local TabPage

	If _HMG_SYSDATA [ 23 ] [i] == -1 .and. _HMG_SYSDATA [ 24 ] [i] == -1
		RetVal := .T.
	Else

		for x := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )

		        if _HMG_SYSDATA [ 1 ] [x] == 'TAB' .and. _HMG_SYSDATA [   4 ] [x] == DesignFormHandle

				PageMap := _HMG_SYSDATA [ 7 ] [x]

				for y := 1 To HMG_LEN ( PageMap )

					for z := 1 to HMG_LEN ( PageMap [y] )

						if VALTYPE ( PageMap [y] [z] ) == 'N'

							if PageMap [y] [z] == _HMG_SYSDATA [   3 ] [i]
								TabIndex := x
								TabPage :=  y
								Exit
							endif

						endif

					next z

				next y

			endif

		next x

		TabValue := GetProperty ( DesignForm , _HMG_SYSDATA [   2 ] [TabIndex] , 'Value' )

		if TabValue == TabPage
			RetVal := .T.
		Else
			RetVal := .F.
		EndIf

	EndIf

Return RetVal

*------------------------------------------------------------------------------*
Function Save ( lView )
*------------------------------------------------------------------------------*
LOCAL aTemp
Local i
Local Code := ''
Local PageMap := {}
Local x
Local j
Local k
Local idx
Local RetVal := Nil
Local WindowType
Local a
Local ImageFlag
Local b

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return NIL
	EndIf

	if Empty ( OpenFormName )
		Return NIL
	EndIf

	WindowType := ALLTRIM ( HMG_UPPER ( __MVGET ( DesignForm + 'WindowType' ) ) )

	Code := Code + _GCN  + CRLF + CRLF

	If	WindowType == 'STANDARD' ;
		.Or. ;
		WindowType == 'MAIN' ;
		.Or. ;
		WindowType == 'CHILD' ;
		.Or. ;
		WindowType == 'PANEL'


		Code := Code + 'DEFINE WINDOW TEMPLATE AT ' ;
		+ ALLTRIM(STR( GetProperty ( DesignForm , 'Row' ) )) ;
		+ ' , ' ;
		+  ALLTRIM(STR(GetProperty ( DesignForm , 'Col' ))) ;
		+ ' WIDTH ' ;
		+ ALLTRIM(STR(GetProperty ( DesignForm , 'Width' ))) ;
		+ ' HEIGHT ' ;
		+ ALLTRIM(STR(GetProperty ( DesignForm , 'Height' ))) ;
		+ ' VIRTUAL WIDTH ' ;
		+ ALLTRIM( __MVGET ( DesignForm + 'VirtualWidth' )) ;
		+ ' VIRTUAL HEIGHT ' ;
		+ ALLTRIM( __MVGET ( DesignForm + 'VirtualHeight' )) ;
		+ ' TITLE ' ;
		+ chr(34) + GetProperty ( DesignForm , 'Title' ) + chr(34)

		if Empty (__MVGET ( DesignForm + 'Icon' ))
			Code := Code + ' ICON NIL'
		Else
			Code := Code + ' ICON ' + chr(34) + __MVGET ( DesignForm + 'Icon' ) + chr(34)
		EndIf

		Code := Code + ' ' + if ( HMG_UPPER ( __MVGET ( DesignForm+'WindowType' ) ) == 'STANDARD' , '' , HMG_UPPER ( __MVGET ( DesignForm+'WindowType' ) ) )

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'Visible' ) ) ) == '.F.'
			Code := Code + ' NOSHOW'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'Topmost' ) ) ) == '.T.'
			Code := Code + ' TOPMOST'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'AutoRelease' ) ) ) == '.F.'
			Code := Code + ' NOAUTORELEASE'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'MaxButton' ) ) ) == '.F.'
			Code := Code + ' NOMAXIMIZE'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'MinButton' ) ) ) == '.F.'
			Code := Code + ' NOMINIMIZE'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'Sizable' ) ) ) == '.F.'
			Code := Code + ' NOSIZE'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'SysMenu' ) ) ) == '.F.'
			Code := Code + ' NOSYSMENU'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'TitleBar' ) ) ) == '.F.'
			Code := Code + ' NOCAPTION'
		EndIf

		if Empty (__MVGET ( DesignForm + 'Cursor' ))
			Code := Code + ' CURSOR NIL'
		Else
			Code := Code + ' CURSOR ' + chr(34) + __MVGET ( DesignForm + 'Cursor' ) + chr(34)
		EndIf

		Code := Code + ' ON INIT ' + __MVGET ( DesignForm + 'OnInit' )
		Code := Code + ' ON RELEASE ' + __MVGET ( DesignForm + 'OnRelease' )
		Code := Code + ' ON INTERACTIVECLOSE ' + __MVGET ( DesignForm + 'OnInteractiveClose' )
		Code := Code + ' ON MOUSECLICK ' + __MVGET ( DesignForm + 'OnMouseClick' )
		Code := Code + ' ON MOUSEDRAG ' + __MVGET ( DesignForm + 'OnMouseDrag' )
		Code := Code + ' ON MOUSEMOVE ' + __MVGET ( DesignForm + 'OnMouseMove' )
		Code := Code + ' ON SIZE ' + __MVGET ( DesignForm + 'OnSize' )
		Code := Code + ' ON MAXIMIZE ' + __MVGET ( DesignForm + 'OnMaximize' )
		Code := Code + ' ON MINIMIZE ' + __MVGET ( DesignForm + 'OnMinimize' )
		Code := Code + ' ON PAINT ' + __MVGET ( DesignForm + 'OnPaint' )

		if !Empty (__MVGET ( DesignForm + 'BackColor' ))
			Code := Code + ' BACKCOLOR ' + __MVGET ( DesignForm + 'BackColor' )
		Else
			Code := Code + ' BACKCOLOR NIL'
		EndIf

		if !Empty (__MVGET ( DesignForm + 'NotifyIcon' ) )
			Code := Code + ' NOTIFYICON ' + chr(34) + __MVGET ( DesignForm + 'NotifyIcon' ) + chr(34)
		Else
			Code := Code + ' NOTIFYICON NIL'
		EndIf

		if !Empty (__MVGET ( DesignForm + 'NotifyToolTip' ) )
			Code := Code + ' NOTIFYTOOLTIP ' + chr(34) + __MVGET ( DesignForm + 'NotifyToolTip' ) + chr(34)
		Else
			Code := Code + ' NOTIFYTOOLTIP NIL'
		EndIf

		Code := Code + ' ON NOTIFYCLICK ' + __MVGET ( DesignForm + 'OnNotifyClick' )
		Code := Code + ' ON GOTFOCUS ' + __MVGET ( DesignForm + 'OnGotFocus' )
		Code := Code + ' ON LOSTFOCUS ' + __MVGET ( DesignForm + 'OnLostFocus' )
		Code := Code + ' ON SCROLLUP ' + __MVGET ( DesignForm + 'ONSCROLLUP' )
		Code := Code + ' ON SCROLLDOWN ' + __MVGET ( DesignForm + 'ONSCROLLDOWN' )
		Code := Code + ' ON SCROLLLEFT ' + __MVGET ( DesignForm + 'ONSCROLLLEFT' )
		Code := Code + ' ON SCROLLRIGHT ' + __MVGET ( DesignForm + 'ONSCROLLRIGHT' )
		Code := Code + ' ON HSCROLLBOX ' + __MVGET ( DesignForm + 'ONHSCROLLBOX' )
		Code := Code + ' ON VSCROLLBOX ' + __MVGET ( DesignForm + 'ONVSCROLLBOX' )

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'HelpButton' ) ) ) == '.T.'
			Code := Code + ' HELPBUTTON '
		EndIf

	ElseIf	WindowType == 'MODAL'

		Code := Code + 'DEFINE WINDOW TEMPLATE AT ' ;
		+ ALLTRIM(STR( GetProperty ( DesignForm , 'Row' ) )) ;
		+ ' , ' ;
		+  ALLTRIM(STR(GetProperty ( DesignForm , 'Col' ))) ;
		+ ' WIDTH ' ;
		+ ALLTRIM(STR(GetProperty ( DesignForm , 'Width' ))) ;
		+ ' HEIGHT ' ;
		+ ALLTRIM(STR(GetProperty ( DesignForm , 'Height' ))) ;
		+ ' VIRTUAL WIDTH ' ;
		+ ALLTRIM( __MVGET ( DesignForm + 'VirtualWidth' )) ;
		+ ' VIRTUAL HEIGHT ' ;
		+ ALLTRIM( __MVGET ( DesignForm + 'VirtualHeight' )) ;
		+ ' TITLE ' ;
		+ chr(34) + GetProperty ( DesignForm , 'Title' ) + chr(34)

		if Empty (__MVGET ( DesignForm + 'Icon' ))
			Code := Code + ' ICON NIL'
		Else
			Code := Code + ' ICON ' + chr(34) + __MVGET ( DesignForm + 'Icon' ) + chr(34)
		EndIf

		Code := Code + ' MODAL'

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'Visible' ) ) ) == '.F.'
			Code := Code + ' NOSHOW'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'AutoRelease' ) ) ) == '.F.'
			Code := Code + ' NOAUTORELEASE'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'Sizable' ) ) ) == '.F.'
			Code := Code + ' NOSIZE'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'SysMenu' ) ) ) == '.F.'
			Code := Code + ' NOSYSMENU'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'TitleBar' ) ) ) == '.F.'
			Code := Code + ' NOCAPTION'
		EndIf

		if Empty (__MVGET ( DesignForm + 'Cursor' ))
			Code := Code + ' CURSOR NIL'
		Else
			Code := Code + ' CURSOR ' + chr(34) + __MVGET ( DesignForm + 'Cursor' ) + chr(34)
		EndIf

		Code := Code + ' ON INIT ' + __MVGET ( DesignForm + 'OnInit' )
		Code := Code + ' ON RELEASE ' + __MVGET ( DesignForm + 'OnRelease' )
		Code := Code + ' ON INTERACTIVECLOSE ' + __MVGET ( DesignForm + 'OnInteractiveClose' )
		Code := Code + ' ON MOUSECLICK ' + __MVGET ( DesignForm + 'OnMouseClick' )
		Code := Code + ' ON MOUSEDRAG ' + __MVGET ( DesignForm + 'OnMouseDrag' )
		Code := Code + ' ON MOUSEMOVE ' + __MVGET ( DesignForm + 'OnMouseMove' )
		Code := Code + ' ON SIZE ' + __MVGET ( DesignForm + 'OnSize' )
		Code := Code + ' ON PAINT ' + __MVGET ( DesignForm + 'OnPaint' )

		if !Empty (__MVGET ( DesignForm + 'BackColor' ))
			Code := Code + ' BACKCOLOR ' + __MVGET ( DesignForm + 'BackColor' )
		Else
			Code := Code + ' BACKCOLOR NIL'
		EndIf

		Code := Code + ' ON GOTFOCUS ' + __MVGET ( DesignForm + 'OnGotFocus' )
		Code := Code + ' ON LOSTFOCUS ' + __MVGET ( DesignForm + 'OnLostFocus' )
		Code := Code + ' ON SCROLLUP ' + __MVGET ( DesignForm + 'ONSCROLLUP' )
		Code := Code + ' ON SCROLLDOWN ' + __MVGET ( DesignForm + 'ONSCROLLDOWN' )
		Code := Code + ' ON SCROLLLEFT ' + __MVGET ( DesignForm + 'ONSCROLLLEFT' )
		Code := Code + ' ON SCROLLRIGHT ' + __MVGET ( DesignForm + 'ONSCROLLRIGHT' )
		Code := Code + ' ON HSCROLLBOX ' + __MVGET ( DesignForm + 'ONHSCROLLBOX' )
		Code := Code + ' ON VSCROLLBOX ' + __MVGET ( DesignForm + 'ONVSCROLLBOX' )

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'HelpButton' ) ) ) == '.T.'
			Code := Code + ' HELPBUTTON '
		EndIf

	ElseIf	WindowType == 'SPLITCHILD'

		Code := Code + 'DEFINE WINDOW TEMPLATE ' ;
		+ ' WIDTH ' ;
		+ ALLTRIM(STR(GetProperty ( DesignForm , 'Width' ))) ;
		+ ' HEIGHT ' ;
		+ ALLTRIM(STR(GetProperty ( DesignForm , 'Height' ))) ;
		+ ' VIRTUAL WIDTH ' ;
		+ ALLTRIM( __MVGET ( DesignForm + 'VirtualWidth' )) ;
		+ ' VIRTUAL HEIGHT ' ;
		+ ALLTRIM( __MVGET ( DesignForm + 'VirtualHeight' )) ;
		+ ' TITLE ' ;
		+ chr(34) + GetProperty ( DesignForm , 'Title' ) + chr(34) ;
		+ ' SPLITCHILD'

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'TitleBar' ) ) ) == '.F.'
			Code := Code + ' NOCAPTION'
		EndIf

		if Empty (__MVGET ( DesignForm + 'Cursor' ))
			Code := Code + ' CURSOR NIL'
		Else
			Code := Code + ' CURSOR ' + chr(34) + __MVGET ( DesignForm + 'Cursor' ) + chr(34)
		EndIf

		if Empty (__MVGET ( DesignForm + 'GripperText' ))
			Code := Code + ' GRIPPERTEXT NIL'
		Else
			Code := Code + ' GRIPPERTEXT ' + chr(34) + __MVGET ( DesignForm + 'GripperText' ) + chr(34)
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'Break' ) ) ) == '.T.'
			Code := Code + ' BREAK'
		EndIf

		if ALLTRIM ( HMG_UPPER (__MVGET ( DesignForm + 'Focused' ) ) ) == '.T.'
			Code := Code + ' FOCUSED'
		EndIf

		Code := Code + ' ON GOTFOCUS ' + __MVGET ( DesignForm + 'OnGotFocus' )
		Code := Code + ' ON LOSTFOCUS ' + __MVGET ( DesignForm + 'OnLostFocus' )
		Code := Code + ' ON SCROLLUP ' + __MVGET ( DesignForm + 'ONSCROLLUP' )
		Code := Code + ' ON SCROLLDOWN ' + __MVGET ( DesignForm + 'ONSCROLLDOWN' )
		Code := Code + ' ON SCROLLLEFT ' + __MVGET ( DesignForm + 'ONSCROLLLEFT' )
		Code := Code + ' ON SCROLLRIGHT ' + __MVGET ( DesignForm + 'ONSCROLLRIGHT' )
		Code := Code + ' ON HSCROLLBOX ' + __MVGET ( DesignForm + 'ONHSCROLLBOX' )
		Code := Code + ' ON VSCROLLBOX ' + __MVGET ( DesignForm + 'ONVSCROLLBOX' )

	EndIf

	Code := Code + chr(13) + chr (10)

	If .Not. Empty(_hmgide_CurrentMainMenu  )
		Code := Code + chr(13) + chr (10)
		Code := Code + _hmgide_CurrentMainMenu
	EndIf

	If .Not. Empty(_hmgide_CurrentToolBar )
		Code := Code + chr(13) + chr (10)
		Code := Code + _hmgide_CurrentToolBar
	EndIf

	If .Not. Empty(_hmgide_CurrentContextMenu )
		Code := Code + chr(13) + chr (10)
		Code := Code + _hmgide_CurrentContextMenu
	EndIf

	If .Not. Empty(_hmgide_CurrentStatusBar )
		Code := Code + chr(13) + chr (10)
		Code := Code + _hmgide_CurrentStatusBar
	EndIf

	If .Not. Empty(_hmgide_CurrentNotifyMenu )
		Code := Code + chr(13) + chr (10)
		Code := Code + _hmgide_CurrentNotifyMenu
	EndIf

	For b := 1 To HMG_LEN ( _hmgide_aDropDownMenus )

		If .Not. Empty ( _hmgide_aDropDownMenus [b] )
			Code := Code + chr(13) + chr (10)
			Code := Code + _hmgide_aDropDownMenus [b]
		EndIf

	Next b

	If .Not. Empty(_hmgide_CurrentSplitBox )
		Code := Code + chr(13) + chr (10)
		Code := Code + _hmgide_CurrentSplitBox
	EndIf

        For i := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )

		If _HMG_SYSDATA [   4 ] [i] == DesignFormhandle

			If !Empty (_HMG_SYSDATA [   2 ] [ i ] ) .and. HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'INTERNAL_TIMER_1' .and.  HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'TEXT_DUMMY' .and. _HMG_SYSDATA [ 13 ]  [i] ==  .F.

				if _HMG_SYSDATA [ 23 ] [i] == -1 .and. _HMG_SYSDATA [ 24 ] [i] == -1

					if _HMG_SYSDATA [ 1 ] [i] == 'TAB'

						Code := Code + CRLF + '    DEFINE TAB ' ;
							+ ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) ;
							+ ' AT ' ;
							+ ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) ;
							+ ' , ' ;
							+  ALLTRIM(STR(GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ))) ;
							+ ' WIDTH ' + ALLTRIM(STR(GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ))) ;
							+ ' HEIGHT ' + ALLTRIM(STR(GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ))) ;
							+ ' VALUE ' + __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'Value' ) ;
							+ ' FONT ' + chr(34) + __MVGET (_HMG_SYSDATA [   2 ] [ i ]  + 'FontName') + chr(34) ;
							+ ' SIZE ' + __MVGET (_HMG_SYSDATA [   2 ] [ i ]  + 'FontSize') ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'FontBold'))) =='.T.',' BOLD','') ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'FontItalic'))) =='.T.',' ITALIC','') ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'FontUnderLine'))) =='.T.',' UNDERLINE','') ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'FontStrikeOut'))) =='.T.',' STRIKEOUT','') ;
							+ ' TOOLTIP ' + chr(34) + __MVGET (_HMG_SYSDATA [   2 ] [ i ]  + 'ToolTip') + chr(34) ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'Buttons'))) =='.T.',' BUTTONS','') ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'Flat'))) =='.T.',' FLAT','') ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'HotTrack'))) =='.T.',' HOTTRACK','') ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'Vertical'))) =='.T.',' VERTICAL','') ;
							+ ' ON CHANGE ' + __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'OnChange' ) ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'TabStop'))) =='.F.',' NOTABSTOP','') ;
							+ IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'Multiline'))) =='.T.',' MULTILINE','') ;
							+ CRLF

		                                PageMap := _HMG_SYSDATA [ 7 ] [i]

						For x := 1 To HMG_LEN ( PageMap )

							Code := Code + CRLF
							Code := Code + '        PAGE ' + chr(34) + _HMG_SYSDATA [ 33 ] [i] [x] + chr(34)

							aTemp := StringToArray ( __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'PageImages' ) )

							ImageFlag := .F.

							For a := 1 To HMG_LEN (aTemp)
								If !Empty(aTemp[a])
									ImageFlag := .T.
									Exit
								EndIf
							Next a

							if ImageFlag == .T.

								Code := Code + ' IMAGE ' + chr(34) + aTemp [x] + chr(34) + CRLF

							else

								Code := Code + CRLF

							endif

							For j := 1 To HMG_LEN ( PageMap [x] )

								if VALTYPE (PageMap [x] [j]) == 'N'
									idx := ascan ( _HMG_SYSDATA [   3 ] , PageMap [x] [j] )
									Code := Code + GenCode (idx , .t. )

								Elseif VALTYPE (PageMap [x] [j]) == 'A'

									for k := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )

										if VALTYPE ( _HMG_SYSDATA [   3 ] [k] )	== 'A'

											if _HMG_SYSDATA [   3 ] [k] [1]	== PageMap [x] [j] [1]

												Code := Code + GenCode (k , .t. )
												Exit

											endif

										endif

									next k

								endif

							Next j

							Code := Code + CRLF
							Code := Code + '        END PAGE ' + CRLF

						Next x

						Code := Code + CRLF
						Code := Code + '    END TAB ' + CRLF

					Else

						Code := Code + GenCode (i,.f.)

					EndIf

				endif

			EndIf

		EndIf

	Next i

	Code := Code + '' + CRLF
	Code := Code + 'END WINDOW' + chr(13) + chr (10)
	Code := Code + '' + CRLF

	if VALTYPE ( lView ) == 'L' .and. lView == .T.

		RetVal := Code

	Else

		If HMG_UPPER ( HB_URIGHT ( ALLTRIM(OpenFormName) , 4 ) ) != '.FMG'
			OpenFormName := ALLTRIM(OpenFormName) + '.fmg'
		EndIf

		SaveString ( OpenFormName , Code )
		DesignFormModified := .F.

	EndIf

Return RetVal

*------------------------------------------------------------------------------*
Function GenCode (i,e)
*------------------------------------------------------------------------------*
Local ControlType
Local Code := ''
Local filler
Local z
Local aProperties
Local aEvents
Local x

	if i == 0
		Return ''
	endif

	if e == .t.
		filler := '        '
	else
		filler := ''
	endif

*	_HMG_SYSDATA [ 39 ] value
*
*	1: CHECKBUTTON
*	2: PROGRESSBAR
*	3: PLAYER
*	4: IPADDRESS
*	5: TIMER
*	6: HYPERLINK
*	7: ACTIVEX
*	8: CHILD WINDOW
*	>10: USER

	If	_HMG_SYSDATA [ 1 ] [ i ] == 'BUTTON' .and. _HMG_SYSDATA [ 39 ] [ i ] == 0
		ControlType := 'BUTTON'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'CHECKBOX' .and. _HMG_SYSDATA [ 39 ] [ i ] == 0
		ControlType := 'CHECKBOX'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LIST'
		ControlType := 'LISTBOX'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'COMBO'
		ControlType := 'COMBOBOX'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'CHECKBOX' .and. _HMG_SYSDATA [ 39 ] [ i ] == 1
		ControlType := 'CHECKBUTTON'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'GRID'
		ControlType := 'GRID'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'SLIDER'
		ControlType := 'SLIDER'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'SPINNER'
		ControlType := 'SPINNER'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'IMAGE'
		ControlType := 'IMAGE'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'TREE'
		ControlType := 'TREE'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'DATEPICK'
		ControlType := 'DATEPICKER'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'TEXT'
		ControlType := 'TEXTBOX'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'EDIT'
		ControlType := 'EDITBOX'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 0
		ControlType := 'LABEL'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 7
		ControlType := 'ACTIVEX'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 8
		ControlType := 'WINDOW'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'BROWSE'
		ControlType := 'BROWSE'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'RADIOGROUP'
		ControlType := 'RADIOGROUP'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'FRAME'
		ControlType := 'FRAME'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'ANIMATEBOX'
		ControlType := 'ANIMATEBOX'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL'  .and. _HMG_SYSDATA [ 39 ] [ i ] == 6
		ControlType := 'HYPERLINK'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'MONTHCAL'
		ControlType := 'MONTHCALENDAR'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'RICHEDIT'
		ControlType := 'RICHEDITBOX'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 2
		ControlType := 'PROGRESSBAR'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 3
		ControlType := 'PLAYER'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 4
		ControlType := 'IPADDRESS'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'BUTTON' .and. _HMG_SYSDATA [ 39 ] [ i ] == 5
		ControlType := 'TIMER'

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] > 10
		ControlType := 'USER'

	EndIf

	Code := Code + '' + CRLF


	If ControlType = 'USER'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ALLTRIM ( HMG_UPPER ( aComponentNames [ _HMG_SYSDATA [ 39 ] [ i ] - 10 ] ) ) + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF

		z := _HMG_SYSDATA [ 39 ] [ i ] - 10

		aProperties	:= aComponentProperties	[z]
		aEvents		:= aComponentEvents	[z]

		For x := 1 To HMG_LEN ( aProperties )

			If	.Not. ( HMG_UPPER ( ALLTRIM ( aProperties [x] ) ) == 'ROW' ;
				.or. ;
				HMG_UPPER ( ALLTRIM ( aProperties [x] ) ) == 'COL' ;
				.or. ;
				HMG_UPPER ( ALLTRIM ( aProperties [x] ) ) == 'WIDTH' ;
				.or. ;
				HMG_UPPER ( ALLTRIM ( aProperties [x] ) ) == 'HEIGHT' ;
				.or. ;
				HMG_UPPER ( ALLTRIM ( aProperties [x] ) ) == 'NAME' )

				Code := Code + filler + '        ' + HMG_UPPER ( ALLTRIM ( aProperties [x] ) )  + ' ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + HMG_UPPER ( ALLTRIM ( aProperties [x] ) ) ) + CRLF

			EndIf

		Next x

		For x := 1 To HMG_LEN ( aEvents )

			Code := Code + filler + '        ' + HMG_UPPER ( ALLTRIM ( aEvents [x] ) )  + ' ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + HMG_UPPER ( ALLTRIM ( aEvents [x] ) ) ) + CRLF

		Next x


	//.....................................................................
	Elseif ControlType = 'TREE'
	//.....................................................................

		Code := Code + filler +'    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + ' AT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + ' , ' +  ALLTRIM(STR(GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ))) + ' WIDTH ' + ALLTRIM(STR(GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ))) + ' HEIGHT ' + ALLTRIM(STR(GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ))) + ' VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' )  + ' FONT ' + chr(34) + __MVGET (_HMG_SYSDATA [   2 ] [ i ]  + 'FontName') + chr(34) + ' SIZE ' + __MVGET (_HMG_SYSDATA [   2 ] [ i ]  + 'FontSize') + IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'FontBold'))) =='.T.',' BOLD','') + IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'FontItalic'))) =='.T.',' ITALIC','') + IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'FontUnderLine'))) =='.T.',' UNDERLINE','') + IF ( ALLTRIM(HMG_UPPER(__MVGET(_HMG_SYSDATA [   2 ][i]+'FontStrikeOut'))) =='.T.',' STRIKEOUT','') + ' TOOLTIP ' + chr(34) + __MVGET (_HMG_SYSDATA [   2 ] [ i ]  + 'ToolTip') + chr(34)  + ' ON GOTFOCUS ' + __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'OnGotFocus' )  + ' ON CHANGE ' + __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'OnChange' ) + ' ON LOSTFOCUS ' + __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'OnLostFocus' ) + ' ON DBLCLICK ' + __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'OnDblClick' ) + ' NODEIMAGES ' + __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'NodeImages' ) + ' ITEMIMAGES ' + __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'ItemImages' ) + if ( ALLTRIM(HMG_UPPER(__MVGET( _HMG_SYSDATA [   2 ] [ i ] + 'RootButton' ))) == '.T.' , '' , ' NOROOTBUTTON' ) + if ( ALLTRIM(HMG_UPPER(__MVGET( _HMG_SYSDATA [   2 ] [ i ] + 'ItemIds' ))) == '.T.' , ' ITEMIDS' , '' ) + ' HELPID ' + __MVGET( _HMG_SYSDATA [   2 ] [ i ]  + 'HelpId' )  + CRLF

	//.....................................................................
	ElseIf ControlType = 'TIMER'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + ' INTERVAL ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Interval' ) + ' ACTION ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Action' ) + CRLF

	//.....................................................................
	ElseIf ControlType = 'BUTTON'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        ACTION ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Action' ) + CRLF
		if empty ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Caption' ) )
			Code := Code + filler + '        CAPTION Nil' + CRLF
		else
                        Code := Code + filler + '        CAPTION ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Caption' ) + chr(34) + CRLF
		endif
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        FLAT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Flat' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        TRANSPARENT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Transparent' ) + CRLF
		Code := Code + filler + '        MULTILINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MultiLine' ) + CRLF

		if empty ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Picture' ) )
			Code := Code + filler + '        PICTURE Nil' + CRLF
		else
			Code := Code + filler + '        PICTURE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Picture' ) + chr(34) + CRLF
		endif

		Code := Code + filler + '        PICTALIGNMENT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'PictAlignment' ) + CRLF

	//.....................................................................
	ElseIf ControlType = 'CHECKBOX'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        CAPTION ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Caption' ) + chr(34) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))
			if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))) != 'NIL'
				Code := Code + filler + '        FIELD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ) + CRLF
			endif
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        TRANSPARENT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Transparent' ) + CRLF

	//.....................................................................
	ElseIf ControlType = 'LISTBOX'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        ITEMS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Items' ) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

		Code := Code + filler + '        ONDBLCLICK ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnDblClick' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        SORT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Sort' ) + CRLF
		Code := Code + filler + '        MULTISELECT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MultiSelect' ) + CRLF

		Code := Code + filler + '        DRAGITEMS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DragItems' ) + CRLF

	//.....................................................................
	ElseIf ControlType = 'COMBOBOX'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        ITEMS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Items' ) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        SORT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Sort' ) + CRLF
		Code := Code + filler + '        ONENTER ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnEnter' ) + CRLF
		Code := Code + filler + '        ONDISPLAYCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnDisplayChange' ) + CRLF
		Code := Code + filler + '        DISPLAYEDIT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DisplayEdit' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ValueSource' ))
			Code := Code + filler + '        VALUESOURCE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ValueSource' ) + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ItemSource' ))
			if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ItemSource' ))) != 'NIL'
				Code := Code + filler + '        ITEMSOURCE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ItemSource' ) + CRLF
			endif
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Image' ))
			Code := Code + filler + '        IMAGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Image' ) + CRLF
		Else
			Code := Code + filler + '        IMAGE NIL' + CRLF
		EndIf

		Code := Code + filler + '        DROPPEDWIDTH ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DroppedWidth' ) + CRLF

		Code := Code + filler + '        ONDROPDOWN ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnDropDown' ) + CRLF
		Code := Code + filler + '        ONCLOSEUP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnCloseUp' ) + CRLF


	//.....................................................................
	ElseIf ControlType = 'CHECKBUTTON'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        CAPTION ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Caption' ) + chr(34) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF

		if empty ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Picture' ) )
			Code := Code + filler + '        PICTURE Nil' + CRLF
		else
			Code := Code + filler + '        PICTURE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Picture' ) + chr(34) + CRLF
		endif

	//.....................................................................
	ElseIf ControlType = 'GRID'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        ITEMS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Items' ) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        WIDTHS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Widths' ) + CRLF
		Code := Code + filler + '        HEADERS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Headers' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        ONDBLCLICK ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnDblClick' ) + CRLF
		Code := Code + filler + '        ONHEADCLICK ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnHeadClick' ) + CRLF
		Code := Code + filler + '        ONQUERYDATA ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnQueryData' ) + CRLF
		Code := Code + filler + '        MULTISELECT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MultiSelect' ) + CRLF
		Code := Code + filler + '        ALLOWEDIT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AllowEdit' ) + CRLF
		Code := Code + filler + '        VIRTUAL ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Virtual' ) + CRLF

		Code := Code + filler + '        DYNAMICBACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DynamicBackColor' ) + CRLF
		Code := Code + filler + '        DYNAMICFORECOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DynamicForeColor' ) + CRLF
		Code := Code + filler + '        COLUMNWHEN ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ColumnWhen' ) + CRLF
		Code := Code + filler + '        COLUMNVALID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ColumnValid' ) + CRLF
		Code := Code + filler + '        COLUMNCONTROLS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ColumnControls' ) + CRLF
		Code := Code + filler + '        SHOWHEADERS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ShowHeaders' ) + CRLF

		Code := Code + filler + '        CELLNAVIGATION ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'CellNavigation' ) + CRLF

		if ALLTRIM ( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Lines' ) ) ) == '.T.'
			Code := Code + filler + '        NOLINES .F.' + CRLF
		else
			Code := Code + filler + '        NOLINES .T.' + CRLF
		endif

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ))
			Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Else
			Code := Code + filler + '        HELPID NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Image' ))
			Code := Code + filler + '        IMAGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Image' ) + CRLF
		Else
			Code := Code + filler + '        IMAGE NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Justify' ))
			Code := Code + filler + '        JUSTIFY ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Justify' ) + CRLF
		Else
			Code := Code + filler + '        JUSTIFY NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ItemCount' ))
			Code := Code + filler + '        ITEMCOUNT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ItemCount' ) + CRLF
		Else
			Code := Code + filler + '        ITEMCOUNT NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

		Code := Code + filler + '        HEADERIMAGES ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HeaderImages' ) + CRLF

		Code := Code + filler + '        ROWSOURCE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'RowSource' ) + CRLF
		Code := Code + filler + '        COLUMNFIELDS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ColumnFields' ) + CRLF
		Code := Code + filler + '        ALLOWAPPEND ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AllowAppend' ) + CRLF
		Code := Code + filler + '        ALLOWDELETE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AllowDelete' ) + CRLF
		Code := Code + filler + '        BUFFERED ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Buffered' ) + CRLF
		Code := Code + filler + '        DYNAMICDISPLAY ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DynamicDisplay' ) + CRLF
		Code := Code + filler + '        ONSAVE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnSave' ) + CRLF
		Code := Code + filler + '        LOCKCOLUMNS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'LockColumns' ) + CRLF

	//.....................................................................
	ElseIf ControlType = 'SLIDER'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        RANGEMIN ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'RangeMin' ) + CRLF
		Code := Code + filler + '        RANGEMAX ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'RangeMax' ) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF

		if HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TickMarks' ))) == 'NONE'
			Code := Code + filler + '        NOTICKS .T. ' + CRLF
		ElseIf HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TickMarks' ))) == 'BOTH'
			Code := Code + filler + '        BOTH .T. ' + CRLF
		Elseif HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TickMarks' ))) == 'LEFT'
			Code := Code + filler + '        LEFT .T. ' + CRLF
		Elseif HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TickMarks' ))) == 'TOP'
			Code := Code + filler + '        TOP .T. ' + CRLF
		EndIf

		if HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Orientation' ))) == 'VERTICAL'
			Code := Code + filler + '        VERTICAL .T. ' + CRLF
		endif

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

	//.....................................................................
	ElseIf ControlType = 'SPINNER'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        RANGEMIN ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'RangeMin' ) + CRLF
		Code := Code + filler + '        RANGEMAX ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'RangeMax' ) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        WRAP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Wrap' ) + CRLF
		Code := Code + filler + '        READONLY ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ReadOnly' ) + CRLF
		Code := Code + filler + '        INCREMENT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Increment' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

	//.....................................................................
	ElseIf ControlType = 'IMAGE'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        PICTURE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Picture' ) + chr(34) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        STRETCH ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Stretch' ) + CRLF
		Code := Code + filler + '        ACTION ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Action' ) + CRLF

	//.....................................................................
	ElseIf ControlType = 'ACTIVEX'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        PROGID ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ProgId' ) + chr(34) + CRLF

	//.....................................................................
	ElseIf ControlType = 'WINDOW'
	//.....................................................................

		Code := Code + filler + '    LOAD WINDOW ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + ' AT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) ))  + ' , ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + ' WIDTH ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + ' HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF

	//.....................................................................
	ElseIf ControlType = 'DATEPICKER'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        ONENTER ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnEnter' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        SHOWNONE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ShowNone' ) + CRLF
		Code := Code + filler + '        UPDOWN ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'UpDown' ) + CRLF
		Code := Code + filler + '        RIGHTALIGN ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'RightAlign' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))
			if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))) != 'NIL'
				Code := Code + filler + '        FIELD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ) + CRLF
			endif
		EndIf

	//.....................................................................
	ElseIf ControlType = 'TEXTBOX'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        ONENTER ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnEnter' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        READONLY ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ReadOnly' ) + CRLF
		Code := Code + filler + '        RIGHTALIGN ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'RightAlign' ) + CRLF

		Code := Code + filler + '        DISABLEDBACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DisabledBackColor' ) + CRLF
		Code := Code + filler + '        DISABLEDFONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DisabledFontColor' ) + CRLF

		Code := Code + filler + '        CASECONVERT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'CaseConvert' ) + CRLF

		if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Password' ))) == '.T.'
			Code := Code + filler + '        PASSWORD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Password' ) + CRLF
		endif

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MaxLength' ))
			if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MaxLength' ))) != 'NIL'
				Code := Code + filler + '        MAXLENGTH ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MaxLength' ) + CRLF
			endif
		endif

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))
			if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))) != 'NIL'
				Code := Code + filler + '        FIELD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ) + CRLF
			endif
		EndIf

		if empty ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'InputMask' ) )
			Code := Code + filler + '        INPUTMASK Nil' + CRLF
		else
			Code := Code + filler + '        INPUTMASK ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'InputMask' ) + chr(34) + CRLF
		endif

		if empty ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Format' ) )
			Code := Code + filler + '        FORMAT Nil' + CRLF
		else
			Code := Code + filler + '        FORMAT ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Format' ) + chr(34) + CRLF
		endif

		if HMG_UPPER (ALLTRIM(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DataType' ))) == 'NUMERIC'
			Code := Code + filler + '        NUMERIC .T. ' + CRLF
			if empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ))
				Code := Code + filler + '        VALUE Nil' + CRLF
			Else
				Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
			endif
		Elseif HMG_UPPER (ALLTRIM(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DataType' ))) == 'DATE'
			Code := Code + filler + '        DATE .T. ' + CRLF
			if empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ))
				Code := Code + filler + '        VALUE Nil' + CRLF
			Else
				Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
			endif
		Elseif HMG_UPPER (ALLTRIM(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DataType' ))) == 'CHARACTER'
			Code := Code + filler + '        VALUE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + chr(34) + CRLF
		endif

	//.....................................................................
	ElseIf ControlType = 'EDITBOX'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        VALUE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        READONLY ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ReadOnly' ) + CRLF

		Code := Code + filler + '        HSCROLLBAR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HScrollBar' ) + CRLF
		Code := Code + filler + '        VSCROLLBAR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'VScrollBar' ) + CRLF

		Code := Code + filler + '        DISABLEDBACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DisabledBackColor' ) + CRLF
		Code := Code + filler + '        DISABLEDFONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DisabledFontColor' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MaxLength' ))
			if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MaxLength' ))) != 'NIL'
				Code := Code + filler + '        MAXLENGTH ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MaxLength' ) + CRLF
			endif
		endif

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))
			if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))) != 'NIL'
				Code := Code + filler + '        FIELD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ) + CRLF
			endif
		EndIf

	//.....................................................................
	ElseIf ControlType = 'LABEL'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        VALUE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        TRANSPARENT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Transparent' ) + CRLF
		Code := Code + filler + '        ACTION ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Action' ) + CRLF
		Code := Code + filler + '        AUTOSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AutoSize' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

		If HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Alignment' ))) == 'RIGHT'
			Code := Code + filler + '        RIGHTALIGN .T. ' + CRLF
		Elseif HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Alignment' ))) == 'CENTER'
			Code := Code + filler + '        CENTERALIGN .T. ' + CRLF
		EndIf

	//.....................................................................
	ElseIf ControlType = 'BROWSE'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        WIDTHS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Widths' ) + CRLF
		Code := Code + filler + '        HEADERS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Headers' ) + CRLF
		Code := Code + filler + '        WORKAREA ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'WorkArea' ) + CRLF
		Code := Code + filler + '        FIELDS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Fields' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        ONDBLCLICK ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnDblClick' ) + CRLF
		Code := Code + filler + '        ALLOWEDIT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AllowEdit' ) + CRLF
		Code := Code + filler + '        ALLOWAPPEND ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AllowAppend' ) + CRLF
		Code := Code + filler + '        ONHEADCLICK ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnHeadClick' ) + CRLF
		Code := Code + filler + '        ALLOWDELETE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AllowDelete' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        VALID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Valid' ) + CRLF
		Code := Code + filler + '        VALIDMESSAGES ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ValidMessages' ) + CRLF
		Code := Code + filler + '        LOCK ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Lock' ) + CRLF
		Code := Code + filler + '        VSCROLLBAR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'vScrollBar' ) + CRLF

		Code := Code + filler + '        DYNAMICBACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DynamicBackColor' ) + CRLF
		Code := Code + filler + '        DYNAMICFORECOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DynamicForeColor' ) + CRLF

		Code := Code + filler + '        INPUTMASK ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'InputMask' ) + CRLF

		Code := Code + filler + '        FORMAT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Format' ) + CRLF

		Code := Code + filler + '        WHEN ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'When' ) + CRLF

		Code := Code + filler + '        INPUTITEMS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'InputItems' ) + CRLF
		Code := Code + filler + '        DISPLAYITEMS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'DisplayItems' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Image' ))
			Code := Code + filler + '        IMAGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Image' ) + CRLF
		Else
			Code := Code + filler + '        IMAGE NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Justify' ))
			Code := Code + filler + '        JUSTIFY ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Justify' ) + CRLF
		Else
			Code := Code + filler + '        JUSTIFY NIL' + CRLF
		EndIf

		if ALLTRIM ( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Lines' ) ) ) == '.T.'
			Code := Code + filler + '        NOLINES .F.' + CRLF
		else
			Code := Code + filler + '        NOLINES .T.' + CRLF
		endif

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ReadOnlyFields' ))
			Code := Code + filler + '        READONLYFIELDS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ReadOnlyFields' ) + CRLF
		Else
			Code := Code + filler + '        READONLYFIELDS NIL' + CRLF
		EndIf

		Code := Code + filler + '        HEADERIMAGES ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HeaderImages' ) + CRLF

	//.....................................................................
	ElseIf ControlType = 'RADIOGROUP'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        OPTIONS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Options' ) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        TRANSPARENT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Transparent' ) + CRLF
		Code := Code + filler + '        SPACING ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Spacing' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

		Code := Code + filler + '        READONLY ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ReadOnly' ) + CRLF

		if HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Orientation' ))) == 'HORIZONTAL'
			Code := Code + filler + '        HORIZONTAL .T. ' + CRLF
		else
			Code := Code + filler + '        HORIZONTAL .F. ' + CRLF
		endif

	//.....................................................................
	ElseIf ControlType = 'FRAME'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF

		if Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Caption' ))
			Code := Code + filler + '        CAPTION NIL' + CRLF
		Else
			Code := Code + filler + '        CAPTION ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Caption' ) + chr(34) + CRLF
		EndIf



		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

		if HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Transparent' ) ) ) = '.F.'
			Code := Code + filler + '        OPAQUE .T.' + CRLF
		else
			Code := Code + filler + '        OPAQUE .F.' + CRLF
		EndIf

	//.....................................................................
	ElseIf ControlType = 'ANIMATEBOX'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        FILE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'File' ) + chr(34) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TRANSPARENT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Transparent' ) + CRLF
		Code := Code + filler + '        AUTOPLAY ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AutoPlay' ) + CRLF
		Code := Code + filler + '        CENTER ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Center' ) + CRLF

	//.....................................................................
	ElseIf ControlType = 'HYPERLINK'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        VALUE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + chr(34) + CRLF
		Code := Code + filler + '        ADDRESS ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Address' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        AUTOSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AutoSize' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        HANDCURSOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HandCursor' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ))
			Code := Code + filler + '        FONTCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontColor' ) + CRLF
		Else
			Code := Code + filler + '        FONTCOLOR NIL' + CRLF
		EndIf

	//.....................................................................
	ElseIf ControlType = 'MONTHCALENDAR'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF

		if HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Today' ) ) ) = '.T.'
			Code := Code + filler + '        NOTODAY .F.' + CRLF
		else
			Code := Code + filler + '        NOTODAY .T.' + CRLF
		EndIf

		if HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TodayCircle' ) ) ) = '.T.'
			Code := Code + filler + '        NOTODAYCIRCLE .F.' + CRLF
		else
			Code := Code + filler + '        NOTODAYCIRCLE .T.' + CRLF
		EndIf

		if HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'WeekNumbers' ) ) ) = '.T.'
			Code := Code + filler + '        WEEKNUMBERS .T.' + CRLF
		else
			Code := Code + filler + '        WEEKNUMBERS .F.' + CRLF
		EndIf

	//.....................................................................
	ElseIf ControlType = 'RICHEDITBOX'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        VALUE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        READONLY ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ReadOnly' ) + CRLF

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MaxLength' ))
			if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MaxLength' ))) != 'NIL'
				Code := Code + filler + '        MAXLENGTH ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'MaxLength' ) + CRLF
			endif
		endif

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))
			if ALLTRIM(HMG_UPPER(__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ))) != 'NIL'
				Code := Code + filler + '        FIELD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Field' ) + CRLF
			endif
		EndIf

	//.....................................................................
	ElseIf ControlType = 'PROGRESSBAR'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        RANGEMIN ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'RangeMin' ) + CRLF
		Code := Code + filler + '        RANGEMAX ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'RangeMax' ) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF
		Code := Code + filler + '        SMOOTH ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Smooth' ) + CRLF

		if HMG_UPPER ( ALLTRIM (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Orientation' ))) == 'VERTICAL'
			Code := Code + filler + '        VERTICAL .T. ' + CRLF
		else
			Code := Code + filler + '        VERTICAL .F. ' + CRLF
		endif

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ))
			Code := Code + filler + '        BACKCOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'BackColor' ) + CRLF
		Else
			Code := Code + filler + '        BACKCOLOR NIL' + CRLF
		EndIf

		if !Empty (__MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ForeColor' ))
			Code := Code + filler + '        FORECOLOR ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ForeColor' ) + CRLF
		Else
			Code := Code + filler + '        FORECOLOR NIL' + CRLF
		EndIf

	//.....................................................................
	ElseIf ControlType = 'PLAYER'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        FILE ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'File' ) + chr(34) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF

		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AutoSizeWindow' ) ) ) == '.T.'
			Code := Code + filler + '        NOAUTOSIZEWINDOW .F.' + CRLF
		Else
			Code := Code + filler + '        NOAUTOSIZEWINDOW .T.' + CRLF
		EndIf
		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'AutoSizeMovie' ) ) ) == '.T.'
			Code := Code + filler + '        NOAUTOSIZEMOVIE .F.' + CRLF
		Else
			Code := Code + filler + '        NOAUTOSIZEMOVIE .T.' + CRLF
		EndIf
		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ErrorDlg' ) ) ) == '.T.'
			Code := Code + filler + '        NOERRORDLG .F.' + CRLF
		Else
			Code := Code + filler + '        NOERRORDLG .T.' + CRLF
		EndIf
		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Menu' ) ) ) == '.T.'
			Code := Code + filler + '        NOMENU .F.' + CRLF
		Else
			Code := Code + filler + '        NOMENU .T.' + CRLF
		EndIf
		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Open' ) ) ) == '.T.'
			Code := Code + filler + '        NOOPEN .F.' + CRLF
		Else
			Code := Code + filler + '        NOOPEN .T.' + CRLF
		EndIf
		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Playbar' ) ) ) == '.T.'
			Code := Code + filler + '        NOPLAYBAR .F.' + CRLF
		Else
			Code := Code + filler + '        NOPLAYBAR .T.' + CRLF
		EndIf
		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ShowAll' ) ) ) == '.T.'
			Code := Code + filler + '        SHOWALL .T.' + CRLF
		Else
			Code := Code + filler + '        SHOWALL .F.' + CRLF
		EndIf
		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ShowMode' ) ) ) == '.T.'
			Code := Code + filler + '        SHOWMODE .T.' + CRLF
		Else
			Code := Code + filler + '        SHOWMODE .F.' + CRLF
		EndIf
		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ShowName' ) ) ) == '.T.'
			Code := Code + filler + '        SHOWNAME .T.' + CRLF
		Else
			Code := Code + filler + '        SHOWNAME .F.' + CRLF
		EndIf
		If ALLTRIM( HMG_UPPER ( __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Showposition' ) ) ) == '.T.'
			Code := Code + filler + '        SHOWPOSITION .T.' + CRLF
		Else
			Code := Code + filler + '        SHOWPOSITION .F.' + CRLF
		EndIf

	//.....................................................................
	ElseIf ControlType = 'IPADDRESS'
	//.....................................................................

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF
		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF
		Code := Code + filler + '        VALUE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Value' ) + CRLF
		Code := Code + filler + '        FONTNAME ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontName' ) + chr(34) + CRLF
		Code := Code + filler + '        FONTSIZE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontSize' ) + CRLF
		Code := Code + filler + '        TOOLTIP ' + chr(34) + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'ToolTip' ) + chr(34) + CRLF
		Code := Code + filler + '        ONCHANGE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnChange' ) + CRLF
		Code := Code + filler + '        ONGOTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnGotFocus' ) + CRLF
		Code := Code + filler + '        ONLOSTFOCUS ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'OnLostFocus' ) + CRLF
		Code := Code + filler + '        FONTBOLD ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontBold' ) + CRLF
		Code := Code + filler + '        FONTITALIC ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontItalic' ) + CRLF
		Code := Code + filler + '        FONTUNDERLINE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontUnderLine' ) + CRLF
		Code := Code + filler + '        FONTSTRIKEOUT ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'FontStrikeout' ) + CRLF
		Code := Code + filler + '        HELPID ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'HelpId' ) + CRLF
		Code := Code + filler + '        TABSTOP ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'TabStop' ) + CRLF
		Code := Code + filler + '        VISIBLE ' + __MVGET ( _HMG_SYSDATA [   2 ] [ i ] + 'Visible' ) + CRLF

	Else

		Code := Code + filler + '    DEFINE ' + ControlType + ' ' + ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) + CRLF

		Code := Code + filler + '        ROW    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Row' ) )) + CRLF
		Code := Code + filler + '        COL    ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Col' ) )) + CRLF
		Code := Code + filler + '        WIDTH  ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Width' ) )) + CRLF
		Code := Code + filler + '        HEIGHT ' + ALLTRIM(STR( GetProperty ( DesignForm , ALLTRIM ( _HMG_SYSDATA [   2 ] [ i ] ) , 'Height' ) )) + CRLF

	EndIf


	If ControlType == 'USER'

		Code := Code + filler + '    END ' + ALLTRIM ( HMG_UPPER ( aComponentNames [ _HMG_SYSDATA [ 39 ] [ i ] - 10 ] ) ) + CRLF

	Else

		If ControlType != 'TIMER' .and. ControlType != 'WINDOW'

			Code := Code + filler + '    END ' + ControlType + CRLF

		EndIf


	EndIf

Return Code

*------------------------------------------------------------------------------*
Procedure EditTabOrder()
*------------------------------------------------------------------------------*
Private aTree := {}
Private aTreeTabIndex := {}
Private aTreeTabPage := {}
Private aTreeTabPos := {}
Private aTreeTabPageLength := {}

	if !_IsWIndowDefined (DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	DEFINE WINDOW EditTabOrder ;
		AT 0,0 ;
		WIDTH 418 ;
		HEIGHT 390 + GetTitleHeight() + 2 ;
		TITLE aMsgs [ 170 ]   ;
		MODAL ;
		NOSIZE

		DEFINE FRAME filler1
			ROW	4
			COL	5
			WIDTH	332
			HEIGHT	30
		END FRAME

		DEFINE FRAME filler2
			ROW	4
			COL	339
			WIDTH	66
			HEIGHT	30
		END FRAME

		DEFINE FRAME filler3
			ROW	37
			COL	5
			WIDTH	400
			HEIGHT	344
		END FRAME

		DEFINE LABEL label1
			ROW	14
			COL	14
			WIDTH	300
			HEIGHT	25
			VALUE aMsgs [ 169 ]
			FONTNAME 'ARIAL'
			FONTSIZE 8
		END LABEL

		DEFINE BUTTON up
			ROW	8
			COL	343
			WIDTH	29
			HEIGHT	23
			PICTURE 'CONTROLUP'
			TOOLTIP 'Control Up'
			ACTION Up()
		END BUTTON

		DEFINE BUTTON down
			ROW	8
			COL	373
			WIDTH	29
			HEIGHT	23
			PICTURE 'CONTROLDOWN'
			TOOLTIP 'Control Down'
			ACTION down()
		END BUTTON

		DEFINE TREE Tree_1 AT 44,12 WIDTH 386 HEIGHT 330 ITEMIDS
		END TREE

	END WINDOW

	CreateOrderTree()

	CENTER WINDOW EditTabOrder

	EditTabOrder.Tree_1.SetFocus

	ACTIVATE WINDOW EditTabOrder

	SelectControl (SelectedControlName)
	DrawGrid()

Return


// function CreateOrderTree
Procedure CreateOrderTree
Local i
Local x
Local PageMap
Local j
Local k
Local idx

	aTree := {}
	aTreeTabIndex := {}
	aTreeTabPage := {}
	aTreeTabPos := {}
	aTreeTabPageLength := {}

	EditTabOrder.Tree_1.DeleteAllItems

	EditTabOrder.Tree_1.AddItem( 'Form'   , 0 , 1 )

	For i := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )

		If _HMG_SYSDATA [   4 ] [i] == DesignFormhandle

			If  !Empty (_HMG_SYSDATA [   2 ] [ i ] ) .and. HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'INTERNAL_TIMER_1' .and.  HMG_UPPER(_HMG_SYSDATA [   2 ] [ i ] ) != 'TEXT_DUMMY'  .and. _HMG_SYSDATA [ 13 ]  [i] ==  .F.

				if _HMG_SYSDATA [ 23 ] [i] == -1 .and. _HMG_SYSDATA [ 24 ] [i] == -1

					EditTabOrder.Tree_1.AddItem( _HMG_SYSDATA [   2 ] [ i ] , 1 , i )

					aadd ( aTree , i )
					aadd ( aTreeTabIndex , 0 )
					aadd ( aTreeTabPage , 0 )
					aadd ( aTreeTabPos , 0 )
					aadd ( aTreeTabPageLength , 0 )

					if _HMG_SYSDATA [ 1 ] [i] == 'TAB'

						PageMap := _HMG_SYSDATA [ 7 ] [i]

						for x := 1 To HMG_LEN ( PageMap )

							EditTabOrder.Tree_1.AddItem( 'Page ' + ALLTRIM(STR(x)) , i , (i*1000)+x )

							aadd ( aTree , (i*1000)+x )
							aadd ( aTreeTabIndex , 0 )
							aadd ( aTreeTabPage , 0 )
							aadd ( aTreeTabPos , 0 )
							aadd ( aTreeTabPageLength , 0 )

							For j := 1 To HMG_LEN ( PageMap [x] )

								if VALTYPE (PageMap [x] [j]) == 'N'
									idx := ascan ( _HMG_SYSDATA [   3 ] , PageMap [x] [j] )
									if idx > 0
										EditTabOrder.Tree_1.AddItem( _HMG_SYSDATA [   2 ] [idx] ,(i*1000)+x  , idx )
										aadd ( aTree , idx )
										aadd ( aTreeTabIndex , i )
										aadd ( aTreeTabPage , x )
										aadd ( aTreeTabPos , j )
										aadd ( aTreeTabPageLength , HMG_LEN ( PageMap [x] ) )
									endif

								Elseif VALTYPE (PageMap [x] [j]) == 'A'

									for k := 1 To HMG_LEN ( _HMG_SYSDATA [   3 ] )

										if VALTYPE ( _HMG_SYSDATA [   3 ] [k] )	== 'A'

											if _HMG_SYSDATA [   3 ] [k] [1]	== PageMap [x] [j] [1]

												EditTabOrder.Tree_1.AddItem( _HMG_SYSDATA [   2 ] [k] ,(i*1000)+x  , k )
												aadd ( aTree , k )
												aadd ( aTreeTabIndex , i )
												aadd ( aTreeTabPage , x )
												aadd ( aTreeTabPos , j )
												aadd ( aTreeTabPageLength , HMG_LEN ( PageMap [x] ) )
												Exit

											endif

										endif

									next k

								endif

							next j

						next x

					endif

				endif

			endif

		endif

	next i

	EditTabOrder.Tree_1.Expand (1)

return


Procedure SwitchControls ( j , k )

LOCAL T01
LOCAL T02
LOCAL T03
LOCAL T04
LOCAL T05
LOCAL T06
LOCAL T07
LOCAL T08
LOCAL T09
LOCAL T10
LOCAL T11
LOCAL T12
LOCAL T13
LOCAL T14
LOCAL T15
LOCAL T16
LOCAL T17
LOCAL T18
LOCAL T19
LOCAL T20
LOCAL T21
LOCAL T22
LOCAL T23
LOCAL T24
LOCAL T25
LOCAL T26
LOCAL T27
LOCAL T28
LOCAL T29
LOCAL T30
LOCAL T31
LOCAL T32
LOCAL T33
LOCAL T34
LOCAL T35
LOCAL T36
LOCAL T37
LOCAL T38
LOCAL T39
LOCAL T40

	__MVPUT ( '_' + DesignForm + '_' + _HMG_SYSDATA [   2 ] [j] , k )
	__MVPUT ( '_' + DesignForm + '_' + _HMG_SYSDATA [   2 ] [k] , j )

	T01 :=	_HMG_SYSDATA [ 1 ]		[j]
	T02 :=	_HMG_SYSDATA [   2 ]		[j]
	T03 :=	_HMG_SYSDATA [   3 ]		[j]
	T04 :=	_HMG_SYSDATA [   4 ]	[j]
	T05 :=	_HMG_SYSDATA [ 5 ]		[j]
	T06 :=	_HMG_SYSDATA [ 6 ]		[j]
	T07 :=	_HMG_SYSDATA [ 7 ]		[j]
	T08 :=	_HMG_SYSDATA [ 8 ]		[j]
	T09 :=	_HMG_SYSDATA [ 9 ]		[j]
	T10 :=	_HMG_SYSDATA [ 10 ]	[j]
	T11 :=	_HMG_SYSDATA [ 11 ]	[j]
	T12 :=	_HMG_SYSDATA [ 12 ]	[j]
	T13 :=	_HMG_SYSDATA [ 13 ]		[j]
	T14 :=	_HMG_SYSDATA [ 14 ]		[j]
	T15 :=	_HMG_SYSDATA [ 15 ]		[j]
	T16 :=	_HMG_SYSDATA [ 16 ]		[j]
	T17 :=	_HMG_SYSDATA [ 17 ]		[j]
	T18 :=	_HMG_SYSDATA [ 18 ]		[j]
	T19 :=	_HMG_SYSDATA [ 19 ]		[j]
	T20 :=	_HMG_SYSDATA [ 20 ]		[j]
	T21 :=	_HMG_SYSDATA [ 21 ]		[j]
	T22 :=	_HMG_SYSDATA [ 22 ]		[j]
	T23 :=	_HMG_SYSDATA [ 23 ]	[j]
	T24 :=	_HMG_SYSDATA [ 24 ]	[j]
	T25 :=	_HMG_SYSDATA [ 25 ]		[j]
	T26 :=	_HMG_SYSDATA [ 26 ]	[j]
	T27 :=	_HMG_SYSDATA [ 27 ]		[j]
	T28 :=	_HMG_SYSDATA [ 28 ]		[j]
	T29 :=	_HMG_SYSDATA [ 29 ]	[j]
	T30 :=	_HMG_SYSDATA [ 30 ]		[j]
	T31 :=	_HMG_SYSDATA [ 31 ]		[j]
	T32 :=	_HMG_SYSDATA [ 32 ]		[j]
	T33 :=	_HMG_SYSDATA [ 33 ]		[j]
	T34 :=	_HMG_SYSDATA [ 34 ]		[j]
	T35 :=	_HMG_SYSDATA [ 35 ]		[j]
	T36 :=	_HMG_SYSDATA [ 36 ]		[j]
	T37 :=	_HMG_SYSDATA [ 37 ]	[j]
	T38 :=	_HMG_SYSDATA [ 38 ]		[j]
	T39 :=	_HMG_SYSDATA [ 39 ]		[j]
	T40 :=	_HMG_SYSDATA [ 40 ]		[j]


	_HMG_SYSDATA [ 1 ]		[j] := _HMG_SYSDATA [ 1 ]		[k]
	_HMG_SYSDATA [   2 ]		[j] := _HMG_SYSDATA [   2 ]		[k]
	_HMG_SYSDATA [   3 ]		[j] := _HMG_SYSDATA [   3 ]		[k]
	_HMG_SYSDATA [   4 ]	[j] := _HMG_SYSDATA [   4 ]	[k]
	_HMG_SYSDATA [ 5 ]		[j] := _HMG_SYSDATA [ 5 ]			[k]
	_HMG_SYSDATA [ 6 ]		[j] := _HMG_SYSDATA [ 6 ]		[k]
	_HMG_SYSDATA [ 7 ]		[j] := _HMG_SYSDATA [ 7 ]		[k]
	_HMG_SYSDATA [ 8 ]		[j] := _HMG_SYSDATA [ 8 ]		[k]
	_HMG_SYSDATA [ 9 ]		[j] := _HMG_SYSDATA [ 9 ]		[k]
	_HMG_SYSDATA [ 10 ]	[j] := _HMG_SYSDATA [ 10 ]	[k]
	_HMG_SYSDATA [ 11 ]	[j] := _HMG_SYSDATA [ 11 ]	[k]
	_HMG_SYSDATA [ 12 ]	[j] := _HMG_SYSDATA [ 12 ]	[k]
	_HMG_SYSDATA [ 13 ]		[j] := _HMG_SYSDATA [ 13 ]		[k]
	_HMG_SYSDATA [ 14 ]		[j] := _HMG_SYSDATA [ 14 ]		[k]
	_HMG_SYSDATA [ 15 ]		[j] := _HMG_SYSDATA [ 15 ]		[k]
	_HMG_SYSDATA [ 16 ]		[j] := _HMG_SYSDATA [ 16 ]		[k]
	_HMG_SYSDATA [ 17 ]		[j] := _HMG_SYSDATA [ 17 ]		[k]
	_HMG_SYSDATA [ 18 ]		[j] := _HMG_SYSDATA [ 18 ]			[k]
	_HMG_SYSDATA [ 19 ]		[j] := _HMG_SYSDATA [ 19 ]			[k]
	_HMG_SYSDATA [ 20 ]		[j] := _HMG_SYSDATA [ 20 ]		[k]
	_HMG_SYSDATA [ 21 ]		[j] := _HMG_SYSDATA [ 21 ]		[k]
	_HMG_SYSDATA [ 22 ]		[j] := _HMG_SYSDATA [ 22 ]		[k]
	_HMG_SYSDATA [ 23 ]	[j] := _HMG_SYSDATA [ 23 ]	[k]
	_HMG_SYSDATA [ 24 ]	[j] := _HMG_SYSDATA [ 24 ]	[k]
	_HMG_SYSDATA [ 25 ]		[j] := _HMG_SYSDATA [ 25 ]		[k]
	_HMG_SYSDATA [ 26 ]	[j] := _HMG_SYSDATA [ 26 ]	[k]
	_HMG_SYSDATA [ 27 ]		[j] := _HMG_SYSDATA [ 27 ]		[k]
	_HMG_SYSDATA [ 28 ]		[j] := _HMG_SYSDATA [ 28 ]		[k]
	_HMG_SYSDATA [ 29 ]	[j] := _HMG_SYSDATA [ 29 ]	[k]
	_HMG_SYSDATA [ 30 ]		[j] := _HMG_SYSDATA [ 30 ]		[k]
	_HMG_SYSDATA [ 31 ]		[j] := _HMG_SYSDATA [ 31 ]		[k]
	_HMG_SYSDATA [ 32 ]		[j] := _HMG_SYSDATA [ 32 ]		[k]
	_HMG_SYSDATA [ 33 ]		[j] := _HMG_SYSDATA [ 33 ]		[k]
	_HMG_SYSDATA [ 34 ]		[j] := _HMG_SYSDATA [ 34 ]		[k]
	_HMG_SYSDATA [ 35 ]		[j] := _HMG_SYSDATA [ 35 ]		[k]
	_HMG_SYSDATA [ 36 ]		[j] := _HMG_SYSDATA [ 36 ]		[k]
	_HMG_SYSDATA [ 37 ]	[j] := _HMG_SYSDATA [ 37 ]		[k]
	_HMG_SYSDATA [ 38 ]		[j] := _HMG_SYSDATA [ 38 ]		[k]
	_HMG_SYSDATA [ 39 ]		[j] := _HMG_SYSDATA [ 39 ]		[k]
	_HMG_SYSDATA [ 40 ]		[j] := _HMG_SYSDATA [ 40 ]		[k]


	_HMG_SYSDATA [ 1 ]		[k] := T01
	_HMG_SYSDATA [   2 ]		[k] := T02
	_HMG_SYSDATA [   3 ]		[k] := T03
	_HMG_SYSDATA [   4 ]	[k] := T04
	_HMG_SYSDATA [ 5 ]		[k] := T05
	_HMG_SYSDATA [ 6 ]		[k] := T06
	_HMG_SYSDATA [ 7 ]		[k] := T07
	_HMG_SYSDATA [ 8 ]		[k] := T08
	_HMG_SYSDATA [ 9 ]		[k] := T09
	_HMG_SYSDATA [ 10 ]	[k] := T10
	_HMG_SYSDATA [ 11 ]	[k] := T11
	_HMG_SYSDATA [ 12 ]	[k] := T12
	_HMG_SYSDATA [ 13 ]		[k] := T13
	_HMG_SYSDATA [ 14 ]		[k] := T14
	_HMG_SYSDATA [ 15 ]		[k] := T15
	_HMG_SYSDATA [ 16 ]		[k] := T16
	_HMG_SYSDATA [ 17 ]		[k] := T17
	_HMG_SYSDATA [ 18 ]		[k] := T18
	_HMG_SYSDATA [ 19 ]		[k] := T19
	_HMG_SYSDATA [ 20 ]		[k] := T20
	_HMG_SYSDATA [ 21 ]		[k] := T21
	_HMG_SYSDATA [ 22 ]		[k] := T22
	_HMG_SYSDATA [ 23 ]	[k] := T23
	_HMG_SYSDATA [ 24 ]	[k] := T24
	_HMG_SYSDATA [ 25 ]		[k] := T25
	_HMG_SYSDATA [ 26 ]	[k] := T26
	_HMG_SYSDATA [ 27 ]		[k] := T27
	_HMG_SYSDATA [ 28 ]		[k] := T28
	_HMG_SYSDATA [ 29 ]	[k] := T29
	_HMG_SYSDATA [ 30 ]		[k] := T30
	_HMG_SYSDATA [ 31 ]		[k] := T31
	_HMG_SYSDATA [ 32 ]		[k] := T32
	_HMG_SYSDATA [ 33 ]		[k] := T33
	_HMG_SYSDATA [ 34 ]		[k] := T34
	_HMG_SYSDATA [ 35 ]		[k] := T35
	_HMG_SYSDATA [ 36 ]		[k] := T36
	_HMG_SYSDATA [ 37 ]		[k] := T37
	_HMG_SYSDATA [ 38 ]		[k] := T38
	_HMG_SYSDATA [ 39 ]		[k] := T39
	_HMG_SYSDATA [ 40 ]		[k] := T40

Return

procedure up ()
LOCAL TabIndex, TabPage, ControlPos, ControlCount, h1, h2, t

Local Index1 := 0
Local Index2 := 0
Local pos := 0
Local x
Local j

	DesignFormModified := .T.

	Index1 := EditTabOrder.Tree_1.Value

	if index1 > 1000
		EditTabOrder.Tree_1.SetFocus
		return
	endif

	pos := ascan ( aTree , Index1 )

	if pos == 0
		EditTabOrder.Tree_1.SetFocus
		return
	endif

	if pos == 1
		EditTabOrder.Tree_1.SetFocus
		return
	endif

	if _HMG_SYSDATA [ 23 ] [index1] == -1

		* Calculate Index2

		for x := pos - 1  To 1 Step -1

			j := aTree [x]

			if j <= HMG_LEN(_HMG_SYSDATA [   3 ])

				if _HMG_SYSDATA [ 23 ] [ j ] == -1
					Index2 := j
					exit
				endif

			endif

		next x

		if Index2 == 0
			EditTabOrder.Tree_1.SetFocus
			return
		endif

		SwitchControls ( Index1 , Index2 )
		CreateOrderTree()
		EditTabOrder.Tree_1.Value := Index2
		EditTabOrder.Tree_1.SetFocus

	else

		TabIndex := aTreeTabIndex [pos]
		TabPage := aTreeTabPage [pos]
		ControlPos := aTreeTabPos [pos]
		ControlCount := aTreeTabPageLength [pos]

		if ControlPos == 1
			EditTabOrder.Tree_1.SetFocus
			Return
		endif

		h1 := _HMG_SYSDATA [ 7 ] [TabIndex] [TabPage] [ControlPos]
		h2 := _HMG_SYSDATA [ 7 ] [TabIndex] [TabPage] [ControlPos-1]

		t := h1

		_HMG_SYSDATA [ 7 ] [TabIndex] [TabPage] [ControlPos] := h2
		_HMG_SYSDATA [ 7 ] [TabIndex] [TabPage] [ControlPos-1] := t

		CreateOrderTree()
		EditTabOrder.Tree_1.Value := aTree [pos-1]
		EditTabOrder.Tree_1.SetFocus

	endif

return

procedure down
Local Index1 := 0
Local Index2 := 0
Local pos := 0
Local x
Local j
Local TabIndex
Local TabPage
Local ControlPos
Local ControlCount
Local h1
Local h2
Local t

	DesignFormModified := .T.

	Index1 := EditTabOrder.Tree_1.Value

	if index1 > 1000
		EditTabOrder.Tree_1.SetFocus
		return
	endif

	if index1 == 1
		EditTabOrder.Tree_1.SetFocus
		return
	endif

	pos := ascan ( aTree , Index1 )

	if pos == HMG_LEN ( aTree )
		EditTabOrder.Tree_1.SetFocus
		return
	endif

	if _HMG_SYSDATA [ 23 ] [index1] == -1

		* Calculate Index2

		for x := pos + 1 To HMG_LEN (aTree)

			j := aTree [x]

			if j <= HMG_LEN(_HMG_SYSDATA [   3 ])

				if _HMG_SYSDATA [ 23 ] [ j ] == -1
					Index2 := j
					exit
				endif

			endif

		next x

		if Index2 == 0
			return
		endif

		SwitchControls ( Index1 , Index2 )
		CreateOrderTree()
		EditTabOrder.Tree_1.Value := Index2
		EditTabOrder.Tree_1.SetFocus

	else

		TabIndex := aTreeTabIndex [pos]
		TabPage := aTreeTabPage [pos]
		ControlPos := aTreeTabPos [pos]
		ControlCount := aTreeTabPageLength [pos]

		if ControlPos == ControlCount
			EditTabOrder.Tree_1.SetFocus
			Return
		endif

		h1 := _HMG_SYSDATA [ 7 ] [TabIndex] [TabPage] [ControlPos]
		h2 := _HMG_SYSDATA [ 7 ] [TabIndex] [TabPage] [ControlPos+1]

		t := h1

		_HMG_SYSDATA [ 7 ] [TabIndex] [TabPage] [ControlPos] := h2
		_HMG_SYSDATA [ 7 ] [TabIndex] [TabPage] [ControlPos+1] := t

		CreateOrderTree()
		EditTabOrder.Tree_1.Value := aTree [pos+1]
		EditTabOrder.Tree_1.SetFocus

	endif

return
*------------------------------------------------------------------------------*
Procedure UpdateControlProperties (i)
*------------------------------------------------------------------------------*
Local Row
Local Col
Local Width
Local Height
Local Name
Local Type
Local z
Local aProperties
Local aEvents
Local x

	Row	:= _HMG_SYSDATA [ 18 ] [i]
	Col	:= _HMG_SYSDATA [ 19 ] [i]
	Width	:= _HMG_SYSDATA [ 20 ] [i]
	Height	:= _HMG_SYSDATA [ 21 ] [i]
	Name	:= _HMG_SYSDATA [  2 ] [i]

	if _HMG_SYSDATA [ 23 ] [i] != -1 .and. _HMG_SYSDATA [ 24 ] [i] != -1
		Row := Row - _HMG_SYSDATA [ 23 ] [i]
		Col := Col - _HMG_SYSDATA [ 24 ] [i]
	endif

	If	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] > 10
		***************************************************************
		Type := 'USER'
		***************************************************************

		z := _HMG_SYSDATA [ 39 ] [ i ] - 10

		aProperties	:= aClone ( aComponentProperties [z] )
		aEvents		:= aClone ( aComponentEvents	 [z] )

		aSort ( aProperties )
		aSort ( aEvents )

		Properties.Grid_1.DeleteAllItems

		For x := 1 To HMG_LEN ( aProperties )

			If HMG_UPPER( ALLTRIM( aProperties[x] ) ) == 'NAME'

				Properties.Grid_1.AddItem ( {'Name',Name } )

			ElseIf HMG_UPPER( ALLTRIM( aProperties[x] ) ) == 'COL'

				Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )

			ElseIf HMG_UPPER( ALLTRIM( aProperties[x] ) ) == 'ROW'

				Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )

			ElseIf HMG_UPPER( ALLTRIM( aProperties[x] ) ) == 'WIDTH'

				Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

			ElseIf HMG_UPPER( ALLTRIM( aProperties[x] ) ) == 'HEIGHT'

				Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )

			Else

				Properties.Grid_1.AddItem ( { aProperties[x] , __MVGET ( Name + aProperties [x] ) } )

			EndIf

		Next x

		Properties.Grid_2.DeleteAllItems

		For x := 1 To HMG_LEN ( aEvents )

			Properties.Grid_2.AddItem ( { aEvents [x] , __MVGET ( Name + aEvents [x] )  , '+' , '-' , '...'} )

		Next x


	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'BUTTON' .and. _HMG_SYSDATA [ 39 ] [ i ] == 0
		***************************************************************
		Type := 'BUTTON'
		***************************************************************

		Properties.Grid_1.DeleteAllItems

		Properties.Grid_1.AddItem ( {'Caption', __MVGET ( Name + 'Caption' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'Flat', __MVGET ( Name + 'Flat' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'MultiLine', __MVGET ( Name + 'MultiLine' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'PictAlignment', __MVGET ( Name + 'PictAlignment' ) } )
		Properties.Grid_1.AddItem ( {'Picture', __MVGET ( Name + 'Picture' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Transparent', __MVGET ( Name + 'Transparent' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'Action', __MVGET ( Name + 'Action' ) , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'CHECKBOX' .and. _HMG_SYSDATA [ 39 ] [ i ] == 0
		***************************************************************
		Type := 'CHECKBOX'
		***************************************************************
		Properties.Grid_1.DeleteAllItems

		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Caption', __MVGET ( Name + 'Caption' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'Field', __MVGET ( Name + 'Field' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Transparent', __MVGET ( Name + 'Transparent' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LIST'
		***************************************************************
		Type := 'LISTBOX'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'DragItems', __MVGET ( Name + 'DragItems' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Items',  __MVGET ( Name + 'Items' ) } )
		Properties.Grid_1.AddItem ( {'MultiSelect',  __MVGET ( Name + 'MultiSelect' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Sort', __MVGET ( Name + 'Sort' ) } )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnDblClick', __MVGET ( Name + 'OnDblClick' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus'  ) , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'COMBO'
		***************************************************************
		Type := 'COMBOBOX'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'DisplayEdit', __MVGET ( Name + 'DisplayEdit' ) } )
		Properties.Grid_1.AddItem ( {'DroppedWidth', __MVGET ( Name + 'DroppedWidth' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Image',  __MVGET ( Name + 'Image' ) } )
		Properties.Grid_1.AddItem ( {'Items',  __MVGET ( Name + 'Items' ) } )
		Properties.Grid_1.AddItem ( {'ItemSource',  __MVGET ( Name + 'ItemSource' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Sort', __MVGET ( Name + 'Sort' ) } )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'ValueSource',  __MVGET ( Name + 'ValueSource' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnCloseUp', __MVGET ( Name + 'OnCloseUp' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnDisplayChange', __MVGET ( Name + 'OnDisplayChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnDropDown', __MVGET ( Name + 'OnDropDown' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnEnter', __MVGET ( Name + 'OnEnter' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'CHECKBOX' .and. _HMG_SYSDATA [ 39 ] [ i ] == 1
		***************************************************************
		Type := 'CHECKBUTTON'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Caption', __MVGET ( Name + 'Caption' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Picture', __MVGET ( Name + 'Picture' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'GRID'
		***************************************************************
		Type := 'GRID'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'AllowAppend', __MVGET ( Name + 'AllowAppend' ) } )
		Properties.Grid_1.AddItem ( {'AllowDelete', __MVGET ( Name + 'AllowDelete' ) } )
		Properties.Grid_1.AddItem ( {'AllowEdit', __MVGET ( Name + 'AllowEdit' ) } )
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Buffered', __MVGET ( Name + 'Buffered' ) } )
		Properties.Grid_1.AddItem ( {'CellNavigation', __MVGET ( Name + 'CellNavigation' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'ColumnControls', __MVGET ( Name + 'ColumnControls' ) } )
		Properties.Grid_1.AddItem ( {'ColumnFields', __MVGET ( Name + 'ColumnFields' ) } )
		Properties.Grid_1.AddItem ( {'ColumnValid', __MVGET ( Name + 'ColumnValid' ) } )
		Properties.Grid_1.AddItem ( {'ColumnWhen', __MVGET ( Name + 'ColumnWhen' ) } )
		Properties.Grid_1.AddItem ( {'DynamicBackColor', __MVGET ( Name + 'DynamicBackColor' ) } )
		Properties.Grid_1.AddItem ( {'DynamicForeColor', __MVGET ( Name + 'DynamicForeColor' ) } )
		Properties.Grid_1.AddItem ( {'DynamicDisplay', __MVGET ( Name + 'DynamicDisplay' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Headers',  __MVGET ( Name + 'Headers' ) } )
		Properties.Grid_1.AddItem ( {'HeaderImages',  __MVGET ( Name + 'HeaderImages' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId',  __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Image',  __MVGET ( Name + 'Image' ) } )
		Properties.Grid_1.AddItem ( {'ItemCount',  __MVGET ( Name + 'ItemCount' ) } )
		Properties.Grid_1.AddItem ( {'Items',  __MVGET ( Name + 'Items' ) } )
		Properties.Grid_1.AddItem ( {'Justify',  __MVGET ( Name + 'Justify' ) } )
		Properties.Grid_1.AddItem ( {'Lines', __MVGET ( Name + 'Lines' ) } )
		Properties.Grid_1.AddItem ( {'LockColumns', __MVGET ( Name + 'LockColumns' ) } )
		Properties.Grid_1.AddItem ( {'MultiSelect',  __MVGET ( Name + 'MultiSelect' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'RowSource', __MVGET ( Name + 'RowSource' ) } )
		Properties.Grid_1.AddItem ( {'ShowHeaders', __MVGET ( Name + 'ShowHeaders' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Virtual',  __MVGET ( Name + 'Virtual' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )
		Properties.Grid_1.AddItem ( {'Widths',  __MVGET ( Name + 'Widths' ) } )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnDblClick', __MVGET ( Name + 'OnDblClick' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnHeadClick', __MVGET ( Name + 'OnHeadClick' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnQueryData', __MVGET ( Name + 'OnQueryData' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnSave', __MVGET ( Name + 'OnSave' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'SLIDER'
		***************************************************************
		Type := 'SLIDER'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Orientation',  __MVGET ( Name + 'Orientation' ) } )
		Properties.Grid_1.AddItem ( {'RangeMax',  __MVGET ( Name + 'RangeMax' ) } )
		Properties.Grid_1.AddItem ( {'RangeMin',  __MVGET ( Name + 'RangeMin' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'TickMarks', __MVGET ( Name + 'TickMarks' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'SPINNER'
		***************************************************************
		Type := 'SPINNER'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Increment', __MVGET ( Name + 'Increment' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'RangeMax',  __MVGET ( Name + 'RangeMax' ) } )
		Properties.Grid_1.AddItem ( {'RangeMin',  __MVGET ( Name + 'RangeMin' ) } )
		Properties.Grid_1.AddItem ( {'ReadOnly',  __MVGET ( Name + 'ReadOnly' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )
		Properties.Grid_1.AddItem ( {'Wrap',  __MVGET ( Name + 'Wrap' ) } )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'IMAGE'
		***************************************************************
		Type := 'IMAGE'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Picture',  __MVGET ( Name + 'Picture' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Stretch', __MVGET ( Name + 'Stretch' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'Action', __MVGET ( Name + 'Action' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'TREE'
		***************************************************************
		Type := 'TREE'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'ItemIds', __MVGET ( Name + 'ItemIds' ) } )
		Properties.Grid_1.AddItem ( {'ItemImages', __MVGET ( Name + 'ItemImages' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'NodeImages', __MVGET ( Name + 'NodeImages' ) } )
		Properties.Grid_1.AddItem ( {'RootButton', __MVGET ( Name + 'RootButton' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnDblClick', __MVGET ( Name + 'OnDblClick' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'DATEPICK'
		***************************************************************
		Type := 'DATEPICKER'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'Field', __MVGET ( Name + 'Field' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'RightAlign', __MVGET ( Name + 'RightAlign' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'ShowNone', __MVGET ( Name + 'ShowNone' ) } )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'UpDown', __MVGET ( Name + 'UpDown' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnEnter', __MVGET ( Name + 'OnEnter' ) , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'TEXT'
		***************************************************************
		Type := 'TEXTBOX'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'CaseConvert', __MVGET ( Name + 'CaseConvert' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'DataType', __MVGET ( Name + 'DataType' ) } )
		Properties.Grid_1.AddItem ( {'DisabledBackColor', __MVGET ( Name + 'DisabledBackColor' ) } )
		Properties.Grid_1.AddItem ( {'DisabledFontColor', __MVGET ( Name + 'DisabledFontColor' ) } )
		Properties.Grid_1.AddItem ( {'Field', __MVGET ( Name + 'Field' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Format', __MVGET ( Name + 'Format' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'InputMask', __MVGET ( Name + 'InputMask' ) } )
		Properties.Grid_1.AddItem ( {'MaxLength', __MVGET ( Name + 'MaxLength' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Password',  __MVGET ( Name + 'Password' ) } )
		Properties.Grid_1.AddItem ( {'ReadOnly',  __MVGET ( Name + 'ReadOnly' ) } )
		Properties.Grid_1.AddItem ( {'RightAlign', __MVGET ( Name + 'RightAlign' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnEnter', __MVGET ( Name + 'OnEnter' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'EDIT'
		***************************************************************
		Type := 'EDITBOX'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'DisabledBackColor', __MVGET ( Name + 'DisabledBackColor' ) } )
		Properties.Grid_1.AddItem ( {'DisabledFontColor', __MVGET ( Name + 'DisabledFontColor' ) } )
		Properties.Grid_1.AddItem ( {'Field', __MVGET ( Name + 'Field' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'HScrollBar', __MVGET ( Name + 'hScrollBar' ) } )
		Properties.Grid_1.AddItem ( {'MaxLength', __MVGET ( Name + 'MaxLength' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'ReadOnly',  __MVGET ( Name + 'ReadOnly' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'VScrollBar', __MVGET ( Name + 'VScrollBar' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 0
		***************************************************************
		Type := 'LABEL'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Alignment', __MVGET ( Name + 'Alignment' ) } )
		Properties.Grid_1.AddItem ( {'AutoSize', __MVGET ( Name + 'AutoSize' ) } )
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Transparent', __MVGET ( Name + 'Transparent' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'Action', __MVGET ( Name + 'Action' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'BROWSE'
		***************************************************************
		Type := 'BROWSE'
		***************************************************************
		Properties.Grid_1.DeleteAllItems

		Properties.Grid_1.AddItem ( {'AllowAppend', __MVGET ( Name + 'AllowAppend' ) } )
		Properties.Grid_1.AddItem ( {'AllowDelete', __MVGET ( Name + 'AllowDelete' ) } )
		Properties.Grid_1.AddItem ( {'AllowEdit', __MVGET ( Name + 'AllowEdit' ) } )
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'DisplayItems', __MVGET ( Name + 'DisplayItems' ) } )
		Properties.Grid_1.AddItem ( {'DynamicBackColor', __MVGET ( Name + 'DynamicBackColor' ) } )
		Properties.Grid_1.AddItem ( {'DynamicForeColor', __MVGET ( Name + 'DynamicForeColor' ) } )
		Properties.Grid_1.AddItem ( {'Fields',  __MVGET ( Name + 'Fields' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Format', __MVGET ( Name + 'Format' ) } )
		Properties.Grid_1.AddItem ( {'Headers',  __MVGET ( Name + 'Headers' ) } )
		Properties.Grid_1.AddItem ( {'HeaderImages',  __MVGET ( Name + 'HeaderImages' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Image',  __MVGET ( Name + 'Image' ) } )
		Properties.Grid_1.AddItem ( {'InputItems',  __MVGET ( Name + 'InputItems' ) } )
		Properties.Grid_1.AddItem ( {'InputMask',  __MVGET ( Name + 'InputMask' ) } )
		Properties.Grid_1.AddItem ( {'Justify',  __MVGET ( Name + 'Justify' ) } )
		Properties.Grid_1.AddItem ( {'Lines', __MVGET ( Name + 'Lines' ) } )
		Properties.Grid_1.AddItem ( {'Lock', __MVGET ( Name + 'Lock' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'ReadOnlyFields',  __MVGET ( Name + 'ReadOnlyFields' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Valid', __MVGET ( Name + 'Valid' ) } )
		Properties.Grid_1.AddItem ( {'ValidMessages', __MVGET ( Name + 'ValidMessages' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'vScrollBar',  __MVGET ( Name + 'vScrollBar' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'When', __MVGET ( Name + 'When' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )
		Properties.Grid_1.AddItem ( {'Widths',  __MVGET ( Name + 'Widths' ) } )
		Properties.Grid_1.AddItem ( {'WorkArea',  __MVGET ( Name + 'WorkArea' ) } )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnDblClick', __MVGET ( Name + 'OnDblClick' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnHeadClick', __MVGET ( Name + 'OnHeadClick' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'RADIOGROUP'
		***************************************************************
		Type := 'RADIOGROUP'
		***************************************************************
		Properties.Grid_1.DeleteAllItems

		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Orientation',  __MVGET ( Name + 'Orientation' ) } )
		Properties.Grid_1.AddItem ( {'Options',  __MVGET ( Name + 'Options' ) } )
		Properties.Grid_1.AddItem ( {'ReadOnly',  __MVGET ( Name + 'ReadOnly' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Spacing', __MVGET ( Name + 'Spacing' ) } )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Transparent', __MVGET ( Name + 'Transparent' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'FRAME'
		***************************************************************
		Type := 'FRAME'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Caption', __MVGET ( Name + 'Caption' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Transparent', __MVGET ( Name + 'Transparent' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'TAB'
		***************************************************************
		Type := 'TAB'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Buttons', __MVGET ( Name + 'Buttons' ) } )
		Properties.Grid_1.AddItem ( {'Captions', __MVGET ( Name + 'Captions' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'Flat', __MVGET ( Name + 'Flat' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HotTrack', __MVGET ( Name + 'HotTrack' ) } )
		Properties.Grid_1.AddItem ( {'Multiline', __MVGET ( Name + 'Multiline' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'PageCount', __MVGET ( Name + 'PageCount' ) } )
		Properties.Grid_1.AddItem ( {'PageImages', __MVGET ( Name + 'PageImages' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Vertical',  __MVGET ( Name + 'Vertical' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'ANIMATEBOX'
		***************************************************************
		Type := 'ANIMATEBOX'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'AutoPlay', __MVGET ( Name + 'AutoPlay' ) } )
		Properties.Grid_1.AddItem ( {'Center', __MVGET ( Name + 'Center' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'File', __MVGET ( Name + 'File' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Transparent', __MVGET ( Name + 'Transparent' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 6
		***************************************************************
		Type := 'HYPERLINK'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Address', __MVGET ( Name + 'Address' ) } )
		Properties.Grid_1.AddItem ( {'AutoSize', __MVGET ( Name + 'AutoSize' ) } )
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontColor', __MVGET ( Name + 'FontColor' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'HandCursor', __MVGET ( Name + 'HandCursor' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value', __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )

		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'MONTHCAL'
		***************************************************************
		Type := 'MONTHCALENDAR'
		***************************************************************

		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'Today', __MVGET ( Name + 'Today' ) } )
		Properties.Grid_1.AddItem ( {'TodayCircle', __MVGET ( Name + 'TodayCircle' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'WeekNumbers',  __MVGET ( Name + 'WeekNumbers' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'RICHEDIT'
		***************************************************************
		Type := 'RICHEDITBOX'
		***************************************************************

		Properties.Grid_1.DeleteAllItems

		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'Field', __MVGET ( Name + 'Field' ) } )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'MaxLength', __MVGET ( Name + 'MaxLength' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'ReadOnly',  __MVGET ( Name + 'ReadOnly' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 2
		***************************************************************
		Type := 'PROGRESSBAR'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'BackColor', __MVGET ( Name + 'BackColor' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'ForeColor', __MVGET ( Name + 'ForeColor' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Orientation',  __MVGET ( Name + 'Orientation' ) } )
		Properties.Grid_1.AddItem ( {'RangeMax',  __MVGET ( Name + 'RangeMax' ) } )
		Properties.Grid_1.AddItem ( {'RangeMin',  __MVGET ( Name + 'RangeMin' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Smooth', __MVGET ( Name + 'Smooth' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 3
		***************************************************************
		Type := 'PLAYER'
		***************************************************************
		Properties.Grid_1.DeleteAllItems

		Properties.Grid_1.AddItem ( {'AutoSizeMovie', __MVGET ( Name + 'AutoSizeMovie' ) } )
		Properties.Grid_1.AddItem ( {'AutoSizeWindow', __MVGET ( Name + 'AutoSizeWindow' ) } )
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'ErrorDlg', __MVGET ( Name + 'ErrorDlg' ) } )
		Properties.Grid_1.AddItem ( {'File', __MVGET ( Name + 'File' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Menu', __MVGET ( Name + 'Menu' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Open', __MVGET ( Name + 'Open' ) } )
		Properties.Grid_1.AddItem ( {'PlayBar', __MVGET ( Name + 'PlayBar' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'ShowAll', __MVGET ( Name + 'ShowAll' ) } )
		Properties.Grid_1.AddItem ( {'ShowMode', __MVGET ( Name + 'ShowMode' ) } )
		Properties.Grid_1.AddItem ( {'ShowName', __MVGET ( Name + 'ShowName' ) } )
		Properties.Grid_1.AddItem ( {'ShowPosition', __MVGET ( Name + 'ShowPosition' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 4
		***************************************************************
		Type := 'IPADDRESS'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'FontBold', __MVGET ( Name + 'FontBold' ) } )
		Properties.Grid_1.AddItem ( {'FontItalic', __MVGET ( Name + 'FontItalic' ) } )
		Properties.Grid_1.AddItem ( {'FontName', __MVGET ( Name + 'FontName' ) } )
		Properties.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( Name + 'FontUnderLine' ) } )
		Properties.Grid_1.AddItem ( {'FontSize', __MVGET ( Name + 'FontSize' ) } )
		Properties.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( Name + 'FontStrikeOut' ) } )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'HelpId', __MVGET ( Name + 'HelpId' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'TabStop', __MVGET ( Name + 'TabStop' ) } )
		Properties.Grid_1.AddItem ( {'ToolTip', __MVGET ( Name + 'ToolTip' ) } )
		Properties.Grid_1.AddItem ( {'Value',  __MVGET ( Name + 'Value' ) } )
		Properties.Grid_1.AddItem ( {'Visible', __MVGET ( Name + 'Visible' ) } )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'OnChange', __MVGET ( Name + 'OnChange' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( Name + 'OnGotFocus' )  , '+' , '-' , '...'} )
		Properties.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( Name + 'OnLostFocus' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'BUTTON' .and. _HMG_SYSDATA [ 39 ] [ i ] == 5
		***************************************************************
		Type := 'TIMER'
		***************************************************************
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_1.AddItem ( {'Interval',  __MVGET ( Name + 'Interval' ) } )
		Properties.Grid_1.AddItem ( {'Name',Name } )

		Properties.Grid_2.DeleteAllItems
		Properties.Grid_2.AddItem ( {'Action',  __MVGET ( Name + 'Action' )  , '+' , '-' , '...'} )

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 7
		***************************************************************
		Type := 'ACTIVEX'
		***************************************************************
		Properties.Grid_1.DeleteAllItems

		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'ProgId',  __MVGET ( Name + 'ProgId' ) } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems

	ElseIf	_HMG_SYSDATA [ 1 ] [ i ] == 'LABEL' .and. _HMG_SYSDATA [ 39 ] [ i ] == 8
		***************************************************************
		Type := 'CHILDWINDOW'
		***************************************************************
		Properties.Grid_1.DeleteAllItems

		Properties.Grid_1.AddItem ( {'Col',ALLTRIM(STR(Col))} )
		Properties.Grid_1.AddItem ( {'Height',ALLTRIM(STR(Height))} )
		Properties.Grid_1.AddItem ( {'Name',Name } )
		Properties.Grid_1.AddItem ( {'Row',ALLTRIM(STR(Row))} )
		Properties.Grid_1.AddItem ( {'Width',ALLTRIM(STR(Width))} )

		Properties.Grid_2.DeleteAllItems

	EndIf

	Form_Main.StatusBar.Item (2 + STATUSITEM_OFFSET) := 'r:' + ALLTRIM(STR(Row)) + ' c:' + ALLTRIM(STR(Col)) + ' w:' + ALLTRIM(STR(Width)) + ' h:' + ALLTRIM(STR(Height))

Return

*------------------------------------------------------------------------------*
Function StringToArray ( CurrentOptions )
*------------------------------------------------------------------------------*
Local aTemp := {}
Local sTemp := ''
Local cTemp := ''
Local OptionsTemp := CurrentOptions
Local a

	OptionsTemp := ALLTRIM (OptionsTemp)

	If HB_ULEFT (OptionsTemp,1) == '{'
		OptionsTemp := HB_URIGHT ( OptionsTemp , HMG_LEN(OptionsTemp) - 1 )
	EndIf

	If HB_URIGHT (OptionsTemp,1) == '}'
		OptionsTemp := HB_ULEFT ( OptionsTemp , HMG_LEN(OptionsTemp) - 1 )
	EndIf

	for a := 1 To HMG_LEN (OptionsTemp)

		cTemp := HB_USUBSTR ( OptionsTemp , a , 1 )

		if cTemp == ','
			sTemp := ALLTRIM (sTemp)
			aadd ( aTemp , sTemp )
			sTemp := ''
		Else
		     sTemp := sTemp + cTemp
		EndIf

	next a

	sTemp := ALLTRIM (sTemp)
	aadd ( aTemp , sTemp )

	for a := 1 to HMG_LEN (aTemp)

		if	HB_ULEFT ( aTemp [a] , 1 ) == '"' ;
			.or. ;
			HB_ULEFT ( aTemp [a] , 1 ) == "'"

				aTemp [a] := HB_URIGHT ( aTemp [a] , HMG_LEN( aTemp [a] ) - 1 )

		EndIf

		if	HB_URIGHT ( aTemp [a] , 1 ) == '"' ;
			.or. ;
			HB_URIGHT ( aTemp [a] , 1 ) == "'"

			aTemp [a] := HB_ULEFT ( aTemp [a] , HMG_LEN( aTemp [a] ) - 1 )

		EndIf

	next a

Return ( aTemp )



*------------------------------------------------------------------------------*
Procedure Preferences()
*------------------------------------------------------------------------------*
Local h
local nlang
local alang [1024]
local i
local cCurrLang := ""


   #ifdef COMPILE_HMG_UNICODE
       nlang := ADIR( StartUpFolder + "*.UNI", alang )
   #else
       nlang := ADIR( StartUpFolder + "*.ANS", alang )
   #endif

	ASIZE ( alang , nlang )


	DEFINE WINDOW PrefM ;
		AT 68 , 129 ;
		WIDTH 564 ;
		HEIGHT 227 ;
		TITLE aMsgs [ 094 ] ;
		MODAL


		DEFINE LABEL Label_1
			ROW    58
			COL    30
			WIDTH  105
			HEIGHT 20
			VALUE aMsgs [ 087 ]
			FONTNAME "Arial"
			FONTSIZE 9
		END LABEL

		DEFINE TEXTBOX Text_1
			ROW    55
			COL    140
			WIDTH  360
			HEIGHT 24
			FONTNAME "Arial"
			FONTSIZE 9
			VALUE ""
		END TEXTBOX

		define button b1
			row	52
			col	505
			width	28
			height	28
			caption '...'
			action	seteditor()
		end button

		DEFINE COMBOBOX Combo_1
			ROW    155
			COL    180
			WIDTH  115
			HEIGHT 100
			ITEMS {''}
			VALUE 0
			FONTNAME "Arial"
			FONTSIZE 9
		END COMBOBOX

		DEFINE BUTTON Button_1
			ROW    153
			COL    330
			WIDTH  100
			HEIGHT 28
			CAPTION aMsgs [ 116 ]
			ACTION PrefOk (cCurrLang)
			FONTNAME "Arial"
			FONTSIZE 9
		END BUTTON

		DEFINE BUTTON Button_2
			ROW    153
			COL    440
			WIDTH  100
			HEIGHT 28
			CAPTION aMsgs [ 117 ]
			ACTION PrefCancel()
			FONTNAME "Arial"
			FONTSIZE 9
		END BUTTON

		DEFINE FRAME Frame_2
			ROW    10
			COL    10
			WIDTH  530
			HEIGHT 110
			FONTNAME "Arial"
			FONTSIZE 9
			CAPTION ''
		END FRAME

		DEFINE FRAME Frame_4
			ROW    140
			COL    10
			WIDTH  305
			HEIGHT 45
			FONTNAME "Arial"
			FONTSIZE 9
			CAPTION ''
		END FRAME

		DEFINE LABEL Label_4
			ROW    158
			COL    28
			WIDTH  140
			HEIGHT 30
			VALUE aMsgs [ 093 ]
			FONTNAME "Arial"
			FONTSIZE 9
		END LABEL

	END WINDOW

	prefm.Combo_1.deleteallitems

	For i := 1 To nlang
		prefm.Combo_1.AddItem ( alang [i] )
	Next i

	cCurrLang := HMG_LOWER ( ALLTRIM ( HB_UTF8STRTRAN (HB_MEMOREAD (StartUpFolder + cFileLanguage) , chr(26) , ' ' ) ) )


	for i := 1 to prefm.Combo_1.itemcount

		if HMG_LOWER ( ALLTRIM ( prefm.Combo_1.item(i) ) ) == cCurrLang

			prefm.Combo_1.value := i

		endif

	next i


	If IsAppThemed()
		h := PrefM.Height
		PrefM.Height := h + 7
	endif

	PrefM.Text_1.Value := ProgramEditor


	CENTER WINDOW PrefM
	ACTIVATE WINDOW PrefM

	if _IsWindowDefined ( DesignForm )
		SelectControl (SelectedControlName)
		DrawGrid()
	endif

Return

procedure seteditor
local cTemp

	cTemp := GetFile( , , , , .t. )

	if .not. empty (cTemp)

		PrefM.text_1.value := cTemp

	endif

return

procedure sethmgfolder
local cTemp

	cTemp := GetFolder()

	if .not. empty (cTemp)

		PrefM.text_2.value := cTemp

	endif

return



procedure sethmg
local cTemp

	cTemp := GetFile()

	if .not. empty (cTemp)

		PrefM.text_1.value := cTemp

	endif

return



//----------------------------------
Procedure PrefOk (cCurrLang)
//----------------------------------

   ProgramEditor  := ALLTRIM (PrefM.Text_1.Value)
   Language       := ALLTRIM (PrefM.Combo_1.DisplayValue)


   SaveString ( Startupfolder + 'editor.ini' ,   ProgramEditor )
   SaveString ( Startupfolder + cFileLanguage , Language )
   DoMethod('PrefM','Release')

   If HMG_UPPER(ALLTRIM(Language)) <> HMG_UPPER(ALLTRIM(cCurrLang))
      // MsgInfo ( aMsgs [047] ,'HMG IDE' )
      WaitWindow ("Please Wait...", .T.)
         LOAD_LANGUAGE_MESSAGE ()
         Proc_DEFINE_MAIN_MENU ()
         CHANGE_TITLES()
      WaitWindow ()
   endif
Return



//---------------------
Procedure PrefCancel
//---------------------
   DoMethod('PrefM','Release')
Return



*------------------------------------------------------------------------------*
Function OpenProject
*------------------------------------------------------------------------------*
Local FileName
Local Project
Local Line, LineCount
Local i
Local Done
Loca cBase
Local aForms := {}
Local aIncludes := {}

Local aReports := {}
Local nReports := 0

Local aTables := {}
Local nTables := 0


	If nParameterCount == 0

		FileName := Getfile ( { {'HMG Projects','*.hbp'} } , 'Open Project' , , .f. , .f. )

	Else

		FileName := cParameters[1]

		if ALLTRIM ( HMG_LOWER ( HB_URIGHT ( FileName , 4 ) ) ) <> '.hbp'

			FileName := ALLTRIM ( FileName ) + '.hbp'

		endif

		cBase := HB_ULEFT ( FileName , HB_UTF8RAT ( '\' , FileName ) )

		SetCurrentFolder( cBase )

		nParameterCount := 0

	EndIf

	If Empty (FileName)
		Return NIL
	Endif

	If _IsWindowDefined ( DesignForm )
		DoMethod ( DesignForm , 'Release' )
		Properties.Title := aMsgs [ 074 ]
		Properties.Grid_1.DeleteAllItems
		Properties.Grid_2.DeleteAllItems
		Properties.Combo_1.DeleteAllItems
		SelectedControlName := ''
		OpenFormName := ''
	EndIf

	ProjectName := FileName

	Project := HB_MEMOREAD ( FileName )

	LineCount := MlCount (Project)

	Project.List_1.DeleteAllItems
	Project.List_2.DeleteAllItems
	Project.List_3.DeleteAllItems
	Project.List_4.DeleteAllItems

	Done := .F.

	For i := 1 To LineCount

		Line := ALLTRIM ( MemoLine ( Project , 254 , i , 4 , .t. ) )

		If .Not. Empty (Line)

			if HMG_UPPER ( HB_URIGHT ( Line , 4 ) ) == '.PRG'

				if Done == .F.
					Line := Line + ' (Main)'
					Done := .T.
				EndIf

				Project.List_1.AddItem ( Line )

			EndIf

		EndIf

	Next i


	refreshproject()


       If Done == .F.
              MsgStop ( aMsgs [ 226 ] , 'Error')
              ProjectName := ''
              Return Done
       EndIf

	SortModuleList(1)

	Project.Title := aMsgs [ 200 ] + HB_URIGHT ( ProjectName , HMG_LEN(Projectname) - HB_UTF8RAT ('\',ProjectName) ) + ']'

// Form_Main.StatusBar.Item (1) := ProjectName
Form_Main.TITLE := _EAT + IF (EMPTY(ProjectName),"","[ "+ ProjectName +" ]")


Form_Main.Button_BuildLog.ENABLED := .T.

   Project.Tab_1.Value := 1
	Properties.Tab_1.Value := 1

Return Done
*------------------------------------------------------------------------------*
Procedure SaveProject
*------------------------------------------------------------------------------*
Local Project
Local i
Local Item

      If Empty(ProjectName)
         Return
      EndIf

	Project := ''

	For i := 1 To Project.List_1.ItemCount

		Item := Project.List_1.Item ( i )

		if HB_URIGHT ( Item , 7 ) == ' (Main)'
			Item := HB_ULEFT ( Item , HMG_LEN (Item) - 7 )
			Item := ALLTRIM(Item)
		endif

		Project := Project + Item + CRLF

	Next i


	SaveString ( ProjectName , Project )

	SaveResources()

Return
*------------------------------------------------------------------------------*
Procedure NewProject
*------------------------------------------------------------------------------*

	ProjectName := Putfile ( { {'HMG Projects','*.hbp'} } , 'New Project' , , .f.  )

	If Empty ( ProjectName)
		Return
	Endif

	ProjectName := ALLTRIM ( ProjectName )

	if HMG_UPPER ( HB_URIGHT ( ProjectName , 4 ) ) == '.HBP'
		Projectname := HB_ULEFT ( ProjectName , HMG_LEN(ProjectName) - 4 )
	EndIf

	if HB_UAT ( ' ' , ProjectName ) > 0
		MsgStop (aMsgs [ 222 ],'HMG IDE')
		Return
	endif

	if HB_UAT ( '.' , ProjectName ) > 0
		MsgStop (aMsgs [ 222 ],'HMG IDE')
		Return
	endif

	if HB_UAT ( ',' , ProjectName ) > 0
		MsgStop (aMsgs [ 222 ],'HMG IDE')
		Return
	endif

	if HB_UAT ( '/' , ProjectName ) > 0
		MsgStop (aMsgs [ 222 ],'HMG IDE')
		Return
	endif

	if HB_UAT ( '*' , ProjectName ) > 0
		MsgStop (aMsgs [ 222 ],'HMG IDE')
		Return
	endif

	if HB_UAT ( '?' , ProjectName ) > 0
		MsgStop (aMsgs [ 222 ],'HMG IDE')
		Return
	endif


	if HMG_UPPER ( HB_URIGHT ( ProjectName , 4 ) ) != '.HBP'
		Projectname := ProjectName + '.hbp'
	EndIf

	if file ( ProjectName )
		if MsgYesNo ( Projectname + ' ' + aMsgs [ 227 ] ) == .F.
			Return
		EndIf
	endif

	If _IsWindowDefined ( DesignForm )
		DoMethod ( DesignForm , 'Release' )
	EndIf

	Project.List_1.DeleteAllItems
	Project.List_2.DeleteAllItems
	Project.List_3.DeleteAllItems
	Project.config.value := 'inc=yes' + CRLF + 'head=native'
	Project.tables.DeleteAllItems
	Project.Edit_1.Value := ''
	Project.Tab_1.Value := 1

	Project.Title := 'Project Browser [' + HB_URIGHT ( ProjectName , HMG_LEN(Projectname) - HB_UTF8RAT ('\',ProjectName) ) + ']'

   // Form_Main.StatusBar.Item (1) := ProjectName
   Form_Main.TITLE := _EAT + IF (EMPTY(ProjectName),"","[ "+ ProjectName +" ]")


   Form_Main.Button_BuildLog.ENABLED := .T.

	SaveProject()

*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-

	lVirtualForm := .F.
	NewModule( 'Main' )
	NewForm( 'Main' )

Return
*------------------------------------------------------------------------------*
Procedure CloseProject
*------------------------------------------------------------------------------*

	if empty ( ProjectName )
		Return
	EndIf

	if msgyesno ( aMsgs [ 099 ] , aMsgs [ 003 ] ) == .f.
		Return
	endif

	If _IsWindowDefined ( DesignForm )
		DoMethod ( DesignForm , 'Release' )
	EndIf

	SaveResources()

	ProjectName := ''
	OpenFormName := ''
	Project.List_1.DeleteAllItems
	Project.List_2.DeleteAllItems
	Project.List_3.DeleteAllItems
	Project.Edit_1.Value := ''
	Project.Title := aMsgs [ 065 ]
	Project.Tab_1.Value := 1
	Properties.Tab_1.Value := 1

	Project.config.value := ''

	Project.tables.DeleteAllItems

   // Form_Main.StatusBar.Item (1) := ProjectName
   Form_Main.TITLE := _EAT + IF (EMPTY(ProjectName),"","[ "+ ProjectName +" ]")


   Form_Main.Button_BuildLog.ENABLED := .F.

Return
*------------------------------------------------------------------------------*
Procedure EditFile
*------------------------------------------------------------------------------*
Local FileName


	If Empty ( Projectname )
		Return
	EndIf

	if Project.tab_1.Value == 1

		if Project.List_1.Value == 0
			Return
		endif

		FileName := ALLTRIM( Project.List_1.Item( Project.List_1.Value ) )

		if HB_URIGHT ( FileName , 7 ) == ' (Main)'
			FileName := HB_ULEFT ( FileName , HMG_LEN ( FileName ) - 7 )
		endif

		If HMG_UPPER ( HB_URIGHT ( FileName , 4 ) ) == '.PRG'

			EXECUTE FILE ProgramEditor PARAMETERS FileName

		EndIf

	ElseIf Project.tab_1.Value == 2


		If Project.List_2.Value == 0
			Return
		EndIf

		FileName := ALLTRIM( Project.List_2.Item( Project.List_2.Value ) )

		if ALLTRIM(HMG_UPPER (filename)) == ALLTRIM(HMG_UPPER(OpenFormName))
			return
		endif

		If HMG_UPPER ( HB_URIGHT ( FileName , 4 ) ) == '.FMG'

			If _IsWindowDefined ( DesignForm )
				DoMethod ( DesignForm , 'Release' )
			EndIf

			Properties.Title := aMsgs [ 154 ] + FileName + ']'

			_Open ( FileName )

		EndIf

	Elseif Project.tab_1.Value == 4

		if Project.List_3.Value == 0
			Return
		endif

		FileName := ALLTRIM( Project.List_3.Item( Project.List_3.Value ) )

		If HMG_UPPER ( HB_URIGHT ( FileName , 4 ) ) == '.RPT'

			EditReport(FileName)

		EndIf

		If HMG_UPPER ( HB_URIGHT ( FileName , 4 ) ) == '.RMG'

			EditNewReport(FileName)

		EndIf

	ElseIf Project.tab_1.Value == 6

		if Project.List_1.Value == 0
			Return
		endif

		FileName := ALLTRIM( Project.List_4.Item( Project.List_4.Value ) )

		If HMG_UPPER ( HB_URIGHT ( FileName , 3 ) ) == '.CH'

			EXECUTE FILE ProgramEditor PARAMETERS FileName

		EndIf


	ElseIf Project.tab_1.Value == 7

		if Project.Tables.Value == 0
			Return
		endif

		FileName := ALLTRIM( Project.tables.Item( Project.tables.Value ) )

		If HMG_UPPER ( HB_URIGHT ( FileName , 4 ) ) == '.DBF'

			TableView(FileName)

		EndIf

	EndIf

Return
*------------------------------------------------------------------------------*
Procedure EditReport ( cFileName )
*------------------------------------------------------------------------------*

	if file ( cFileName )

		Define Window EditReport	;
			At 0,0			;
			Width 470		;
			Height 435 + GetTitleHeight() + GetBorderHeight() + GetBorderHeight() ;
			Title 'Report Editor ['	+ cFileName + ']';
			Modal			;
			NoSize

			ON KEY ESCAPE	Action	( ;
				ThisWindow.Release ;
						)

			* Labels Column 1

			Define Label Label1
				Row	10
				Col	15
				Width	90
				Value	'Title:'
			End Label

			Define Label Label2
				Row	40
				Col	15
				Width	90
				Value	'Headers:'
			End Label

			Define Label Label3
				Row	70
				Col	15
				Width	90
				Value	'Fields:'
			End Label

			Define Label Label4
				Row	100
				Col	15
				Width	90
				Value	'Widths:'
			End Label

			Define Label Label5
				Row	130
				Col	15
				Width	90
				Value	'Totals:'
			End Label

			Define Label Label6
				Row	160
				Col	15
				Width	90
				Value	'N. Formats:'
			End Label

			Define Label Label7
				Row	190
				Col	15
				Width	90
				Value	'WorkArea:'
			End Label

			Define Label Label8
				Row	220
				Col	15
				Width	90
				Value	'LPP:'
			End Label

			Define Label Label9
				Row	250
				Col	15
				Width	90
				Value	'CPL:'
			End Label

			Define Label Label10
				Row	280
				Col	15
				Width	90
				Value	'L. Margin:'
			End Label

			Define Label LabelNoFixed
				Row	310
				Col	15
				Width	80
				Value	'NoFixed:'
			End Label

			* Labels Column 2

			Define Label Label11
				Row	10
				Col	240
				Width	90
				Value	'DOS Mode:'
			End Label

			Define Label Label12
				Row	40
				Col	240
				Width	90
				Value	'Preview:'
			End Label

			Define Label Label13
				Row	70
				Col	240
				Width	90
				Value	'Select:'
			End Label

			Define Label Label14
				Row	100
				Col	240
				Width	90
				Value	'Multiple:'
			End Label

			Define Label Labe1l5
				Row	130
				Col	240
				Width	90
				Value	'Grouped By:'
			End Label

			Define Label Label16
				Row	160
				Col	240
				Width	90
				Value	'Group Header:'
			End Label

			Define Label Label17
				Row	190
				Col	240
				Width	90
				Value	'Landscape:'
			End Label

			Define Label Label18
				Row	220
				Col	240
				Width	90
				Value	'PaperSize:'
			End Label

			Define Label Label19
				Row	250
				Col	240
				Width	90
				Value	'Image:'
			End Label

			Define Label Label20
				Row	284
				Col	350
				Width	20
				Value	'At:'
			End Label

			Define Label Label21
				Row	314
				Col	350
				Width	20
				Value	'To:'
			End Label

			* TextBox Column 1

			Define TextBox Text1
				Row	10
				Col	100
				Width	120
				Value	''
			End TextBox

			Define TextBox Text2
				Row	40
				Col	100
				Width	120
				Value	''
			End TextBox

			Define TextBox Text3
				Row	70
				Col	100
				Width	120
				Value	''
			End TextBox

			Define TextBox Text4
				Row	100
				Col	100
				Width	120
				Value	''
			End TextBox

			Define TextBox Text5
				Row	130
				Col	100
				Width	120
				Value	''
			End TextBox

			Define TextBox Text6
				Row	160
				Col	100
				Width	120
				Value	''
			End TextBox

			Define TextBox Text7
				Row	190
				Col	100
				Width	120
				Value	''
			End TextBox

			Define TextBox Text8
				Row	220
				Col	100
				Width	120
				Value	''
			End TextBox

			Define TextBox Text9
				Row	250
				Col	100
				Width	120
				Value	''
			End TextBox

			Define TextBox Text10
				Row	280
				Col	100
				Width	120
				Value	''
			End TextBox

			Define CheckBox CheckNoFixed
				Row	310
				Col	100
				Width	120
				Value	.F.
			End CheckBox

			* TextBox Column 2

			Define CheckBox Check11
				Row	10
				Col	330
				Width	120
			End CheckBox

			Define CheckBox Check12
				Row	40
				Col	330
				Width	120
			End CheckBox

			Define CheckBox Check13
				Row	70
				Col	330
				Width	120
			End CheckBox

			Define CheckBox Check14
				Row	100
				Col	330
				Width	20
			End CheckBox

			Define TextBox Text15
				Row	130
				Col	330
				Width	120
				Value	''
			End TextBox

			Define TextBox Text16
				Row	160
				Col	330
				Width	120
				Value	''
			End TextBox

			Define CheckBox Check17
				Row	190
				Col	330
				Width	120
			End CheckBox

			Define TextBox Text18
				Row	220
				Col	330
				Width	120
				Value	''
			End TextBox

			Define TextBox Text19
				Row	250
				Col	330
				Width	120
				Value	''
			End TextBox

			* TextBox Extra

			Define TextBox Text20a
				Row	280
				Col	375
				Width	35
				Value	''
			End TextBox

			Define TextBox Text20b
				Row	280
				Col	415
				Width	35
				Value	''
			End TextBox

			Define TextBox Text21a
				Row	310
				Col	375
				Width	35
				Value	''
			End TextBox

			Define TextBox Text21b
				Row	310
				Col	415
				Width	35
				Value	''
			End TextBox

			* Buttons



			Define Button Preview
				Row	398
				Col	130
				Caption	'Preview'
				Action	DoReportPreview ( cFileName , EditReport.Text7.Value )
			End Button



			Define Button Ok
				Row	398
				Col	240
				Caption	'Ok'
				Action	( SaveReport ( cFileName ) , ThisWindow.Release )
			End Button

			Define Button Cancel
				Row	398
				Col	350
				Caption	'Cancel'
				Action	ThisWIndow.Release
			End Button

		End Window

		ReadReport ( cFileName )

		EditReport.Center

		EditReport.Activate

	else

		MsgStop ( "Report File Not Found!" , "HMG IDE" )

	endif

	If _IsWIndowDefined (DesignForm)

		DoMethod ( DesignForm , 'SetFocus' )

	EndIf

Return
*------------------------------------------------------------------------------*
Procedure DoReportPreview ( cReport , cWorkArea )
*------------------------------------------------------------------------------*
Local cFile
Local lBack

	cFile := HMG_LOWER ( ALLTRIM ( cWorkArea ) ) + '.dbf'

	if .Not. File ( cFile )
		MsgStop ( cFile + " Not Available. Can't Preview" , "HMG IDE" )
		Return
	EndIf

	if .Not. Empty ( cWorkArea )

		if HB_URIGHT ( ALLTRIM ( HMG_UPPER ( cReport ) ) , 4 ) == '.RPT'
			cReport := HB_ULEFT ( cReport , HMG_LEN(cReport) - 4 )
		endif

		cWorkArea := ALLTRIM(cWorkArea)

		USE (cWorkArea)

		lBack := EditReport.Check12.Value

		EditReport.Check12.Value := .T.

		SaveReport ( cReport + '.rpt' )

		extreport ( cReport )

		USE

		EditReport.Check12.Value := lBack

		SaveReport ( cReport + '.rpt' )

	endif

Return
*------------------------------------------------------------------------------*
Procedure ReadReport ( cFileName )
*------------------------------------------------------------------------------*
Local cReport
Local i
Local Line
Local x
Local aTemp := {}
Local c
Local s
Local nStart

	* Clean

	EditReport.Text1.Value		:= ''
	EditReport.Text2.Value		:= ''
	EditReport.Text3.Value		:= ''
	EditReport.Text4.Value		:= ''
	EditReport.Text5.Value		:= ''
	EditReport.Text6.Value		:= ''
	EditReport.Text7.Value		:= ''
	EditReport.Text8.Value		:= ''
	EditReport.Text9.Value		:= ''
	EditReport.Text10.Value		:= ''
	EditReport.CheckNoFixed.Value	:= .F.
	EditReport.Check11.Value	:= .F.
	EditReport.Check12.Value	:= .F.
	EditReport.Check13.Value	:= .F.
	EditReport.Check14.Value	:= .F.
	EditReport.Text15.Value		:= ''
	EditReport.Text16.Value		:= ''
	EditReport.Check17.Value	:= .F.
	EditReport.Text18.Value		:= ''
	EditReport.Text19.Value		:= ''
	EditReport.Text20a.Value	:= ''
	EditReport.Text20b.Value	:= ''
	EditReport.Text21a.Value	:= ''
	EditReport.Text21b.Value	:= ''

	cReport := HB_MEMOREAD ( cFileName )

	For i := 1 To HMG_LEN ( cReport )

		Line := ALLTRIM ( MemoLine ( cReport , 1024 , i , 4 , .t. ) )

		if 	HMG_UPPER(Line) = 'TITLE '
			EditReport.Text1.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 6 ) )

		ElseIf	HMG_UPPER(Line) = 'HEADERS '
			EditReport.Text2.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 8 ) )

		ElseIf HMG_UPPER(Line) = 'FIELDS '
			EditReport.Text3.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 7 ) )

		ElseIf HMG_UPPER(Line) = 'WIDTHS '
			EditReport.Text4.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 7 ) )

		ElseIf HMG_UPPER(Line) = 'TOTALS '
			EditReport.Text5.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 7 ) )

		ElseIf HMG_UPPER(Line) = 'NFORMATS '
			EditReport.Text6.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 9 ) )

		ElseIf HMG_UPPER(Line) = 'WORKAREA '
			EditReport.Text7.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 9 ) )

		ElseIf HMG_UPPER(Line) = 'LPP '
			EditReport.Text8.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 4 ) )

		ElseIf HMG_UPPER(Line) = 'CPL '
			EditReport.Text9.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 4 ) )

		ElseIf HMG_UPPER(Line) = 'LMARGIN '
			EditReport.Text10.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 8 ) )

		ElseIf HMG_UPPER(Line) = 'NOFIXED'
			EditReport.CheckNoFixed.Value := .T.

		ElseIf HMG_UPPER(Line) = 'DOSMODE'
			EditReport.Check11.Value := .T.

		ElseIf HMG_UPPER(Line) = 'PREVIEW'
			EditReport.Check12.Value := .T.

		ElseIf HMG_UPPER(Line) = 'SELECT'
			EditReport.Check13.Value := .T.

		ElseIf HMG_UPPER(Line) = 'MULTIPLE'
			EditReport.Check14.Value := .T.

		ElseIf HMG_UPPER(Line) = 'GROUPED BY '
			EditReport.Text15.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 11 ) )

		ElseIf HMG_UPPER(Line) = 'HEADRGRP '
			EditReport.Text16.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 9 ) )

		ElseIf HMG_UPPER(Line) = 'LANDSCAPE'
			EditReport.Check17.Value := .T.

		ElseIf HMG_UPPER(Line) = 'PAPERSIZE '
			EditReport.Text18.Value := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN(Line) - 10 ) )

		ElseIf HMG_UPPER(Line) = 'IMAGE '

			aTemp	:= {}
			s	:= ''
			nStart	:= HB_UAT ( '{', Line ) + 1

			For x := nStart To HMG_LEN ( Line )
				c := HB_USUBSTR ( Line , x , 1 )
				if c == ',' .Or. c == '}'
					aadd ( aTemp , ALLTRIM(s) )
					s := ''
				else
					s := s + c
				endif
			Next x

			if HMG_LEN ( aTemp ) == 5
				EditReport.Text19.Value	 := aTemp [1]
				EditReport.Text20a.Value := aTemp [2]
				EditReport.Text20b.Value := aTemp [3]
				EditReport.Text21a.Value := aTemp [4]
				EditReport.Text21b.Value := aTemp [5]
			EndIf

		EndIf

	Next i

Return
*------------------------------------------------------------------------------*
Procedure SaveReport ( cFileName )
*------------------------------------------------------------------------------*
Local cReport := ''

	cReport := 'DEFINE REPORT TEMPLATE' + CRLF

	If .Not. Empty (EditReport.Text1.Value)
		cReport += Space(4) + 'TITLE ' + ALLTRIM (EditReport.Text1.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text2.Value)
		cReport +=  Space(4) + 'HEADERS ' + ALLTRIM (EditReport.Text2.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text3.Value)
		cReport +=  Space(4) + 'FIELDS ' + ALLTRIM (EditReport.Text3.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text4.Value)
		cReport +=  Space(4) + 'WIDTHS ' + ALLTRIM (EditReport.Text4.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text5.Value)
		cReport +=  Space(4) + 'TOTALS ' + ALLTRIM (EditReport.Text5.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text6.Value)
		cReport +=  Space(4) + 'NFORMATS ' + ALLTRIM (EditReport.Text6.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text7.Value)
		cReport +=  Space(4) + 'WORKAREA ' + ALLTRIM (EditReport.Text7.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text8.Value)
		cReport +=  Space(4) + 'LPP ' + ALLTRIM (EditReport.Text8.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text9.Value)
		cReport +=  Space(4) + 'CPL ' + ALLTRIM (EditReport.Text9.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text10.Value)
		cReport +=  Space(4) + 'LMARGIN ' + ALLTRIM (EditReport.Text10.Value) + CRLF
	Endif

	If EditReport.CheckNoFixed.Value == .T.
		cReport +=  Space(4) + 'NOFIXED' + CRLF
	Endif

	If EditReport.Check11.Value == .T.
		cReport +=  Space(4) + 'DOSMODE' + CRLF
	Endif

	If EditReport.Check12.Value == .T.
		cReport +=  Space(4) + 'PREVIEW' + CRLF
	Endif

	If EditReport.Check13.Value == .T.
		cReport +=  Space(4) + 'SELECT' + CRLF
	Endif

	If EditReport.Check14.Value == .T.
		cReport +=  Space(4) + 'MULTIPLE' + CRLF
	Endif

	If .Not. Empty (EditReport.Text15.Value)
		cReport +=  Space(4) + 'GROUPED BY ' + ALLTRIM (EditReport.Text15.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text16.Value)
		cReport +=  Space(4) + 'HEADRGRP ' + ALLTRIM (EditReport.Text16.Value) + CRLF
	Endif

	If EditReport.Check17.Value == .T.
		cReport +=  Space(4) + 'LANDSCAPE' + CRLF
	Endif

	If .Not. Empty (EditReport.Text18.Value)
		cReport +=  Space(4) + 'PAPERSIZE ' + ALLTRIM (EditReport.Text18.Value) + CRLF
	Endif

	If .Not. Empty (EditReport.Text19.Value)
		cReport +=  Space(4) + 'IMAGE ' + '{ ' + ALLTRIM (EditReport.Text19.Value) + ' , '
		cReport +=  ALLTRIM (EditReport.Text20a.Value ) + ' , ' + ALLTRIM (EditReport.Text20b.Value ) + ' , '
		cReport +=  ALLTRIM (EditReport.Text21a.Value ) + ' , ' + ALLTRIM (EditReport.Text21b.Value ) + ' } ' + CRLF
	Endif

	cReport := cReport + 'END REPORT' + CRLF

	SaveString ( cFileName , cReport )

Return
*------------------------------------------------------------------------------*
Function NewForm ( cNewForm )
*------------------------------------------------------------------------------*
Local Result
Local i
Local cFormContent
Local lRetVal := .T.


	InitControlCounters()

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return NIL
	EndIf

	_HMG_SYSDATA [ 257 ] := .F.

	If VALTYPE (cNewForm) = 'U'

		Result := ALLTRIM ( InputBox ( aMsgs [ 152 ]  , aMsgs [ 153 ]  , '' ) )

	Else

		Result := cNewForm

	EndIf

	If _HMG_SYSDATA [ 257 ] == .T.
		If _IsWindowDefined ( DesignForm )
			SelectControl (SelectedControlName)
			DrawGrid()
		endif
		Return NIL
	EndIf

	If Empty ( Result )
		If _IsWindowDefined ( DesignForm )
			SelectControl (SelectedControlName)
			DrawGrid()
		endif
		Return NIL
	EndIf

	Result := ALLTRIM (Result)

	If HMG_UPPER ( HB_URIGHT ( Result,4 ) ) != '.FMG'
		Result := Result + '.Fmg'
	EndIf

	For i := 1 To Project.List_2.ItemCount
		if ALLTRIM( HMG_UPPER(Project.List_2.Item(i)) ) == ALLTRIM( HMG_UPPER(result) )
			MsgStop( aMsgs [ 157 ]  , 'HMG IDE' )
			Return NIL
		endif
	next i


	If VALTYPE (cNewForm) = 'U'

		cFormContent := ''
		cFormContent += 'DEFINE WINDOW TEMPLATE AT 132 , 235 WIDTH 550 HEIGHT 350 VIRTUAL WIDTH Nil VIRTUAL HEIGHT Nil TITLE "" ICON NIL  CURSOR NIL ON INIT Nil ON RELEASE Nil ON INTERACTIVECLOSE Nil ON MOUSECLICK Nil ON MOUSEDRAG Nil ON MOUSEMOVE Nil ON SIZE Nil ON MAXIMIZE Nil ON MINIMIZE Nil ON PAINT Nil BACKCOLOR Nil NOTIFYICON NIL NOTIFYTOOLTIP NIL ON NOTIFYCLICK Nil ON GOTFOCUS Nil ON LOSTFOCUS Nil ON SCROLLUP Nil ON SCROLLDOWN Nil ON SCROLLLEFT Nil ON SCROLLRIGHT Nil ON HSCROLLBOX Nil ON VSCROLLBOX Nil'
		cFormContent += CRLF
		cFormContent += 'END WINDOW'
		cFormContent += CRLF

		If File ( Result )

			If MsgYesNo ( Result + ' ' + aMsgs [ 227 ] )
				SaveString ( Result , cFormContent  )
			Else
				Return (.F.)
			EndIf

		Else

			SaveString ( Result , cFormContent )

		EndIf

	Else

		cFormContent := ''
		cFormContent += 'DEFINE WINDOW TEMPLATE AT 138 , 235 WIDTH 550 HEIGHT 350 VIRTUAL WIDTH Nil VIRTUAL HEIGHT Nil TITLE "" ICON NIL MAIN CURSOR NIL ON INIT Nil ON RELEASE Nil ON INTERACTIVECLOSE Nil ON MOUSECLICK Nil ON MOUSEDRAG Nil ON MOUSEMOVE Nil ON SIZE Nil ON MAXIMIZE Nil ON MINIMIZE Nil ON PAINT Nil BACKCOLOR Nil NOTIFYICON NIL NOTIFYTOOLTIP NIL ON NOTIFYCLICK Nil ON GOTFOCUS Nil ON LOSTFOCUS Nil ON SCROLLUP Nil ON SCROLLDOWN Nil ON SCROLLLEFT Nil ON SCROLLRIGHT Nil ON HSCROLLBOX Nil ON VSCROLLBOX Nil'
		cFormContent += CRLF
		cFormContent += 'END WINDOW'
		cFormContent += CRLF

		If File ( Result )

			If MsgYesNo ( Result + ' ' + aMsgs [ 227 ] )

				SaveString ( Result , cFormContent )

			Else

				Return (.F.)

			EndIf

		Else

			SaveString ( Result , cFormContent )

		EndIf

	EndIf

	Project.List_2.AddItem ( Result )

	SortFormList( )

	SaveProject()

	Project.Tab_1.Value := 2

	Properties.Title := aMsgs [ 154 ]  + Result + ']'

	If _IsWindowDefined ( DesignForm )
		DoMethod ( DesignForm , 'Release' )
	EndIf


	_Open ( Result )

Return lRetVal

*------------------------------------------------------------------------------*
Procedure NewModule ( cNewModule )
*------------------------------------------------------------------------------*
Local Result
Local i
Local cProgram := ''

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf

	If VALTYPE ( cNewModule ) = 'U'

		Result := ALLTRIM ( InputBox ( aMsgs [ 152 ] , aMsgs [ 155 ]  , '' ) )

		cProgram := '#include <hmg.ch>' +CRLF

	Else

		Result := cNewModule

		cProgram := '#include <hmg.ch>' + CRLF + CRLF + 'Function Main' + CRLF  + CRLF + Space(8) + 'Load Window Main' + CRLF + Space(8) + 'Main.Center' + CRLF + Space(8) + 'Main.Activate' + CRLF + CRLF + 'Return' + CRLF

	EndIf

	If _HMG_SYSDATA [ 257 ] == .T.
		If _IsWindowDefined ( DesignForm )
			SelectControl (SelectedControlName)
			DrawGrid()
		endif
		Return
	EndIf

	If Empty ( Result )
		If _IsWindowDefined ( DesignForm )
			SelectControl (SelectedControlName)
			DrawGrid()
		endif
		Return
	EndIf

	Result := ALLTRIM (Result)

	If HMG_UPPER ( HB_URIGHT ( Result,4 ) ) != '.PRG'
		Result := Result + '.Prg'
	EndIf

	For i := 1 To Project.List_1.ItemCount
		if ALLTRIM( HMG_UPPER(Project.List_1.Item(i)) ) == ALLTRIM( HMG_UPPER(result) )
			MsgStop( aMsgs [ 156 ]  , 'HMG IDE' )
			Return
		endif
	next i

	If File ( Result )

		If MsgYesNo ( Result + ' ' + aMsgs [ 227 ] )

			SaveString ( Result , cProgram )

		Else

			Return

		EndIf

	Else

		SaveString ( Result , cProgram )

	EndIf

	Project.List_1.AddItem ( Result )

	if Project.List_1.ItemCount == 1
		Project.List_1.Item(1) := Project.List_1.Item(1) + ' (Main)'
	else
		SortModuleList()
	endif

	EXECUTE FILE ProgramEditor PARAMETERS Result

	SaveProject()

	Project.Tab_1.Value := 1

	if _IsWindowDefined ( DesignForm )
		SelectControl (SelectedControlName)
		DrawGrid()
	endif

Return
*------------------------------------------------------------------------------*
Procedure NewReport
*------------------------------------------------------------------------------*
Local Result
Local i
Local lFound

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf

	If _ReportBuilderActive == .T.
		MsgStop ( 'Report Builder already active!' , 'HMG IDE' )
		return
	endif

	Result := ALLTRIM ( InputBox ( aMsgs [ 152 ]  , aMsgs [ 158 ]  , '' ) )

	If Empty ( Result )
		If _IsWindowDefined ( DesignForm )
			SelectControl (SelectedControlName)
			DrawGrid()
		EndIf
		Return
	EndIf

	Result := ALLTRIM (Result)

	IF _REPORTTYPE == 'OLD'

		If HMG_UPPER ( HB_URIGHT ( Result,4 ) ) != '.RPT'
			Result := Result + '.rpt'
		EndIf

	ELSEIF _REPORTTYPE == 'NEW'

		If HMG_UPPER ( HB_URIGHT ( Result,4 ) ) != '.RMG'
			Result := Result + '.rmg'
		EndIf

	ENDIF

	lFound := .F.

	For i := 1 To Project.List_3.ItemCount

		If Project.List_3.Item(i) == Result
			lFound := .T.
			Exit
		EndIf

	Next i

	If lFound == .F.

		Project.List_3.AddItem ( Result )

	Else

		If !MsgYesNo(Result +' already exists. Overwrite it ?')
			Return
		EndIf

	EndIf

	IF _REPORTTYPE == 'OLD'

		SaveString ( Result , 'DEFINE REPORT TEMPLATE' +CRLF + 'END REPORT')

	ELSEIF _REPORTTYPE == 'NEW'

		SaveString ( Result , 'DEFINE REPORT TEMPLATE' +CRLF + 'END REPORT')

	ENDIF

	Project.Tab_1.Value := 4
	Project.List_3.Value := Project.List_3.ItemCount

	IF _REPORTTYPE == 'OLD'

		EditReport ( Result )

	ELSEIF _REPORTTYPE == 'NEW'

		EditNewReport ( Result )

	ENDIF

	If _IsWindowDefined ( DesignForm )
		SelectControl (SelectedControlName)
		DrawGrid()
	EndIf

Return

*------------------------------------------------------------------------------*
Procedure AddForm
*------------------------------------------------------------------------------*
LOCAL Result, ProjectFolder, FileFolder
Local FileName

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf

	Result := Getfile ( { {'HMG Forms','*.fmg'} } , aMsgs [ 159 ]  , , .f. , .t. )

	If Empty ( Result )
		Return
	EndIf

	Result := ALLTRIM (Result)

	ProjectFolder := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Projectname , HB_UTF8RAT ('\' , ProjectName ) ) ) )
	FileFolder := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Result , HB_UTF8RAT ('\' ,Result ) ) ) )

	FileName := ALLTRIM(HB_USUBSTR ( result , HB_UTF8RAT ('\',result) + 1 , 255 ))

	MsgInfo(ProjectFolder + FileName)

	COPY FILE (Result) TO (ProjectFolder + FileName)

        refreshproject()

	Project.Tab_1.Value := 2

Return


// #define _ALLOW_DELETE_FILE_

*------------------------------------------------------------------------------*
Procedure ExcludeFile
*------------------------------------------------------------------------------*
Local i

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf

	If Project.tab_1.Value == 1

		i := Project.List_1.Value

		if i == 0
			Return
		endif

		if MsgYesNo ( aMsgs [ 099 ]  , aMsgs [ 167 ]  + ' ' + ALLTRIM( Project.List_1.Item (i) ) ) == .T.

#ifdef _ALLOW_DELETE_FILE_
 			if HB_URIGHT ( , 7 ) == ' (Main)'
				delete file ( HB_ULEFT ( ALLTRIM( Project.List_1.Item (i) ) , HMG_LEN(ALLTRIM( Project.List_1.Item (i) )) - 7  ) )
			else
				delete file ( ALLTRIM( Project.List_1.Item (i) ) )
			endif
#endif

			Project.List_1.DeleteItem (i)
			SaveProject()

			If  Project.List_1.ItemCount > 0 ;
				.and. ;
				i == 1
				Project.List_1.Item (1) := Project.List_1.Item (1) +' (Main)'
			Endif

			Project.List_1.Value := 1

		endif

	ElseIf  Project.tab_1.Value == 2

		i := Project.List_2.Value

		if i == 0
			Return
		endif

		if MsgYesNo ( aMsgs [ 168 ]  , aMsgs [ 167 ] + ' ' + ALLTRIM( Project.List_2.Item (i) ) ) == .T.

			if IsWindowDefined(&DesignForm) ;
				.and. ;
				HMG_UPPER(ALLTRIM(OpenFormName)) == HMG_UPPER(ALLTRIM( Project.List_2.Item (i) ))

				DoMethod ( DesignForm , 'Release' )
			EndIf

#ifdef _ALLOW_DELETE_FILE_
			delete file ( ALLTRIM( Project.List_2.Item (i) ) )
#endif
			Project.List_2.DeleteItem (i)

		Endif

	ElseIf  Project.tab_1.Value == 4

		i := Project.List_3.Value

		if i == 0
			Return
		endif

		if MsgYesNo ( aMsgs [ 168 ]  , aMsgs [ 167 ] + ' ' + ALLTRIM( Project.List_3.Item (i) ) ) == .T.

#ifdef _ALLOW_DELETE_FILE_
			delete file ( ALLTRIM( Project.List_3.Item (i) ) )
#endif
			refreshproject()

		endif

	ElseIf  Project.tab_1.Value == 6

		i := Project.List_4.Value

		if i == 0
			Return
		endif

		if MsgYesNo ( aMsgs [ 168 ]  , aMsgs [ 167 ] + ' ' + ALLTRIM( Project.List_4.Item (i) ) ) == .T.

#ifdef _ALLOW_DELETE_FILE_
			delete file ( ALLTRIM( Project.List_4.Item (i) ) )
#endif

			Project.List_4.DeleteItem (i)

		endif

	ElseIf  Project.tab_1.Value == 7

		i := Project.tables.Value

		if i == 0
			Return
		endif

		if MsgYesNo ( aMsgs [ 168 ]  , aMsgs [ 167 ] + ' ' + ALLTRIM( Project.tables.Item (i) ) ) == .T.

#ifdef _ALLOW_DELETE_FILE_
			delete file ( ALLTRIM( Project.tables.Item (i) ) )
#endif

			Project.tables.DeleteItem (i)

		endif



	EndIf

Return

*------------------------------------------------------------------------------*
Procedure SetMain
*------------------------------------------------------------------------------*
Local i , SelectedItem , FirstItem

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf

	i := Project.List_1.Value

	If i == 0
		Return
	endif

	FirstItem := ALLTRIM ( Project.List_1.Item (1) )

	SelectedItem := ALLTRIM ( Project.List_1.Item (i) )

	if HB_URIGHT ( SelectedItem , 7 ) == ' (Main)'
		Return
	endif

	if HB_URIGHT ( FirstItem , 7 ) == ' (Main)'
		FirstItem := HB_ULEFT ( FirstItem , HMG_LEN (FirstItem) - 7 )
	endif

	Project.List_1.Item (1) := SelectedItem + ' (Main)'

	Project.List_1.Item (i) := FirstItem

	SaveProject()

Return



*------------------------------------------------------------------------------*
Procedure refreshproject
*------------------------------------------------------------------------------*
Local PROJECTFOLDER := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Projectname , HB_UTF8RAT ('\' , ProjectName ) - 1 ) ) )

Local aFiles1 := {}
Local aFiles2 := {}
Local aForms := {}
Local nForms
Local aIncludes := {}
Local nIncludes
Local aTables := {}
Local nTables := 0
local xName
local i, cData

	If Empty ( Projectname )
		Return
	EndIf

	If Project.List_1.ItemCount == 0
		Return
	EndIf

	if HB_URIGHT ( projectfolder , 1 ) != '\'
		projectfolder := projectfolder + '\'
	endif

	* Reports *************************************************************

	aSize ( aFiles1 , ADIR ( PROJECTFOLDER + "*.RPT") )

        ADIR ( PROJECTFOLDER + "*.RPT", aFiles1 )

	aSize ( aFiles2 , ADIR ( PROJECTFOLDER + "*.RMG") )

        ADIR ( PROJECTFOLDER + "*.RMG", aFiles2 )

	Project.List_3.DeleteAllItems

	For i := 1 To HMG_LEN ( aFiles1 )

		Project.List_3.AddItem ( aFiles1 [i] )

	Next i

	For i := 1 To HMG_LEN ( aFiles2 )

		Project.List_3.AddItem ( aFiles2 [i] )

	Next i

	Project.List_3.Value := 1
	Project.List_2.Value := 1
	Project.List_4.Value := 1


	* Forms ***************************************************************

	Project.List_2.DeleteAllItems

	nForms := ADIR( "*.fmg" )
	ASIZE ( aForms , nForms )
	ADIR( "*.fmg" , aForms )

	aForms := ASORT ( aForms )

	For i := 1 To nForms
		Project.List_2.AddItem ( aForms [i] )
	Next i


	* Includes ************************************************************

	Project.List_4.DeleteAllItems

	nIncludes := ADIR( "*.ch" )
	ASIZE ( aIncludes , nIncludes )
	ADIR( "*.ch" , aIncludes )
	aIncludes := ASORT(aIncludes)

	For i := 1 To nIncludes
		Project.List_4.AddItem ( aIncludes [i] )
	Next i


	* Tables **************************************************************

	Project.tables.DeleteAllItems

	nTables := ADIR( "*.dbf" )
	ASIZE ( aTables , nTables )
	ADIR( "*.dbf" , aTables )
	aTables := ASORT(aTables)

	For i := 1 To nTables
		Project.tables.AddItem ( aTables [i] )
	Next i


	* Resources ***********************************************************

	xName := HB_URIGHT ( ProjectName , HMG_LEN(Projectname) - HB_UTF8RAT ('\',ProjectName) )
	xName := HB_ULEFT ( xName , HMG_LEN(xName) - 4 ) + '.rc'

	if .not. empty(xName)
		if file (xName)
			Project.Edit_1.Value := HB_MEMOREAD ( xName )
		else
			Project.Edit_1.Value := ''
		endif
	endif


	* Config **************************************************************

	xName := HB_URIGHT ( ProjectName , HMG_LEN(ProjectName) - HB_UTF8RAT ('\',ProjectName) )
	xName := HB_ULEFT ( xName , HMG_LEN(xName) - 4 ) + '.hbc'

	Project.config.value := ''

	if .not. empty(xName)
		if file (xName)
			cData := HB_MEMOREAD ( xName )
			project.config.value := cData
		endif
	endif

//   msgdebug (ProjectName,xName,cData)

Return

*------------------------------------------------------------------------------*
Procedure RunApplication
*------------------------------------------------------------------------------*
Local PROJECTFOLDER := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Projectname , HB_UTF8RAT ('\' , ProjectName ) - 1 ) ) )
Local AppName
Local Item
local i

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf

	If Project.List_1.ItemCount == 0
		Return
	EndIf

	For i := 1 To Project.List_1.ItemCount

		Item := HMG_UPPER ( ALLTRIM ( Project.List_1.Item (i) ) )

		if HB_URIGHT ( Item , 7 ) == ' (MAIN)'
			AppName := PROJECTFOLDER + If ( HB_URIGHT ( PROJECTFOLDER , 1 ) != '\' , '\' , '' ) + HB_ULEFT ( Item , HMG_LEN( Item ) - 11 ) + '.Exe'
			Exit
		endif

	Next i

	RunAfetrBuild := .T.
	DebuggerSupport	:= .F.
	BuildProjectM()

Return

*------------------------------------------------------------------------------*
Function TranslateLog(Log)
*------------------------------------------------------------------------------*
Local NewLog := '' , i, c

	For i := 1 To HMG_LEN(Log)

		c := HB_USUBSTR ( Log , i , 2 )

		If HB_ULEFT ( c , 1 ) == chr (13) .And. HB_URIGHT ( c , 1 ) != chr ( 10 )
			NewLog := NewLog + CRLF
		Else
			NewLog := NewLog + HB_ULEFT ( c , 1 )
		EndIf

	Next i

Return NewLog
*------------------------------------------------------------------------------*
Procedure DrawSelectedControlFrame()
*------------------------------------------------------------------------------*
Local x , row , col , width , height
Local vdr , vdc

	If .not. empty(SelectedControlName)

		x := GetControlIndex (SelectedControlName,DesignForm)

		If x > 0

			if lVirtualForm
				VDC := GetScrollPos ( DesignFormhandle , SB_HORZ )
				VDR := GetScrollPos ( DesignFormhandle , SB_VERT )
			else
				VDC := 0
				VDR := 0
			endif

			Row := _HMG_SYSDATA [ 18 ] [x]
			Col := _HMG_SYSDATA [ 19 ] [x]
			Width := _HMG_SYSDATA [ 20 ] [x]
			Height := _HMG_SYSDATA [ 21 ] [x]

			rectdraw( DesignFormhandle ,Row - 6 - VDR ,Col - 6 - VDC  ,Row -1 - VDR  ,Col -1 - VDC ,BLACK,4,WHITE,.t.)

			linedraw( DesignFormhandle,Row - 3 - VDR  ,Col - 3 - VDC  ,Row - 3 - VDR ,Col - 3 - VDC  ,BLACK,6)
			linedraw( DesignFormhandle,Row + Height + 3 - VDR  ,Col - 3 - VDC ,Row + Height + 3 - VDR ,Col - 3 - VDC  ,BLACK,6)
			linedraw( DesignFormhandle,Row - 3 - VDR  ,Col + Width + 3 - VDC ,Row - 3 - VDR ,Col + Width + 3 - VDC ,BLACK,6)
			linedraw( DesignFormhandle,Row - 3 - VDR  ,Col + ( Width / 2 ) - VDC ,Row - 3 - VDR ,Col + ( Width / 2 ) - VDC  ,BLACK,6)
			linedraw( DesignFormhandle,Row + Height + 3 - VDR  ,Col + ( Width / 2 ) - VDC ,Row + Height + 3 - VDR  ,Col + ( Width / 2 ) - VDC  ,BLACK,6)
			linedraw( DesignFormhandle,Row + ( Height / 2 ) - VDR  ,Col - 3- VDC ,Row + ( Height / 2 ) - VDR  ,Col - 3- VDC ,BLACK,6)
			linedraw( DesignFormhandle,Row + ( Height / 2 ) - VDR  ,Col + Width + 3 - VDC ,Row + ( Height / 2 ) - VDR  ,Col + Width + 3 - VDC ,BLACK,6)
			linedraw( DesignFormhandle,Row + Height + 4 - VDR ,Col + Width - 4 - VDC ,Row + Height + 4 - VDR ,Col + Width + 4 - VDC ,BLACK,3)
			linedraw( DesignFormhandle,Row + Height - 4 - VDR  ,Col + Width + 4 - VDC ,Row + Height + 4 - VDR ,Col + Width + 4- VDC ,BLACK,3)

			DrawGrid()

		EndIf

	EndIf

Return
*------------------------------------------------------------------------------*
Procedure ViewCode
*------------------------------------------------------------------------------*
Local Code

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	Code := Save ( .T. )

	define window ViewCode ;
		at 0,0 ;
		width 640 ;
		height 480 ;
		title 'Form Code' ;
		Modal ;
		NoSize

		define editbox edit_1
			row 0
			col 0
			width 635
			height 480 - GetTitleHeight() - GetBorderHeight() - 2
			Value Code
			fontname 'Courier New'
			fontsize 10
			ReadOnly .T.
		end editbox

	end window

	ViewCode.Center

	activate window ViewCode

	DoMethod ( DesignForm , 'SetFocus' )
	DrawGrid()

Return
*------------------------------------------------------------------------------*
Function PickPropertyValue ( Title , Legend , Options , CurrentValue )
*------------------------------------------------------------------------------*
Local RetVal
Local i
Local InitValue := 0

        For i := 1 To HMG_LEN ( Options )
		If	ALLTRIM ( HMG_UPPER ( Options [i] ) ) ;
			== ;
			ALLTRIM ( HMG_UPPER ( CurrentValue ) ) ;

				InitValue := i
				Exit

		EndIf
	Next i

	Define Window PickPropertyValue ;
		At 0,0 ;
		Width 300 ;
		Height GetTitleHeight() + 115 + 2 ;
		Title Title ;
		Modal ;
		NoSize ;
		NoSysMenu

		ON KEY RETURN	Action	( ;
				RetVal := PickPropertyValue.PickValue.Item( PickPropertyValue.PickValue.Value ) , ;
				_HMG_SYSDATA [ 257 ] := .F. , ;
				PickPropertyValue.Release ;
				)

		ON KEY ESCAPE	Action	( ;
				RetVal := '' , ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				PickPropertyValue.Release ;
				)


		Define Label Legend
			Row 10
			Col 10
			Value Legend
		End Label

		Define ComboBox PickValue
			Row 35
			Col 10
			Width 270
			Height 120
			Items Options
			Value InitValue
		End ComboBox

		Define Button Ok
			Row 70
			Col 70
			Caption aMsgs [ 116 ]
			Action	( ;
				RetVal := PickPropertyValue.PickValue.Item( PickPropertyValue.PickValue.Value ) , ;
				_HMG_SYSDATA [ 257 ] := .F. , ;
				PickPropertyValue.Release ;
				)
		End Button

		Define Button Cancel
			Row 70
			Col 180
			Caption aMsgs [ 117 ]
			Action	( ;
				RetVal := '' , ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				PickPropertyValue.Release ;
				)
		End Button

	End Window

	PickPropertyValue.Center

	PickPropertyValue.Activate

Return RetVal

*------------------------------------------------------------------------------*
Function PickNumericPropertyValue ( Title , Legend , CurrentValue )
*------------------------------------------------------------------------------*
Local RetVal

	Define Window PickPropertyValue ;
		At 0,0 ;
		Width 300 ;
		Height GetTitleHeight() + 115 + 2 ;
		Title Title ;
		Modal ;
		NoSize ;
		NoSysMenu

		ON KEY RETURN	Action ( ;
				RetVal := ALLTRIM(STR(PickPropertyValue.PickValue.Value)) , ;
				_HMG_SYSDATA [ 257 ] := .F. , ;
				PickPropertyValue.Release ;
				)

		ON KEY ESCAPE	Action	( ;
				RetVal := '' , ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				PickPropertyValue.Release ;
				)

		Define Label Legend
			Row 10
			Col 10
			Value Legend
		End Label

		Define Spinner PickValue
			Row 35
			Col 10
			Width 270
			RangeMin 0
			RangeMax 0x7FFFFFFF
			Value VAL ( CurrentValue )
		End Spinner

		Define Button Ok
			Row 70
			Col 70
			Caption aMsgs [ 116 ]
			Action	( ;
				RetVal := ALLTRIM(STR(PickPropertyValue.PickValue.Value)) , ;
				_HMG_SYSDATA [ 257 ] := .F. , ;
				PickPropertyValue.Release ;
				)
		End Button

		Define Button Cancel
			Row 70
			Col 180
			Caption aMsgs [ 117 ]
			Action	( ;
				RetVal := '' , ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				PickPropertyValue.Release ;
				)
		End Button

	End Window

	PickPropertyValue.Cancel.SetFocus
	InsertTab()

	PickPropertyValue.Center
	PickPropertyValue.Activate

Return RetVal
*------------------------------------------------------------------------------*
Function PickCharacterPropertyValue ( Title , Legend , CurrentValue )
*------------------------------------------------------------------------------*
Local RetVal

	Define Window PickPropertyValue ;
		At 0,0 ;
		Width 300 ;
		Height GetTitleHeight() + 115 + 2 ;
		Title Title ;
		Modal ;
		NoSize ;
		NoSysMenu

		ON KEY RETURN	Action ( ;
				RetVal := ALLTRIM(PickPropertyValue.PickValue.Value) , ;
				_HMG_SYSDATA [ 257 ] := .F. , ;
				PickPropertyValue.Release ;
				)

		ON KEY ESCAPE	Action	( ;
				RetVal := '' , ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				PickPropertyValue.Release ;
				)

		Define Label Legend
			Row 10
			Col 10
			Value Legend
		End Label

		Define TextBox PickValue
			Row 35
			Col 10
			Width 270
			Value CurrentValue
		End TextBox

		Define Button Ok
			Row 70
			Col 70
			Caption aMsgs [ 116 ]
			Action	( ;
				RetVal := ALLTRIM(PickPropertyValue.PickValue.Value) , ;
				_HMG_SYSDATA [ 257 ] := .F. , ;
				PickPropertyValue.Release ;
				)
		End Button

		Define Button Cancel
			Row 70
			Col 180
			Caption aMsgs [ 117 ]
			Action	( ;
				RetVal := '' , ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				PickPropertyValue.Release ;
				)
		End Button

	End Window

	PickPropertyValue.PickValue.SetFocus

	PickPropertyValue.Center
	PickPropertyValue.Activate

Return RetVal

*------------------------------------------------------------------------------*
Function PickColorValue ( cPropertyName )
*------------------------------------------------------------------------------*
Local RetVal

	DEFINE WINDOW _PICKCOLOR AT 0,0 WIDTH 368 HEIGHT 74 TITLE aMsgs [ 130 ] + ' : ' +  cPropertyName MODAL NOSIZE NOSYSMENU

		DEFINE BUTTON DEFAULT
			ROW	10
			COL	10
			CAPTION	aMsgs [ 224 ]
			ACTION	( RetVal := 'Nil' , _HMG_SYSDATA [ 257 ] := .F. , _PICKCOLOR.RELEASE )
		END BUTTON

		DEFINE BUTTON OTHER
			ROW	10
			COL	130
			CAPTION	aMsgs [ 225 ]
			ACTION	( RetVal := PickColorOther() , If ( Empty(RetVal) , Nil , ( _HMG_SYSDATA [ 257 ] := .F. , _PICKCOLOR.RELEASE ) ) )
		END BUTTON

		DEFINE BUTTON CANCEL
			ROW	10
			COL	250
			CAPTION	aMsgs [ 117 ]
			ACTION	( RetVal := '' , _HMG_SYSDATA [ 257 ] := .T. , _PICKCOLOR.RELEASE )
		END BUTTON

	END WINDOW

	CENTER WINDOW _PICKCOLOR

	ACTIVATE WINDOW _PICKCOLOR

Return RetVal

Function PickColorOther()
Local TmpVal, RetVal

	TmpVal := GetColor ()

	If TmpVal [1] == NIL
		RetVal := ''
	Else
		RetVal := '{' + ALLTRIM(STR(TmpVal[1])) + ',' + ALLTRIM(STR(TmpVal[2])) + ',' + ALLTRIM(STR(TmpVal[3])) + '}'
	EndIf

Return RetVal

*------------------------------------------------------------------------------*
Procedure StatusBarBuilder
*------------------------------------------------------------------------------*
Private _StCaptions := {}
Private _StActions := {}
Private _StWidths := {}
Private _StIcons := {}
Private _StToolTips := {}
Private _StStyles := {}
Private _StFont := { 'Arial' , 9 , .f. , .f. , .f. , .f. }
Private _StTop := .F.

	if !_IsWIndowDefined (DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	aadd ( _StCaptions	, '' )
	aadd ( _StActions	, '' )
	aadd ( _StWidths	, '' )
	aadd ( _StIcons		, '' )
	aadd ( _StToolTips	, '' )
	aadd ( _StStyles	, 1  )

	Define Window StDesigner ;
		At 0,0 ;
		Width 370 ;
		Height GetTitleHeight() + 430 + 2 + 17 ;
		Title aMsgs [ 132 ] ;
		Modal ;
		NoSize

		ON KEY ESCAPE	Action	( ;
				ThisWindow.Release ;
				)

		Define StatusBar Font 'Arial' Size 8
			StatusItem aMsgs [ 133 ]
		End StatusBar

		Define Frame Frame1
			Row 9
			Col 10
			Width 225
			Height 196
		End Frame

		Define Label Label1
			Row 23
			Col 25
			Width 50
			Value 'Caption:'
		End Label
		Define TextBox Text1
			Row 20
			Col 100
			Value ''
			OnChange StCaptionChange()
		End TextBox

		Define Label Label2
			Row 53
			Col 25
			Width 50
			Value 'Action:'
		End Label
		Define TextBox Text2
			Row 50
			Col 100
			Value ''
			OnChange StActionChange()
		End TextBox

		Define Label Label3
			Row 83
			Col 25
			Width 50
			Value 'Width:'
		End Label
		Define TextBox Text3
			Row 80
			Col 100
			Value ''
			OnChange StWidthChange()
		End TextBox

		Define Label Label4
			Row 113
			Col 25
			Width 50
			Value 'Icon:'
		End Label
		Define TextBox Text4
			Row 110
			Col 100
			Value ''
			OnChange StIconChange()
		End TextBox

		Define Label Label5
			Row 143
			Col 25
			Width 50
			Value 'ToolTip:'
		End Label

		Define TextBox Text5
			Row 140
			Col 100
			Value ''
			OnChange StToolTipChange()
		End TextBox

		Define Label Label6
			Row 173
			Col 25
			Width 50
			Value 'Style:'
		End Label

		Define ComboBox Combo1
			Row 170
			Col 100
			Items { 'Normal' , 'Flat' , 'Raised' }
			Value	1
			On Change StStylesChange()
		End ComboBox

		* Button Bar

		Define Frame Frame3
			Row 212
			Col 10
			Width 340
			Height 36
		End Frame

		Define Button button3
			Row 216
			Col 13
			Width 61
			Height 30
			Picture 'UP'
			Action	StMoveUp()
		End Button
		Define Button button4
			Row 216
			Col 76
			Width 61
			Height 30
			Picture 'DOWN'
			Action StMoveDown()
		End Button
		Define Button button5
			Row 216
			Col 140
			Width 50
			Height 30
			Caption aMsgs [ 112 ]
			Action	StNext()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button6
			Row 216
			Col 192
			Width 50
			Height 30
			Caption aMsgs [ 113 ]
			Action	StPrior()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button7
			Row 216
			Col 244
			Width 50
			Height 30
			Caption aMsgs [ 114 ]
			Action	StInsert()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button8
			Row 216
			Col 296
			Width 50
			Height 30
			Caption aMsgs [ 115 ]
			Action	StDelete()
			FontName 'Arial'
			FontSize 8
		End Button

		* Main List Box

		Define ListBox List1
			Row 255
			Col 10
			Width 340
			height 160
			Items FillStList()
			Value 1
			OnChange StChange()
		End ListBox

		* Ok / Cancel Buttons

		Define Button Ok
			Row 10
			Col 250
			Caption aMsgs [ 116 ]
			Action	( BuildStatusBar() , _HMG_SYSDATA [ 257 ] := .F. )
		End Button
		Define Button Cancel
			Row 40
			Col 250
			Caption aMsgs [ 117 ]
			Action	( ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				ThisWindow.Release ;
				)
		End Button

		Define Button Font
			Row 175
			Col 250
			Caption aMsgs [ 134 ]
			Action	StFont()
		End Button

		Define Frame FrameTop
			Row 135
			Col 250
			Width 100
			Height 35
			Caption ''
		End Frame

		Define CheckBox Top
			Row		144
			Col		326
			Width		15
			Height		24
			Caption		''
			On Change	StTop()
			Value		_StTop
		End CheckBox

		Define Label LabelTop
			Row		148
			Col		260
			Value		aMsgs [ 135 ]
		End Label

	End Window

	StDesigner.List1.Value	:= 1
	StDesigner.Text1.Value	:= StDesigner.List1.Item(1)
	StDesigner.Text2.Value	:= _StActions	[ 1 ]
	StDesigner.Text3.Value	:= _StWidths	[ 1 ]
	StDesigner.Text4.Value	:= _StIcons	[ 1 ]
	StDesigner.Text5.Value	:= _StToolTips	[ 1 ]
	StDesigner.Combo1.Value	:= _StStyles	[ 1 ]

	setfocus ( GetControlHandle ( 'Text1' , 'StDesigner' ) )

	StDesigner.Center
	StDesigner.Activate

	DoMethod ( DesignForm , 'SetFocus' )

	DrawGrid()

Return
*------------------------------------------------------------------------------*
Procedure StTop()
*------------------------------------------------------------------------------*

	_StTop := This.Value

Return
*------------------------------------------------------------------------------*
Procedure StFont()
*------------------------------------------------------------------------------*
Local aTemp := {}

	aTemp := GetFont( _StFont[1] , _StFont[2] , _StFont[3] , _StFont[4] , {0,0,0} , _StFont[5] , _StFont[6] , Nil )

	If .Not. Empty ( aTemp [1] )
	     _StFont [1] := aTemp[1]
	     _StFont [2] := aTemp[2]
	     _StFont [3] := aTemp[3]
	     _StFont [4] := aTemp[4]
	     _StFont [5] := aTemp[6]
	     _StFont [6] := aTemp[7]
	EndIf

Return
*------------------------------------------------------------------------------*
Procedure StCaptionChange
*------------------------------------------------------------------------------*
Local i
Local String

	if _InsertActive == .F.

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	String := StDesigner.List1.Item (i)

	StDesigner.List1.Item (i) := ALLTRIM ( StDesigner.Text1.Value )

	StDesigner.List1.Value := i

	_StCaptions [i] := StDesigner.Text1.Value

	EndIf

Return

*------------------------------------------------------------------------------*
Procedure StActionChange
*------------------------------------------------------------------------------*
Local i

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_StActions [i] := StDesigner.Text2.Value

Return

*------------------------------------------------------------------------------*
Procedure StWidthChange
*------------------------------------------------------------------------------*
Local i

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_StWidths [i] := StDesigner.Text3.Value

Return

*------------------------------------------------------------------------------*
Procedure StIconChange
*------------------------------------------------------------------------------*
Local i

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_StIcons [i] := StDesigner.Text4.Value

Return
*------------------------------------------------------------------------------*
Procedure StToolTipChange
*------------------------------------------------------------------------------*
Local i

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_StToolTips [i] := StDesigner.Text5.Value

Return
*------------------------------------------------------------------------------*
Procedure StStylesChange
*------------------------------------------------------------------------------*
Local i

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_StStyles [i] := StDesigner.Combo1.Value

Return
*------------------------------------------------------------------------------*
Procedure StMoveUp
*------------------------------------------------------------------------------*
Local i
Local Previous
Local Current
Local aux0
Local aux1
Local aux2
Local aux3
Local aux4
Local aux5

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	if i == 1
		Return
	EndIf

	Previous	:= StDesigner.List1.Item(i-1)
	Current 	:= StDesigner.List1.Item(i)

	StDesigner.List1.Item(i)	:= Previous
	StDesigner.List1.Item(i-1)	:= Current

	StDesigner.List1.Value := i - 1

	aux0 := _StCaptions [i]
	aux1 := _StActions [i]
	aux2 := _StWidths [i]
	aux3 := _StIcons [i]
	aux4 := _StToolTips [i]
	aux5 := _StStyles [i]

	_StCaptions [i]		:= _StCaptions [i-1]
	_StActions [i]		:= _StActions [i-1]
	_StWidths [i]		:= _StWidths [i-1]
	_StIcons [i]	 	:= _StIcons [i-1]
	_StToolTips [i] 	:= _StToolTips [i-1]
	_StStyles [i] 		:= _StStyles [i-1]

	_StCaptions	[i-1]	:= aux0
	_StActions	[i-1]	:= aux1
	_StWidths	[i-1]	:= aux2
	_StIcons	[i-1]	:= aux3
	_StToolTips	[i-1]	:= aux4
	_StStyles	[i-1]	:= aux5

Return

*------------------------------------------------------------------------------*
Procedure StMoveDown
*------------------------------------------------------------------------------*
Local i
Local c
Local Next
Local Current
Local aux0
Local aux1
Local aux2
Local aux3
Local aux4
Local aux5

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c := StDesigner.List1.ItemCount

	if i == c
		Return
	EndIf

	Current 	:= StDesigner.List1.Item(i)
	Next		:= StDesigner.List1.Item(i+1)

	StDesigner.List1.Item(i)	:= Next
	StDesigner.List1.Item(i+1)	:= Current

	StDesigner.List1.Value := i + 1

	aux0 := _StCaptions [i]
	aux1 := _StActions [i]
	aux2 := _StWidths [i]
	aux3 := _StIcons [i]
	aux4 := _StToolTips [i]
	aux5 := _StStyles [i]

	_StCaptions [i]		:= _StCaptions [i+1]
	_StActions [i]		:= _StActions [i+1]
	_StWidths [i]		:= _StWidths [i+1]
	_StIcons [i] 		:= _StIcons [i+1]
	_StToolTips [i] 	:= _StToolTips [i+1]
	_StStyles [i] 		:= _StStyles [i+1]

	_StCaptions [i+1]	:= aux0
	_StActions [i+1]	:= aux1
	_StWidths [i+1]		:= aux2
	_StIcons [i+1]		:= aux3
	_StToolTips [i+1]	:= aux4
	_StStyles [i+1]		:= aux5

Return

*------------------------------------------------------------------------------*
Procedure StNext
*------------------------------------------------------------------------------*
Local i, c

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= StDesigner.List1.ItemCount

	if i + 1 > c

		if !Empty ( StDesigner.List1.Item (i) )

			StDesigner.List1.additem( '' )

			aadd ( _StCaptions	, '' )
			aadd ( _StActions	, '' )
			aadd ( _StWidths	, '' )
			aadd ( _StIcons		, '' )
			aadd ( _StToolTips	, '' )
			aadd ( _StStyles	, 1  )

		endif

	EndIf

	StDesigner.List1.Value := i + 1

	StDesigner.Text1.Value := StDesigner.List1.Item(i+1)

	setfocus ( GetControlHandle ( 'Text1' , 'StDesigner' ) )

	if HMG_LEN ( _StActions ) >= i+1

		StDesigner.Text2.Value := _StActions	[ i + 1 ]
		StDesigner.Text3.Value := _StWidths	[ i + 1 ]
		StDesigner.Text4.Value := _StIcons	[ i + 1 ]
		StDesigner.Text5.Value := _StToolTips	[ i + 1 ]
		StDesigner.Combo1.Value := _StStyles	[ i + 1 ]

	Else

		StDesigner.Text2.Value := ''
		StDesigner.Text3.Value := ''
		StDesigner.Text4.Value := ''
		StDesigner.Text5.Value := ''
		StDesigner.Combo1.Value := 1

	EndIf

Return

*------------------------------------------------------------------------------*
Procedure StPrior
*------------------------------------------------------------------------------*
Local i

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	if i == 1
		Return
	EndIf

	StDesigner.List1.Value := i - 1

	StDesigner.Text1.Value := StDesigner.List1.Item(i-1)

	setfocus ( GetControlHandle ( 'Text1' , 'StDesigner' ) )

	StDesigner.Text2.Value	:= _StActions	[ i - 1 ]
	StDesigner.Text3.Value	:= _StWidths	[ i - 1 ]
	StDesigner.Text4.Value	:= _StIcons	[ i - 1 ]
	StDesigner.Text5.Value	:= _StToolTips	[ i - 1 ]
	StDesigner.Combo1.Value	:= _StStyles	[ i - 1 ]

Return

*------------------------------------------------------------------------------*
Procedure StDelete
*------------------------------------------------------------------------------*
Local i
Local c

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= StDesigner.List1.ItemCount

	if c == 1
		StDesigner.List1.Item (1) :=  ""
		StDesigner.List1.Value := 1
		Return
	endif

	StDesigner.List1.DeleteItem(i)

	adel ( _StCaptions	, i )
	adel ( _StActions	, i )
	adel ( _StWidths	, i )
	adel ( _StIcons		, i )
	adel ( _StToolTips	, i )
	adel ( _StStyles	, i )

	asize ( _StCaptions	, HMG_LEN(_StCaptions) - 1 )
	asize ( _StActions	, HMG_LEN(_StActions) - 1 )
	asize ( _StWidths	, HMG_LEN(_StWidths) - 1 )
	asize ( _StIcons	, HMG_LEN(_StIcons) - 1 )
	asize ( _StToolTips	, HMG_LEN(_StToolTips) - 1 )
	asize ( _StStyles	, HMG_LEN(_StStyles) - 1 )

	c	:= c - 1

	if i > c

		StDesigner.List1.Value := c
		StDesigner.Text1.Value := StDesigner.List1.Item(c)
		StDesigner.Text2.Value := _StActions	[ c ]
		StDesigner.Text3.Value := _StWidths	[ c ]
		StDesigner.Text4.Value := _StIcons	[ c ]
		StDesigner.Text5.Value := _StToolTips	[ c ]
		StDesigner.Combo1.Value := _StStyles	[ c ]

	Else
		StDesigner.List1.Value := i
		StDesigner.Text1.Value := StDesigner.List1.Item(i)
		StDesigner.Text2.Value := _StActions		[ i ]
		StDesigner.Text3.Value := _StWidths		[ i ]
		StDesigner.Text4.Value := _StIcons		[ i ]
		StDesigner.Text5.Value := _StToolTips		[ i ]
		StDesigner.Combo1.Value := _StStyles		[ i ]

	EndIf

	setfocus ( GetControlHandle ( 'Text1' , 'StDesigner' ) )

Return

*------------------------------------------------------------------------------*
Procedure StInsert
*------------------------------------------------------------------------------*
Local i
Local c
Local aTemp := {}
Local x

	_InsertActive := .T.

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= StDesigner.List1.ItemCount

	for x := 1 to c

		if x == i
			aadd ( aTemp , '' )
		endif

		aadd ( aTemp , StDesigner.List1.Item (x) )

	next x

	StDesigner.List1.DeleteAllItems

	for x := 1 to HMG_LEN ( aTemp)
		StDesigner.List1.AddItem ( aTemp [x] )
	next x

	StDesigner.List1.Value := i

	aadd ( _StCaptions	, '' )
	aadd ( _StActions	, '' )
	aadd ( _StWidths	, '' )
	aadd ( _StIcons		, '' )
	aadd ( _StToolTips	, '' )
	aadd ( _StStyles	, 1  )

	ains ( _StCaptions	, i )
	ains ( _StActions	, i )
	ains ( _StWidths	, i )
	ains ( _StIcons		, i )
	ains ( _StToolTips	, i )
	ains ( _StStyles	, i )

	_StCaptions	[ i ] := ''
	_StActions	[ i ] := ''
	_StWidths	[ i ] := ''
	_StIcons	[ i ] := ''
	_StToolTips	[ i ] := ''
	_StStyles	[ i ] := 1

	StDesigner.Text1.Value := ''
	StDesigner.Text2.Value := ''
	StDesigner.Text3.Value := ''
	StDesigner.Text4.Value := ''
	StDesigner.Text5.Value := ''
	StDesigner.Combo1.Value := 1

	setfocus ( GetControlHandle ( 'Text1' , 'StDesigner' ) )

	_InsertActive := .F.

Return

*------------------------------------------------------------------------------*
Procedure StChange
*------------------------------------------------------------------------------*
Local i
Local aTemp := {}

	i := StDesigner.List1.Value

	if i == 0
		Return
	EndIf

	StDesigner.Text1.Value	:= StDesigner.List1.Item(i)
	StDesigner.Text2.Value	:= _StActions	[ i ]
	StDesigner.Text3.Value	:= _StWidths	[ i ]
	StDesigner.Text4.Value	:= _StIcons	[ i ]
	StDesigner.Text5.Value	:= _StToolTips	[ i ]
	StDesigner.Combo1.Value	:= _StStyles	[ i ]

Return

*------------------------------------------------------------------------------*
Function FillStList()
*------------------------------------------------------------------------------*
Local aList := {}
Local LineCount := 0
Local Line := ''
Local x := 0
Local y := 0
Local j := 0
Local CurrentLevel := 0
Local qc := 0
Local i
Local Caption
Local Action
Local cIcon
Local cToolTip
Local nStyle
local cWidth
Local cSize
Local cFont
Local lStrikeOut := .f.
Local lUnderLine := .f.
Local lBold := .f.
Local lItalic := .f.


	If Empty (_hmgide_CurrentStatusBar)
		aList := {''}
	Else

		_StCaptions	:= {}
		_StActions	:= {}
		_StWidths	:= {}
		_StIcons	:= {}
		_StToolTips	:= {}
		_StStyles	:= {}

		LineCount := MlCount ( _hmgide_CurrentStatusBar )

		For i := 1 To LineCount

			Line := ALLTRIM ( MemoLine ( _hmgide_CurrentStatusBar , 1024 , i , 4 , .t. ) )

			if HMG_UPPER (Line) = 'DEFINE STATUSBAR'

				Line := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN( Line ) - 16 ) )

				* Get Top

				if HB_URIGHT ( HMG_UPPER (Line) , 4 ) == ' TOP'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 4 ) )
					_StTop := .T.
				Else
					_StTop := .F.
				EndIf

				* Get StrikeOut

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' STRIKEOUT'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					lStrikeOut := .T.
				EndIf

				* Get UnderLine

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' UNDERLINE'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					lUnderLine := .T.
				EndIf

                                * Get Italic

				if HB_URIGHT ( HMG_UPPER (Line) , 7 ) == ' ITALIC'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 7 ) )
					lItalic := .T.
				EndIf

				* Get Bold

				if HB_URIGHT ( HMG_UPPER (Line) , 5 ) == ' BOLD'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 5 ) )
					lBold := .T.
				EndIf

				* Get Size

				x := HB_UTF8RAT ( ' SIZE ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					cSize := HB_USUBSTR ( Line , x + 6 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					cSize := ''
				EndIf

				* Get Font

				Line := ALLTRIM(Line)

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( 'FONT "' , HMG_UPPER(Line) )

					if x > 0
						cFont := ALLTRIM ( HB_USUBSTR ( Line , x + 6 , HMG_LEN(Line) - ( x + 6 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						cFont := 'Arial'
					EndIf

				Else
					cFont := 'Arial'
				EndIf

				_StFont := { cFont , VAL(cSize) , lBold , lItalic , lUnderLine , lStrikeOut }

			Elseif HMG_UPPER (Line) = 'STATUSITEM '

				Line := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN( Line ) - 11 ) )

				* Get ToolTip

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' TOOLTIP "' , HMG_UPPER(Line) )

					if x > 0
						cToolTip := ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						cToolTip := ''
					EndIf

				Else
					cToolTip := ''
				EndIf

				* Get Style

				if HB_URIGHT ( HMG_UPPER (Line) , 5 ) == ' FLAT'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 5 ) )
					nStyle := 2
				Elseif HB_URIGHT ( HMG_UPPER (Line) , 7 ) == ' RAISED'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 7 ) )
					nStyle := 3
				Else
					nStyle := 1
				EndIf

				* Get Icon

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' ICON "' , HMG_UPPER(Line) )

					if x > 0
						cIcon := ALLTRIM ( HB_USUBSTR ( Line , x + 7 , HMG_LEN(Line) - ( x + 7 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						cIcon := ''
					EndIf

				Else
					cIcon := ''
				EndIf

				* Get Action

				x := HB_UTF8RAT ( ' ACTION ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					Action := HB_USUBSTR ( Line , x + 8 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					Action := ''
				EndIf

				* Get Width

				x := HB_UTF8RAT ( ' WIDTH ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					cWidth := HB_USUBSTR ( Line , x + 7 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					cWidth := ''
				EndIf

				* Get Caption

				Line := ALLTRIM ( Line )

				Caption := HB_ULEFT ( Line , HMG_LEN(Line) - 1 )

				Caption := HB_URIGHT ( Caption , HMG_LEN(Caption) - 1 )

				aadd ( aList , Caption )

				aadd ( 	_StCaptions , Caption )
				aadd ( 	_StActions , Action )
				aadd ( _StWidths , cWidth )
				aadd ( _StIcons	, cIcon )
				aadd ( 	_StToolTips , cToolTip )
				aadd ( _StStyles , nStyle )

			Elseif HMG_UPPER (Line) = 'CLOCK'

				Line := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN( Line ) - 11 ) )

				* Get ToolTip

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' TOOLTIP "' , HMG_UPPER(Line) )

					if x > 0
						cToolTip := ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						cToolTip := ''
					EndIf

				Else
					cToolTip := ''
				EndIf

				* Get Action

				x := HB_UTF8RAT ( ' ACTION ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					Action := HB_USUBSTR ( Line , x + 8 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					Action := ''
				EndIf

				* Get Width

				x := HB_UTF8RAT ( ' WIDTH ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					cWidth := HB_USUBSTR ( Line , x + 7 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					cWidth := ''
				EndIf

				aadd ( aList , '$CLOCK' )

				aadd ( 	_StCaptions , '$CLOCK' )
				aadd ( 	_StActions , Action )
				aadd ( _StWidths , cWidth )
				aadd ( _StIcons	, '' )
				aadd ( 	_StToolTips , cToolTip )
				aadd ( _StStyles , 1 )

			Elseif HMG_UPPER (Line) = 'DATE'

				Line := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN( Line ) - 11 ) )

				* Get ToolTip

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' TOOLTIP "' , HMG_UPPER(Line) )

					if x > 0
						cToolTip := ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						cToolTip := ''
					EndIf

				Else
					cToolTip := ''
				EndIf

				* Get Action

				x := HB_UTF8RAT ( ' ACTION ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					Action := HB_USUBSTR ( Line , x + 8 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					Action := ''
				EndIf

				* Get Width

				x := HB_UTF8RAT ( ' WIDTH ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					cWidth := HB_USUBSTR ( Line , x + 7 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					cWidth := ''
				EndIf

				aadd ( aList , '$DATE' )

				aadd ( 	_StCaptions , '$DATE' )
				aadd ( 	_StActions , Action )
				aadd ( _StWidths , cWidth )
				aadd ( _StIcons	, '' )
				aadd ( 	_StToolTips , cToolTip )
				aadd ( _StStyles , 1 )

			Elseif HMG_UPPER (Line) = 'KEYBOARD'

				Line := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN( Line ) - 11 ) )

				* Get ToolTip

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' TOOLTIP "' , HMG_UPPER(Line) )

					if x > 0
						cToolTip := ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						cToolTip := ''
					EndIf

				Else
					cToolTip := ''
				EndIf

				* Get Action

				x := HB_UTF8RAT ( ' ACTION ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					Action := HB_USUBSTR ( Line , x + 8 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					Action := ''
				EndIf

				* Get Width

				x := HB_UTF8RAT ( ' WIDTH ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					cWidth := HB_USUBSTR ( Line , x + 7 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					cWidth := ''
				EndIf

				aadd ( aList , '$KEYBOARD' )

				aadd ( 	_StCaptions , '$KEYBOARD' )
				aadd ( 	_StActions , Action )
				aadd ( _StWidths , cWidth )
				aadd ( _StIcons	, '' )
				aadd ( 	_StToolTips , cToolTip )
				aadd ( _StStyles , 1 )

			EndIf

		Next i

	EndIf

Return aList

*------------------------------------------------------------------------------*
Procedure BuildStatusBar
*------------------------------------------------------------------------------*
Local i
Local Menu
Local CurrentLevel := 0
Local NextLevel := 0
Local aStyles := { '' , ' FLAT' , ' RAISED' }

	Menu := Space(4) + 'DEFINE STATUSBAR' ;
                + ' FONT ' + chr(34) + _StFont [1] + chr(34) ;
                + ' SIZE ' + ALLTRIM ( STR ( _StFont [2] ) ) ;
		+ if ( _StFont [3]	, ' BOLD'	, '' ) ;
		+ if ( _StFont [4]	, ' ITALIC'	, '' ) ;
		+ if ( _StFont [5]	, ' UNDERLINE'	, '' ) ;
		+ if ( _StFont [6]	, ' STRIKEOUT'	, '' ) ;
		+ if ( _StTop		, ' TOP'	, '' ) ;
		+ CRLF

	For i := 1 To StDesigner.List1.ItemCount

		* Create Command

		If ALLTRIM ( HMG_UPPER ( _StCaptions [i] ) ) == '$DATE'

			if !Empty(_StIcons[i])
				MsgStop ( aMsgs [ 136 ] ,'HMG IDE')
				StDesigner.List1.Value := i
				StDesigner.Text1.Value := StDesigner.List1.Item(i)
				StDesigner.Text2.Value := _StActions	[ i ]
				StDesigner.Text3.Value := _StWidths	[ i ]
				StDesigner.Text4.Value := _StIcons	[ i ]
				StDesigner.Text5.Value := _StToolTips	[ i ]
				StDesigner.Combo1.Value	:= _StStyles	[ i ]
				Return
			endif

			if _StStyles[i] != 1
				MsgStop ( aMsgs [ 137 ] ,'HMG IDE')
				StDesigner.List1.Value := i
				StDesigner.Text1.Value := StDesigner.List1.Item(i)
				StDesigner.Text2.Value := _StActions	[ i ]
				StDesigner.Text3.Value := _StWidths	[ i ]
				StDesigner.Text4.Value := _StIcons	[ i ]
				StDesigner.Text5.Value := _StToolTips	[ i ]
				StDesigner.Combo1.Value	:= _StStyles	[ i ]
				Return
			endif

			Menu := Menu + Space(8) + 'DATE' + ;
				+ if ( !Empty(_StWidths[i])	, ' WIDTH '	+ _StWidths[i]	, '' ) ;
				+ if ( !Empty(_StActions[i])	, ' ACTION '	+ _StActions[i]	, '' ) ;
				+ if ( !Empty(_StToolTips[i])	, ' TOOLTIP '	+ chr(34) + _StToolTips[i] + chr(34) , '' ) ;
				+ CRLF

		ElseIf ALLTRIM ( HMG_UPPER ( _StCaptions [i] ) ) == '$CLOCK'

			if !Empty(_StIcons[i])
				MsgStop ( aMsgs [ 138 ] ,'HMG IDE')
				StDesigner.List1.Value := i
				StDesigner.Text1.Value := StDesigner.List1.Item(i)
				StDesigner.Text2.Value := _StActions	[ i ]
				StDesigner.Text3.Value := _StWidths	[ i ]
				StDesigner.Text4.Value := _StIcons	[ i ]
				StDesigner.Text5.Value := _StToolTips	[ i ]
				StDesigner.Combo1.Value	:= _StStyles	[ i ]
				Return
			endif

			if _StStyles[i] != 1
				MsgStop ( aMsgs [ 139 ] ,'HMG IDE')
				StDesigner.List1.Value := i
				StDesigner.Text1.Value := StDesigner.List1.Item(i)
				StDesigner.Text2.Value := _StActions	[ i ]
				StDesigner.Text3.Value := _StWidths	[ i ]
				StDesigner.Text4.Value := _StIcons	[ i ]
				StDesigner.Text5.Value := _StToolTips	[ i ]
				StDesigner.Combo1.Value	:= _StStyles	[ i ]
				Return
			endif

			Menu := Menu + Space(8) + 'CLOCK' + ;
				+ if ( !Empty(_StWidths[i])	, ' WIDTH '	+ _StWidths[i]	, '' ) ;
				+ if ( !Empty(_StActions[i])	, ' ACTION '	+ _StActions[i]	, '' ) ;
				+ if ( !Empty(_StToolTips[i])	, ' TOOLTIP '	+ chr(34) + _StToolTips[i] + chr(34) , '' ) ;
				+ CRLF

		ElseIf ALLTRIM ( HMG_UPPER ( _StCaptions [i] ) ) == '$KEYBOARD'

			if !Empty(_StIcons[i])
				MsgStop ( aMsgs [ 140 ] ,'HMG IDE')
				StDesigner.List1.Value := i
				StDesigner.Text1.Value := StDesigner.List1.Item(i)
				StDesigner.Text2.Value := _StActions	[ i ]
				StDesigner.Text3.Value := _StWidths	[ i ]
				StDesigner.Text4.Value := _StIcons	[ i ]
				StDesigner.Text5.Value := _StToolTips	[ i ]
				StDesigner.Combo1.Value	:= _StStyles	[ i ]
				Return
			endif

			if _StStyles[i] != 1
				MsgStop ( aMsgs [ 141 ] ,'HMG IDE')
				StDesigner.List1.Value := i
				StDesigner.Text1.Value := StDesigner.List1.Item(i)
				StDesigner.Text2.Value := _StActions	[ i ]
				StDesigner.Text3.Value := _StWidths	[ i ]
				StDesigner.Text4.Value := _StIcons	[ i ]
				StDesigner.Text5.Value := _StToolTips	[ i ]
				StDesigner.Combo1.Value	:= _StStyles	[ i ]
				Return
			endif

			Menu := Menu + Space(8) + 'KEYBOARD' + ;
				+ if ( !Empty(_StWidths[i])	, ' WIDTH '	+ _StWidths[i]	, '' ) ;
				+ if ( !Empty(_StActions[i])	, ' ACTION '	+ _StActions[i]	, '' ) ;
				+ if ( !Empty(_StToolTips[i])	, ' TOOLTIP '	+ chr(34) + _StToolTips[i] + chr(34) , '' ) ;
				+ CRLF

		Else

			* Item

			Menu := Menu + Space(8) + 'STATUSITEM ' + chr(34) + _StCaptions [ i ] + chr(34) ;
				+ if ( !Empty(_StWidths[i])	, ' WIDTH '	+ _StWidths[i]	, '' ) ;
				+ if ( !Empty(_StActions[i])	, ' ACTION '	+ _StActions[i]	, '' ) ;
				+ if ( !Empty(_StIcons[i])	, ' ICON '	+ chr(34) + _StIcons[i]	+ chr(34) , '' ) ;
				+ aStyles [ _StStyles[i] ] ;
				+ if ( !Empty(_StToolTips[i])	, ' TOOLTIP '	+ chr(34) + _StToolTips[i] + chr(34) , '' ) ;
				+ CRLF

		EndIf

	Next i

	Menu := Menu + Space(4) + 'END STATUSBAR' + CRLF

	_hmgide_CurrentStatusBar := Menu

	DesignFormModified := .T.

	StDesigner.Release


Return
*------------------------------------------------------------------------------*
Procedure ContextMenuBuilder ( cType , nDropDownArrayPos , cName )
*------------------------------------------------------------------------------*
local cTitle

Private _MenuCaptions := {}
Private _MenuActions := {}
Private _MenuNames := {}
Private _MenuImages := {}
Private _MenuChecked := {}


	if !_IsWIndowDefined (DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	if VALTYPE ( cType ) = 'U'
		cType := 'C'
	endif

	if cType == 'N'
		cTitle := aMsgs [ 127 ]
	elseif cType == 'C'
		cTitle := aMsgs [ 128 ]
	elseif cType == 'D'
		if nDropDownArrayPos == 0
			Return
		endif

		cTitle := aMsgs [ 129 ]  + cName  + ']'

	endif

	aadd ( _MenuCaptions	, '' )
	aadd ( _MenuActions	, '' )
	aadd ( _MenuNames	, '' )
	aadd ( _MenuImages	, '' )
	aadd ( _MenuChecked	, .F. )

	Define Window MenuDesigner ;
		At 0,0 ;
		Width 370 ;
		Height GetTitleHeight() + 430 + 2 ;
		Title cTitle ;
		Modal ;
		NoSize

		ON KEY ESCAPE	Action	( ;
				ThisWindow.Release ;
				)

		Define Frame Frame1
			Row 9
			Col 10
			Width 225
			Height 166
		End Frame

		Define Label Label1
			Row 23
			Col 25
			Width 50
			Value 'Caption:'
		End Label
		Define TextBox Text1
			Row 20
			Col 100
			Value ''
			OnChange CaptionChange()
		End TextBox

		Define Label Label2
			Row 53
			Col 25
			Width 50
			Value 'Action:'
		End Label
		Define TextBox Text2
			Row 50
			Col 100
			Value ''
			OnChange ActionChange()
		End TextBox

		Define Label Label3
			Row 83
			Col 25
			Width 50
			Value 'Name:'
		End Label
		Define TextBox Text3
			Row 80
			Col 100
			Value ''
			OnChange NameChange()
		End TextBox

		Define Label Label4
			Row 113
			Col 25
			Width 50
			Value 'Image:'
		End Label
		Define TextBox Text4
			Row 110
			Col 100
			Value ''
			OnChange ImageChange()
		End TextBox

		Define Label Label5
			Row 143
			Col 25
			Width 50
			Value 'Checked:'
		End Label
		Define CheckBox Check1
			Row 140
			Col 100
			Value .F.
			OnChange CheckedChange()
		End CheckBox

		* Button Bar

		Define Frame Frame2
			Row 182
			Col 10
			Width 340
			Height 36
		End Frame

		Define Button button3
			Row 186
			Col 13
			Width 61
			Height 30
			Picture 'UP'
			Action	MenuMoveUp()
		End Button
		Define Button button4
			Row 186
			Col 76
			Width 61
			Height 30
			Picture 'DOWN'
			Action MenuMoveDown()
		End Button
		Define Button button5
			Row 186
			Col 140
			Width 50
			Height 30
			Caption aMsgs [ 112 ]
			Action	MenuNext()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button6
			Row 186
			Col 192
			Width 50
			Height 30
			Caption aMsgs [ 113 ]
			Action	MenuPrior()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button7
			Row 186
			Col 244
			Width 50
			Height 30
			Caption aMsgs [ 114 ]
			Action	MenuInsert()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button8
			Row 186
			Col 296
			Width 50
			Height 30
			Caption aMsgs [ 115 ]
			Action	MenuDelete()
			FontName 'Arial'
			FontSize 8
		End Button

		* Main List Box

		Define ListBox List1
			Row 225
			Col 10
			Width 340
			height 190
			Items FillContextMenuList ( cType , nDropDownArrayPos )
			Value 1
			OnChange MenuChange()
		End ListBox

		* Ok / Cancel Buttons

		Define Button Ok
			Row 10
			Col 250
			Caption aMsgs [ 116 ]
			Action	( ;
				BuildContextMenu( cType , nDropDownArrayPos , cName  ) , ;
				_HMG_SYSDATA [ 257 ] := .F. ;
				)
		End Button
		Define Button Cancel
			Row 45
			Col 250
			Caption aMsgs [ 117 ]
			Action	( _HMG_SYSDATA [ 257 ] := .T. , ThisWindow.Release )
		End Button

	End Window

	MenuDesigner.List1.Value := 1
	MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(1) )
	MenuDesigner.Text2.Value := _MenuActions	[ 1 ]
	MenuDesigner.Text3.Value := _MenuNames		[ 1 ]
	MenuDesigner.Text4.Value := _MenuImages		[ 1 ]
	MenuDesigner.check1.Value := _MenuChecked	[ 1 ]

	setfocus ( GetControlHandle ( 'Text1' , 'MenuDesigner' ) )

	MenuDesigner.Center
	MenuDesigner.Activate

	DoMethod ( DesignForm , 'SetFocus' )
	DrawGrid()

Return

*------------------------------------------------------------------------------*
Procedure BuildContextMenu ( cType , nDropDownArrayPos , cName )
*------------------------------------------------------------------------------*
Local i
Local Menu
Local CurrentLevel := 0
Local NextLevel := 0

***

	If HMG_LEN ( _MenuCaptions ) == 0
		Menu := ''
		if cType == 'C'
			_hmgide_CurrentContextMenu := Menu
		elseif cType == 'N'
			_hmgide_CurrentNotifyMenu := Menu
		elseif cType == 'D'
			_hmgide_aDropDownMenus[nDropDownArrayPos] := Menu
		endif
		DesignFormModified := .T.
		MenuDesigner.Release
		Return
	endif

***

	if cType == 'C'

		Menu := Space(4) + 'DEFINE CONTEXT MENU' + CRLF

	elseif cType == 'N'

		Menu := Space(4) + 'DEFINE NOTIFY MENU' + CRLF

	elseif cType == 'D'

		Menu := Space(4) + 'DEFINE DROPDOWN MENU BUTTON ' + cName + CRLF

	endif

	For i := 1 To MenuDesigner.List1.ItemCount

		* Create Command

		if _MenuCaptions [ i ] = '-'

			* Separator

			if !Empty(_MenuNames[i])
				MsgStop ( aMsgs [ 122 ] ,'HMG IDE')
				MenuDesigner.List1.Value := i
				MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
				MenuDesigner.Text2.Value := _MenuActions	[ i ]
				MenuDesigner.Text3.Value := _MenuNames		[ i ]
				MenuDesigner.Text4.Value := _MenuImages		[ i ]
				MenuDesigner.Check1.Value := _MenuChecked	[ i ]
				Return
			endif

			if !Empty(_MenuActions[i])
				MsgStop ( aMsgs [ 123 ] ,'HMG IDE')
				MenuDesigner.List1.Value := i
				MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
				MenuDesigner.Text2.Value := _MenuActions	[ i ]
				MenuDesigner.Text3.Value := _MenuNames		[ i ]
				MenuDesigner.Text4.Value := _MenuImages		[ i ]
				MenuDesigner.Check1.Value := _MenuChecked	[ i ]
				Return
			endif

			if !Empty(_MenuImages[i])
				MsgStop ( aMsgs [ 124 ] ,'HMG IDE')
				MenuDesigner.List1.Value := i
				MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
				MenuDesigner.Text2.Value := _MenuActions	[ i ]
				MenuDesigner.Text3.Value := _MenuNames		[ i ]
				MenuDesigner.Text4.Value := _MenuImages		[ i ]
				MenuDesigner.Check1.Value := _MenuChecked	[ i ]
				Return
			endif

			if _MenuChecked[i] == .T.
				MsgStop ( aMsgs [ 125 ] ,'HMG IDE')
				MenuDesigner.List1.Value := i
				MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
				MenuDesigner.Text2.Value := _MenuActions	[ i ]
				MenuDesigner.Text3.Value := _MenuNames		[ i ]
				MenuDesigner.Text4.Value := _MenuImages		[ i ]
				MenuDesigner.Check1.Value := _MenuChecked	[ i ]
				Return
			endif

			Menu := Menu + Space(8) + Space(CurrentLevel*4) + 'SEPARATOR' + CRLF

		Else

			* Item

			if Empty(_MenuActions[i])
				MsgStop ( aMsgs [ 126 ] ,'HMG IDE')
				MenuDesigner.List1.Value := i
				MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
				MenuDesigner.Text2.Value := _MenuActions	[ i ]
				MenuDesigner.Text3.Value := _MenuNames		[ i ]
				MenuDesigner.Text4.Value := _MenuImages		[ i ]
				MenuDesigner.Check1.Value := _MenuChecked	[ i ]
				Return
			endif

			Menu := Menu + Space(8) + 'MENUITEM ' + chr(34) + _MenuCaptions [ i ] + chr(34) + ' ACTION ' + _MenuActions[i] + if ( !Empty(_MenuNames[i]) , ' NAME ' + _MenuNames[i] , '' ) + if ( !Empty(_MenuImages[i]) , ' IMAGE ' + chr(34) + _MenuImages[i] + chr(34) , '' ) + if ( _MenuChecked[i] == .T. , ' CHECKED' , '' ) + CRLF

		EndIf

	Next i

	Menu := Menu + Space(4) + 'END MENU' + CRLF


	if cType == 'C'

		_hmgide_CurrentContextMenu := Menu

	elseif cType == 'N'

		_hmgide_CurrentNotifyMenu := Menu

	elseif cType == 'D'

		_hmgide_aDropDownMenus[nDropDownArrayPos] := Menu

	endif

	DesignFormModified := .T.

	MenuDesigner.Release

Return
*------------------------------------------------------------------------------*
Procedure MainMenuBuilder
*------------------------------------------------------------------------------*
Private _MenuCaptions := {}
Private _MenuActions := {}
Private _MenuNames := {}
Private _MenuImages := {}
Private _MenuChecked := {}

	if !_IsWIndowDefined (DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	aadd ( _MenuCaptions	, '' )
	aadd ( _MenuActions	, '' )
	aadd ( _MenuNames	, '' )
	aadd ( _MenuImages	, '' )
	aadd ( _MenuChecked	, .F. )

	Define Window MenuDesigner ;
		At 0,0 ;
		Width 370 ;
		Height GetTitleHeight() + 430 + 2 ;
		Title aMsgs [ 111 ]  ;
		Modal ;
		NoSize

		ON KEY ESCAPE	Action	( ;
				ThisWindow.Release ;
				)

		Define Frame Frame1
			Row 9
			Col 10
			Width 225
			Height 166
		End Frame

		Define Label Label1
			Row 23
			Col 25
			Width 50
			Value 'Caption:'
		End Label
		Define TextBox Text1
			Row 20
			Col 100
			Value ''
			OnChange CaptionChange()
		End TextBox

		Define Label Label2
			Row 53
			Col 25
			Width 50
			Value 'Action:'
		End Label
		Define TextBox Text2
			Row 50
			Col 100
			Value ''
			OnChange ActionChange()
		End TextBox

		Define Label Label3
			Row 83
			Col 25
			Width 50
			Value 'Name:'
		End Label
		Define TextBox Text3
			Row 80
			Col 100
			Value ''
			OnChange NameChange()
		End TextBox

		Define Label Label4
			Row 113
			Col 25
			Width 50
			Value 'Image:'
		End Label
		Define TextBox Text4
			Row 110
			Col 100
			Value ''
			OnChange ImageChange()
		End TextBox

		Define Label Label5
			Row 143
			Col 25
			Width 50
			Value 'Checked:'
		End Label
		Define CheckBox Check1
			Row 140
			Col 100
			Value .F.
			OnChange CheckedChange()
		End CheckBox

		* Button Bar

		Define Frame Frame2
			Row 182
			Col 10
			Width 340
			Height 36
		End Frame
		Define Button button1
			Row 186
			Col 13
			Width 30
			Height 30
			Picture 'LEFT'
			Action	UnIndent()
		End Button
		Define Button button2
			Row 186
			Col 45
			Width 30
			Height 30
			Picture 'RIGHT'
			Action	Indent()
		End Button
		Define Button button3
			Row 186
			Col 77
			Width 30
			Height 30
			Picture 'UP'
			Action	MenuMoveUp()
		End Button
		Define Button button4
			Row 186
			Col 109
			Width 30
			Height 30
			Picture 'DOWN'
			Action MenuMoveDown()
		End Button
		Define Button button5
			Row 186
			Col 140
			Width 50
			Height 30
			Caption aMsgs [ 112 ]
			Action	MenuNext()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button6
			Row 186
			Col 192
			Width 50
			Height 30
			Caption aMsgs [ 113 ]
			Action	MenuPrior()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button7
			Row 186
			Col 244
			Width 50
			Height 30
			Caption aMsgs [ 114 ]
			Action	MenuInsert()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button8
			Row 186
			Col 296
			Width 50
			Height 30
			Caption aMsgs [ 115 ]
			Action	MenuDelete()
			FontName 'Arial'
			FontSize 8
		End Button

		* Main List Box

		Define ListBox List1
			Row 225
			Col 10
			Width 340
			height 190
			Items FillMenuList()
			Value 1
			OnChange MenuChange()
		End ListBox

		* Ok / Cancel Buttons

		Define Button Ok
			Row 10
			Col 250
			Caption aMsgs [ 116 ]
			Action	( BuildMenu() , _HMG_SYSDATA [ 257 ] := .F. )
		End Button
		Define Button Cancel
			Row 45
			Col 250
			Caption aMsgs [ 117 ]
			Action	( _HMG_SYSDATA [ 257 ] := .T. , ThisWindow.Release )
		End Button

	End Window

	MenuDesigner.List1.Value := 1
	MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(1) )
	MenuDesigner.Text2.Value := _MenuActions	[ 1 ]
	MenuDesigner.Text3.Value := _MenuNames		[ 1 ]
	MenuDesigner.Text4.Value := _MenuImages		[ 1 ]
	MenuDesigner.check1.Value := _MenuChecked	[ 1 ]

	setfocus ( GetControlHandle ( 'Text1' , 'MenuDesigner' ) )

	MenuDesigner.Center
	MenuDesigner.Activate

	DoMethod ( DesignForm , 'SetFocus' )
	DrawGrid()

Return

*------------------------------------------------------------------------------*
// Procedure PointCount ( String )
Function PointCount ( String )
*------------------------------------------------------------------------------*
Local i
Local PointCount := 0

	For i := 1 To HMG_LEN ( String )
		If HB_USUBSTR ( String , i , 1 ) == '.'
			PointCount++
		Else
			Exit
		EndIf
	Next i

Return PointCount

*------------------------------------------------------------------------------*
Procedure CaptionChange
*------------------------------------------------------------------------------*
Local i
Local PointCount
Local String


	If _InsertActive == .F.

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	String := MenuDesigner.List1.Item (i)

	PointCount := PointCount(String)

	MenuDesigner.List1.Item (i) := Replicate ( '.' , PointCount ) + ALLTRIM ( MenuDesigner.Text1.Value )

	MenuDesigner.List1.Value := i

	_MenuCaptions [i] := MenuDesigner.Text1.Value

	endif

Return

*------------------------------------------------------------------------------*
Procedure ActionChange
*------------------------------------------------------------------------------*
Local i

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_MenuActions [i] := MenuDesigner.Text2.Value

Return

*------------------------------------------------------------------------------*
Procedure NameChange
*------------------------------------------------------------------------------*
Local i

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_MenuNames [i] := MenuDesigner.Text3.Value

Return

*------------------------------------------------------------------------------*
Procedure ImageChange
*------------------------------------------------------------------------------*
Local i

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_MenuImages [i] := MenuDesigner.Text4.Value

Return

*------------------------------------------------------------------------------*
Procedure CheckedChange
*------------------------------------------------------------------------------*
Local i

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_MenuChecked [i] := MenuDesigner.Check1.Value

Return

*------------------------------------------------------------------------------*
Procedure Indent
*------------------------------------------------------------------------------*
Local i
Local String

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	String := MenuDesigner.List1.Item (i)

	MenuDesigner.List1.Item (i) := '....' + ALLTRIM ( MenuDesigner.List1.Item (i) )

	MenuDesigner.List1.Value := i

Return

*------------------------------------------------------------------------------*
Procedure UnIndent
*------------------------------------------------------------------------------*
Local i
Local String

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	String := MenuDesigner.List1.Item (i)

	if HB_ULEFT ( String , 1 ) != '.'
		Return
	EndIf

	MenuDesigner.List1.Item (i) :=  HB_URIGHT ( String , HMG_LEN( String ) - 4 )

	MenuDesigner.List1.Value := i

Return

*------------------------------------------------------------------------------*
Procedure MenuNext
*------------------------------------------------------------------------------*
Local i
Local c
local p := 0

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= MenuDesigner.List1.ItemCount


	if i + 1 > c

		if !Empty ( MenuDesigner.List1.Item (i) )

			p := PointCount ( MenuDesigner.List1.Item (i) )

			if HMG_LEN ( ALLTRIM ( MenuDesigner.List1.Item (i) ) ) <> p

				MenuDesigner.List1.additem( Replicate ( '.', p )  )

				aadd ( _MenuCaptions	, '' )
				aadd ( _MenuActions	, '' )
				aadd ( _MenuNames	, '' )
				aadd ( _MenuImages	, '' )
				aadd ( _MenuChecked	, .F. )

			endif

		endif

	EndIf

	MenuDesigner.List1.Value := i + 1

	MenuDesigner.Text1.Value := PointRemove( MenuDesigner.List1.Item(i+1) )

	setfocus ( GetControlHandle ( 'Text1' , 'MenuDesigner' ) )

	if HMG_LEN ( _MenuActions ) >= i+1

		MenuDesigner.Text2.Value := _MenuActions	[ i + 1 ]
		MenuDesigner.Text3.Value := _MenuNames		[ i + 1 ]
		MenuDesigner.Text4.Value := _MenuImages		[ i + 1 ]
		MenuDesigner.check1.Value := _MenuChecked	[ i + 1 ]

	Else

		MenuDesigner.Text2.Value := ''
		MenuDesigner.Text3.Value := ''
		MenuDesigner.Text4.Value := ''
		MenuDesigner.check1.Value := .F.

	EndIf

Return

*------------------------------------------------------------------------------*
Procedure MenuPrior
*------------------------------------------------------------------------------*
Local i

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	if i == 1
		Return
	EndIf

	MenuDesigner.List1.Value := i - 1

	MenuDesigner.Text1.Value := PointRemove( MenuDesigner.List1.Item(i-1) )

	setfocus ( GetControlHandle ( 'Text1' , 'MenuDesigner' ) )

	MenuDesigner.Text2.Value := _MenuActions	[ i - 1 ]
	MenuDesigner.Text3.Value := _MenuNames		[ i - 1 ]
	MenuDesigner.Text4.Value := _MenuImages		[ i - 1 ]
	MenuDesigner.check1.Value := _MenuChecked	[ i - 1 ]

Return

*------------------------------------------------------------------------------*
Procedure MenuDelete
*------------------------------------------------------------------------------*
Local i
Local c

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= MenuDesigner.List1.ItemCount

	if c == 1
		MenuDesigner.List1.Item (1) :=  ""
		MenuDesigner.List1.Value := 1

***

		MenuDesigner.Text1.Value	:= ''
		MenuDesigner.Text2.Value	:= ''
		MenuDesigner.Text3.Value	:= ''
		MenuDesigner.Text4.Value	:= ''
		MenuDesigner.check1.Value	:= .F.


		asize ( _MenuCaptions	, 0 )
		asize ( _MenuActions	, 0 )
		asize ( _MenuNames	, 0 )
		asize ( _MenuImages	, 0 )
		asize ( _MenuChecked	, 0 )


***

		Return
	endif

	MenuDesigner.List1.DeleteItem(i)

	adel ( _MenuCaptions	, i )
	adel ( _MenuActions	, i )
	adel ( _MenuNames	, i )
	adel ( _MenuImages	, i )
	adel ( _MenuChecked	, i )

	asize ( _MenuCaptions	, HMG_LEN(_MenuCaptions) - 1 )
	asize ( _MenuActions	, HMG_LEN(_MenuActions) - 1 )
	asize ( _MenuNames	, HMG_LEN(_MenuNames) - 1 )
	asize ( _MenuImages	, HMG_LEN(_MenuImages) - 1 )
	asize ( _MenuChecked	, HMG_LEN(_MenuChecked) - 1 )

	c	:= c - 1

	if i > c
		MenuDesigner.List1.Value := c
		MenuDesigner.Text1.Value := PointRemove( MenuDesigner.List1.Item(c) )
		MenuDesigner.Text2.Value := _MenuActions	[ c ]
		MenuDesigner.Text3.Value := _MenuNames		[ c ]
		MenuDesigner.Text4.Value := _MenuImages		[ c ]
		MenuDesigner.check1.Value := _MenuChecked	[ c ]

	Else
		MenuDesigner.List1.Value := i
		MenuDesigner.Text1.Value := PointRemove( MenuDesigner.List1.Item(i) )
		MenuDesigner.Text2.Value := _MenuActions	[ i ]
		MenuDesigner.Text3.Value := _MenuNames		[ i ]
		MenuDesigner.Text4.Value := _MenuImages		[ i ]
		MenuDesigner.check1.Value := _MenuChecked	[ i ]

	EndIf

	setfocus ( GetControlHandle ( 'Text1' , 'MenuDesigner' ) )

Return

*------------------------------------------------------------------------------*
Procedure MenuInsert
*------------------------------------------------------------------------------*
Local i
Local c
Local aTemp := {}
Local x
Local P

	_InsertActive := .T.

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= MenuDesigner.List1.ItemCount

	P := PointCount(MenuDesigner.List1.Item (i))

	for x := 1 to c

		if x == i
			aadd ( aTemp , Replicate ( '.' , P ) )
		endif

		aadd ( aTemp , MenuDesigner.List1.Item (x) )

	next x


	MenuDesigner.List1.DeleteAllItems

	for x := 1 to HMG_LEN ( aTemp)
		MenuDesigner.List1.AddItem ( aTemp [x] )
	next x

	MenuDesigner.List1.Value := i

	aadd ( _MenuCaptions	, '' )
	aadd ( _MenuActions	, '' )
	aadd ( _MenuNames	, '' )
	aadd ( _MenuImages	, '' )
	aadd ( _MenuChecked	, .F. )

	ains ( _MenuCaptions	, i )
	ains ( _MenuActions	, i )
	ains ( _MenuNames	, i )
	ains ( _MenuImages	, i )
	ains ( _MenuChecked	, i )

	_MenuCaptions	[ i ] := ''
	_MenuActions	[ i ] := ''
	_MenuNames	[ i ] := ''
	_MenuImages	[ i ] := ''
	_MenuChecked	[ i ] := .F.

	MenuDesigner.Text1.Value := ''
	MenuDesigner.Text2.Value := ''
	MenuDesigner.Text3.Value := ''
	MenuDesigner.Text4.Value := ''
	MenuDesigner.check1.Value := .F.


	setfocus ( GetControlHandle ( 'Text1' , 'MenuDesigner' ) )


	_InsertActive := .F.

Return

*------------------------------------------------------------------------------*
Procedure MenuChange
*------------------------------------------------------------------------------*
Local i
Local aTemp := {}

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
	MenuDesigner.Text2.Value := _MenuActions	[ i ]
	MenuDesigner.Text3.Value := _MenuNames		[ i ]
	MenuDesigner.Text4.Value := _MenuImages		[ i ]
	MenuDesigner.check1.Value := _MenuChecked	[ i ]

Return

*------------------------------------------------------------------------------*
// Procedure PointRemove ( String )
Function PointRemove ( String )
*------------------------------------------------------------------------------*
Local i
Local PointCount := 0

	String := ALLTRIM ( String )

	For i := 1 To HMG_LEN ( String )
		If HB_USUBSTR ( String , i , 1 ) == '.'
			PointCount++
		Else
			Exit
		EndIf
	Next i

	String := ALLTRIM ( HB_URIGHT ( String , HMG_LEN(String) - PointCount ) )

Return String

*------------------------------------------------------------------------------*
Procedure MenuMoveUp
*------------------------------------------------------------------------------*
Local i
Local Previous
Local Current
Local aux0
Local aux1
Local aux2
Local aux3
Local aux4

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	if i == 1
		Return
	EndIf

	Previous	:= MenuDesigner.List1.Item(i-1)
	Current 	:= MenuDesigner.List1.Item(i)

	MenuDesigner.List1.Item(i)	:= Previous
	MenuDesigner.List1.Item(i-1)	:= Current

	MenuDesigner.List1.Value := i - 1

	aux0 := _MenuCaptions [i]
	aux1 := _MenuActions [i]
	aux2 := _MenuNames [i]
	aux3 := _MenuImages [i]
	aux4 := _MenuChecked [i]

	_MenuCaptions [i]	:= _MenuCaptions [i-1]
	_MenuActions [i]	:= _MenuActions [i-1]
	_MenuNames [i]		:= _MenuNames [i-1]
	_MenuImages [i] 	:= _MenuImages [i-1]
	_MenuChecked [i] 	:= _MenuChecked [i-1]

	_MenuCaptions [i-1]	:= aux0
	_MenuActions [i-1]	:= aux1
	_MenuNames [i-1]	:= aux2
	_MenuImages [i-1]	:= aux3
	_MenuChecked [i-1]	:= aux4

Return

*------------------------------------------------------------------------------*
Procedure MenuMoveDown
*------------------------------------------------------------------------------*
Local i
Local c
Local Next
Local Current
Local aux0
Local aux1
Local aux2
Local aux3
Local aux4

	i := MenuDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c := MenuDesigner.List1.ItemCount

	if i == c
		Return
	EndIf

	Current 	:= MenuDesigner.List1.Item(i)
	Next		:= MenuDesigner.List1.Item(i+1)

	MenuDesigner.List1.Item(i)	:= Next
	MenuDesigner.List1.Item(i+1)	:= Current

	MenuDesigner.List1.Value := i + 1

	aux0 := _MenuCaptions [i]
	aux1 := _MenuActions [i]
	aux2 := _MenuNames [i]
	aux3 := _MenuImages [i]
	aux4 := _MenuChecked [i]

	_MenuCaptions [i]	:= _MenuCaptions [i+1]
	_MenuActions [i]	:= _MenuActions [i+1]
	_MenuNames [i]		:= _MenuNames [i+1]
	_MenuImages [i] 	:= _MenuImages [i+1]
	_MenuChecked [i] 	:= _MenuChecked [i+1]

	_MenuCaptions [i+1]	:= aux0
	_MenuActions [i+1]	:= aux1
	_MenuNames [i+1]	:= aux2
	_MenuImages [i+1]	:= aux3
	_MenuChecked [i+1]	:= aux4

Return

*------------------------------------------------------------------------------*
Procedure BuildMenu
*------------------------------------------------------------------------------*
Local i
Local j
Local Menu
Local CurrentLevel := 0
Local NextLevel := 0

	if MenuDesigner.List1.ItemCount <= 1
		MenuDesigner.Release
		Return
	endif

	Menu := Space(4) + 'DEFINE MAIN MENU' + CRLF

	For i := 1 To MenuDesigner.List1.ItemCount

		* Determine Levels

		CurrentLevel := Int ( PointCount ( MenuDesigner.List1.Item(i) ) / 4 )

		if i+1 <= MenuDesigner.List1.ItemCount
			NextLevel := Int ( PointCount ( MenuDesigner.List1.Item(i+1) ) / 4 )
		Else
			*NextLevel := Currentlevel - 1
			NextLevel := 0
		EndIf

		if NextLevel - CurrentLevel > 1
			MsgStop ( aMsgs [ 118 ] ,'HMG IDE')
			MenuDesigner.List1.Value := i
			MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
			MenuDesigner.Text2.Value := _MenuActions	[ i ]
			MenuDesigner.Text3.Value := _MenuNames		[ i ]
			MenuDesigner.Text4.Value := _MenuImages		[ i ]
			MenuDesigner.Check1.Value := _MenuChecked	[ i ]
			Return
		EndIf

		* Create Command

		If !Empty( PointRemove ( MenuDesigner.List1.Item(i) ) )

			if 	NextLevel > CurrentLevel	;
				.Or.				;
				CurrentLevel == 0

				* Popup

				if !Empty(_MenuActions[i])
					MsgStop ( aMsgs [ 119 ] ,'HMG IDE')
					MenuDesigner.List1.Value := i
					MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
					MenuDesigner.Text2.Value := _MenuActions	[ i ]
					MenuDesigner.Text3.Value := _MenuNames		[ i ]
					MenuDesigner.Text4.Value := _MenuImages		[ i ]
					MenuDesigner.Check1.Value := _MenuChecked	[ i ]
					Return
				endif

				if !Empty(_MenuImages[i])
					MsgStop ( aMsgs [ 120 ] ,'HMG IDE')
					MenuDesigner.List1.Value := i
					MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
					MenuDesigner.Text2.Value := _MenuActions	[ i ]
					MenuDesigner.Text3.Value := _MenuNames		[ i ]
					MenuDesigner.Text4.Value := _MenuImages		[ i ]
					MenuDesigner.Check1.Value := _MenuChecked	[ i ]
					Return
				endif

				if _MenuChecked[i] == .T.
					MsgStop ( aMsgs [ 121 ] ,'HMG IDE')
					MenuDesigner.List1.Value := i
					MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
					MenuDesigner.Text2.Value := _MenuActions	[ i ]
					MenuDesigner.Text3.Value := _MenuNames		[ i ]
					MenuDesigner.Text4.Value := _MenuImages		[ i ]
					MenuDesigner.Check1.Value := _MenuChecked	[ i ]
					Return
				endif

				Menu := Menu + Space(8) + Space(CurrentLevel*4) + 'DEFINE POPUP ' + chr(34) + _MenuCaptions [ i ] + chr(34) + if ( !Empty(_MenuNames[i]) , ' NAME ' + _MenuNames[i] , '' ) + CRLF

			Else

				if _MenuCaptions [ i ] = '-'

					* Separator

					if !Empty(_MenuNames[i])
						MsgStop ( aMsgs [ 122 ] ,'HMG IDE')
						MenuDesigner.List1.Value := i
						MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
						MenuDesigner.Text2.Value := _MenuActions	[ i ]
						MenuDesigner.Text3.Value := _MenuNames		[ i ]
						MenuDesigner.Text4.Value := _MenuImages		[ i ]
						MenuDesigner.Check1.Value := _MenuChecked	[ i ]
						Return
					endif

					if !Empty(_MenuActions[i])
						MsgStop ( aMsgs [ 123 ] ,'HMG IDE')
						MenuDesigner.List1.Value := i
						MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
						MenuDesigner.Text2.Value := _MenuActions	[ i ]
						MenuDesigner.Text3.Value := _MenuNames		[ i ]
						MenuDesigner.Text4.Value := _MenuImages		[ i ]
						MenuDesigner.Check1.Value := _MenuChecked	[ i ]
						Return
					endif

					if !Empty(_MenuImages[i])
						MsgStop ( aMsgs [ 124 ] ,'HMG IDE')
						MenuDesigner.List1.Value := i
						MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
						MenuDesigner.Text2.Value := _MenuActions	[ i ]
						MenuDesigner.Text3.Value := _MenuNames		[ i ]
						MenuDesigner.Text4.Value := _MenuImages		[ i ]
						MenuDesigner.Check1.Value := _MenuChecked	[ i ]
						Return
					endif

					if _MenuChecked[i] == .T.
						MsgStop ( aMsgs [ 125 ] ,'HMG IDE')
						MenuDesigner.List1.Value := i
						MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
						MenuDesigner.Text2.Value := _MenuActions	[ i ]
						MenuDesigner.Text3.Value := _MenuNames		[ i ]
						MenuDesigner.Text4.Value := _MenuImages		[ i ]
						MenuDesigner.Check1.Value := _MenuChecked	[ i ]
						Return
					endif

					Menu := Menu + Space(8) + Space(CurrentLevel*4) + 'SEPARATOR' + CRLF

				Else

					* Item

					if Empty(_MenuActions[i])
						MsgStop ( aMsgs [ 126 ] ,'HMG IDE')
						MenuDesigner.List1.Value := i
						MenuDesigner.Text1.Value := PointRemove ( MenuDesigner.List1.Item(i) )
						MenuDesigner.Text2.Value := _MenuActions	[ i ]
						MenuDesigner.Text3.Value := _MenuNames		[ i ]
						MenuDesigner.Text4.Value := _MenuImages		[ i ]
						MenuDesigner.Check1.Value := _MenuChecked	[ i ]
						Return
					endif

					Menu := Menu + Space(8) + Space(CurrentLevel*4) + 'MENUITEM ' + chr(34) + _MenuCaptions [ i ] + chr(34) + ' ACTION ' + _MenuActions[i] + if ( !Empty(_MenuNames[i]) , ' NAME ' + _MenuNames[i] , '' ) + if ( !Empty(_MenuImages[i]) , ' IMAGE ' + chr(34) + _MenuImages[i] + chr(34) , '' ) + if ( _MenuChecked[i] == .T. , ' CHECKED' , '' ) + CRLF

				EndIf

			EndIf

			* Close Popups If Needed

			If	NextLevel < CurrentLevel

				For j := 1 To ( CurrentLevel - NextLevel )
					Menu := Menu + Space(8) + Space( ( (CurrentLevel*4) - (j*4) ) ) + 'END POPUP' + CRLF
				Next j

			ElseIf 	NextLevel == 0 .And. CurrentLevel == 0

				Menu := Menu + Space(8) + 'END POPUP' + CRLF

			Endif

		EndIf

	Next i

	Menu := Menu + Space(4) + 'END MENU' + CRLF

	_hmgide_CurrentMainMenu := Menu

	DesignFormModified := .T.

	MenuDesigner.Release

Return
*------------------------------------------------------------------------------*
Function FillMenuList()
*------------------------------------------------------------------------------*
Local aList := {}
Local LineCount := 0
Local Line := ''
Local x := 0
Local y := 0
Local j := 0
Local CurrentLevel := 0
Local qc := 0
Local i
Local Caption
Local Action
Local Name
Local Image
Local Checked

	If Empty (_hmgide_CurrentMainMenu)
		aList := {''}
	Else

		_MenuCaptions	:= {}
		_MenuNames	:= {}
		_MenuActions	:= {}
		_MenuImages	:= {}
		_MenuChecked	:= {}

		LineCount := MlCount ( _hmgide_CurrentMainMenu )

		For i := 1 To LineCount

			Line := ALLTRIM ( MemoLine ( _hmgide_CurrentMainMenu , 1024 , i , 4 , .t. ) )

			if HMG_UPPER (Line) = 'DEFINE POPUP '

				CurrentLevel++

				Line := HB_URIGHT ( Line , HMG_LEN( Line ) - 13 )

				* Get Caption
				x := HB_UAT ( '"' , Line )
				y := HB_UTF8RAT ( '"' , Line )
				Caption := HB_USUBSTR ( Line , 2 , y - 2 )

				* Get Name
				x := HB_UTF8RAT ( '" NAME ' , HMG_UPPER(Line) )
				y := HMG_LEN ( Line )

				If x > 0
					Name := HB_USUBSTR ( Line , x + 7 , y - ( x + 6 ) )
				Else
					Name := ''
				EndIf

				aadd ( aList , Replicate ( '.' , (CurrentLevel-1) * 4 ) + Caption )

				aadd ( _MenuCaptions	, Caption	)
				aadd ( _MenuNames	, Name		)
				aadd ( _MenuActions	, ''		)
				aadd ( _MenuImages	, ''		)
				aadd ( _MenuChecked	, .F.		)

			Elseif HMG_UPPER (Line) = 'MENUITEM '

				Line := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN( Line ) - 9 ) )

				* Get Checked
				if HB_URIGHT ( HMG_UPPER (Line) , 8 ) == ' CHECKED'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 8 ) )
					Checked := .T.
				Else
					Checked := .F.
				EndIf

				* Get Image

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' IMAGE "' , HMG_UPPER(Line) )

					if x > 0
						Image := ALLTRIM ( HB_USUBSTR ( Line , x + 8 , HMG_LEN(Line) - ( x + 8 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						Image := ''
					EndIf

				Else
					Image := ''
				EndIf

                                * Get Name

				x := HB_UTF8RAT ( ' NAME ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					Name := ALLTRIM ( HB_USUBSTR ( Line , x + 6 , HMG_LEN(Line) ) )
					Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
				Else
					Name := ''
				EndIf

				* Get Action

				x := HB_UTF8RAT ( ' ACTION ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					Action := HB_USUBSTR ( Line , x + 8 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					Action := ''
				EndIf

				* Get Caption

				Line := ALLTRIM ( Line )

				Caption := HB_ULEFT ( Line , HMG_LEN(Line) - 1 )

				Caption := HB_URIGHT ( Caption , HMG_LEN(Caption) - 1 )

				aadd ( aList , Replicate ( '.' , CurrentLevel*4 ) + Caption )

				aadd ( _MenuCaptions	, Caption	)
				aadd ( _MenuActions	, Action	)
				aadd ( _MenuNames	, Name		)
				aadd ( _MenuImages	, Image		)
				aadd ( _MenuChecked	, Checked	)

			Elseif HMG_UPPER (Line) = 'END POPUP'

				CurrentLevel--

			Elseif HMG_UPPER (Line) = 'SEPARATOR'

				aadd ( aList , Replicate ( '.' , CurrentLevel*4 ) + '-' )

				aadd ( _MenuCaptions	, '-' )
				aadd ( _MenuActions	, '' )
				aadd ( _MenuNames	, '' )
				aadd ( _MenuImages	, '' )
				aadd ( _MenuChecked	, .F. )

			EndIf

		Next i

	EndIf

Return aList

*------------------------------------------------------------------------------*
Function FillContextMenuList( cType , nDropDownArrayPos )
*------------------------------------------------------------------------------*
Local aList := {}
Local LineCount := 0
Local Line := ''
Local x := 0
Local y := 0
Local j := 0
Local CurrentLevel := 0
Local qc := 0
Local i
Local Caption
Local Action
Local Name
Local Image
Local Checked

	If Empty ( if ( cType == 'C' , _hmgide_CurrentContextMenu , if ( cType == 'N' , _hmgide_CurrentNotifyMenu , _hmgide_aDropDownMenus [nDropDownArrayPos] ) ) )
		aList := {''}
	Else

		_MenuCaptions	:= {}
		_MenuNames	:= {}
		_MenuActions	:= {}
		_MenuImages	:= {}
		_MenuChecked	:= {}

		LineCount := if ( cType == 'C' , MlCount ( _hmgide_CurrentContextMenu ) , if ( cType == 'N' , MlCount ( _hmgide_CurrentNotifyMenu ) , MlCount ( _hmgide_aDropDownMenus [nDropDownArrayPos]  ) ) )

		For i := 1 To LineCount

			if cType == 'C'

				Line := ALLTRIM ( MemoLine ( _hmgide_CurrentContextMenu , 1024 , i , 4 , .t. ) )

			elseif cType == 'N'

				Line := ALLTRIM ( MemoLine ( _hmgide_CurrentNotifyMenu , 1024 , i , 4 , .t. ) )

			elseif cType == 'D'

				Line := ALLTRIM ( MemoLine ( _hmgide_aDropDownMenus [nDropDownArrayPos] , 1024 , i , 4 , .t. ) )

			endif

			if HMG_UPPER (Line) = 'MENUITEM '

				Line := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN( Line ) - 9 ) )

				* Get Checked
				if HB_URIGHT ( HMG_UPPER (Line) , 8 ) == ' CHECKED'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 8 ) )
					Checked := .T.
				Else
					Checked := .F.
				EndIf

				* Get Image

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' IMAGE "' , HMG_UPPER(Line) )

					if x > 0
						Image := ALLTRIM ( HB_USUBSTR ( Line , x + 8 , HMG_LEN(Line) - ( x + 8 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						Image := ''
					EndIf

				Else
					Image := ''
				EndIf

                                * Get Name

				x := HB_UTF8RAT ( ' NAME ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					Name := ALLTRIM ( HB_USUBSTR ( Line , x + 6 , HMG_LEN(Line) ) )
					Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
				Else
					Name := ''
				EndIf

				* Get Action

				x := HB_UTF8RAT ( ' ACTION ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					Action := HB_USUBSTR ( Line , x + 8 , 255 )
					Line := HB_ULEFT ( Line , x )
				Else
					Action := ''
				EndIf

				* Get Caption

				Line := ALLTRIM ( Line )

				Caption := HB_ULEFT ( Line , HMG_LEN(Line) - 1 )

				Caption := HB_URIGHT ( Caption , HMG_LEN(Caption) - 1 )

				aadd ( aList , Caption )

				aadd ( _MenuCaptions	, Caption	)
				aadd ( _MenuActions	, Action	)
				aadd ( _MenuNames	, Name		)
				aadd ( _MenuImages	, Image		)
				aadd ( _MenuChecked	, Checked	)


			Elseif HMG_UPPER (Line) = 'SEPARATOR'

				aadd ( aList , '-' )

				aadd ( _MenuCaptions	, '-' )
				aadd ( _MenuActions	, '' )
				aadd ( _MenuNames	, '' )
				aadd ( _MenuImages	, '' )
				aadd ( _MenuChecked	, .F. )

			EndIf

		Next i

	EndIf

Return aList

*------------------------------------------------------------------------------*
Function QuoteCount( cString , nPos )
*------------------------------------------------------------------------------*
Local i
Local nQuoteCount := 0

	For i := 1 To nPos

		If HB_USUBSTR ( cString , i , 1 ) == chr( 34 )
			nQuoteCount++
		EndIf

	Next i

Return ( nQuoteCount )
*------------------------------------------------------------------------------*
Function IsLiteral ( cString , nPos )
*------------------------------------------------------------------------------*
Local i
Local nQuoteCount := 0
Local lIsLiteral

	For i := 1 To nPos

		If HB_USUBSTR ( cString , i , 1 ) == chr( 34 )
			nQuoteCount++
		EndIf

	Next i

	If nQuoteCount / 2 == int ( nQuoteCount / 2 )
		lIsLiteral := .F.
	Else
		lIsLiteral := .T.
	EndIf

Return ( lIsLiteral )

//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*




*------------------------------------------------------------------------------*
Procedure ToolBarBuilder
*------------------------------------------------------------------------------*
Private _TbName			:= 'ToolBar_1'
Private _TbNames		:= {}
Private _TbCaptions		:= {}
Private _TbPictures		:= {}
Private _TbActions		:= {}
Private _TbToolTips		:= {}
Private _TbSeparators		:= {}
Private _TbChecks		:= {}
Private _TbAutoSizes		:= {}
Private _TbGroups		:= {}
Private _TbDropDowns		:= {}
Private _TbWholeDropDowns	:= {}

Private _TbFontName		:= 'Arial'
Private _TbFontSize		:= 9
Private _TbFontBold		:= .F.
Private _TbFontItalic		:= .F.
Private _TbFontUnderLine	:= .F.
Private _TbFontStrikeout	:= .F.
Private _TbButtonWidth		:= '64'
Private _TbButtonHeight		:= '64'
Private _TbButtonImageWidth	:= ''
Private _TbButtonImageHeight	:= ''
Private _TbToolTip		:= ''
Private _TbFlat			:= .T.
Private _TbBottom		:= .F.
Private _TbRightText		:= .F.
Private _TbBorder		:= .F.
Private _TbStrictWidth		:= .F.


	if !_IsWIndowDefined (DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	if ! Empty ( _hmgide_CurrentSplitBox )
		MsgStop ('This Windows has a SplitBox. You must delete it prior to create a Main ToolBar','HMG IDE')
		Return
	endif

	aadd ( _TbNames		, '' )
	aadd ( _TbCaptions	, '' )
	aadd ( _TbPictures	, '' )
	aadd ( _TbActions	, '' )
	aadd ( _TbToolTips	, '' )
	aadd ( _TbSeparators	, .F. )
	aadd ( _TbChecks	, .F. )
	aadd ( _TbAutoSizes	, .F. )
	aadd ( _TbGroups	, .F. )
	aadd ( _TbDropDowns	, .F. )
	aadd ( _TbWholeDropDowns, .F. )

	Define Window TbDesigner ;
		At 0,0 ;
		Width 370 ;
		Height GetTitleHeight() + 460 + 2 ;
		Title 'ToolBar Builder' ;
		Modal ;
		NoSize

		ON KEY ESCAPE	Action	( ;
				ThisWindow.Release ;
				)

		Define Frame Frame1
			Row 9
			Col 10
			Width 225
			Height 256
		End Frame

		Define Label Label1
			Row 23
			Col 25
			Width 50
			Value 'Name:'
		End Label
		Define TextBox Text1
			Row 20
			Col 100
			Value ''
			OnChange TbNameChange()
		End TextBox

		Define Label Label2
			Row 53
			Col 25
			Width 50
			Value 'Caption:'
		End Label
		Define TextBox Text2
			Row 50
			Col 100
			Value ''
			OnChange TbCaptionChange()
		End TextBox

		Define Label Label3
			Row 83
			Col 25
			Width 50
			Value 'Picture:'
		End Label
		Define TextBox Text3
			Row 80
			Col 100
			Value ''
			OnChange TbPictureChange()
		End TextBox

		Define Label Label4
			Row 113
			Col 25
			Width 50
			Value 'Action:'
		End Label
		Define TextBox Text4
			Row 110
			Col 100
			Value ''
			OnChange TbActionChange()
		End TextBox

		Define Label Label4a
			Row 143
			Col 25
			Width 50
			Value 'ToolTip:'
		End Label
		Define TextBox Text4a
			Row 140
			Col 100
			Value ''
			OnChange TbToolTipChange()
		End TextBox


		Define Label Label5
			Row 173
			Col 25
			Width 60
			Value 'Separator:'
		End Label
		Define CheckBox Check5
			Row 170
			Col 100
			Width 20
			Value .f.
			OnChange TbSeparatorChange()
		End CheckBox

		Define Label Label6
			Row 203
			Col 25
			Width 50
			Value 'AutoSize:'
		End Label
		Define CheckBox Check6
			Row 200
			Col 100
			Width 20
			Value .f.
			OnChange TbAutoSizeChange()
		End CheckBox

		Define Label Label7
			Row 173
			Col 130
			Width 50
			Value 'Check:'
		End Label
		Define CheckBox Check7
			Row 170
			Col 205
			Width 20
			Value .f.
			OnChange TbCheckChange()
		End CheckBox

		Define Label Label8
			Row 203
			Col 130
			Width 50
			Value 'Group:'
		End Label
		Define CheckBox Check8
			Row 200
			Col 205
			Width 20
			Value .f.
			OnChange TbGroupChange()
		End CheckBox

		**

		Define Label Label9
			Row 233
			Col 25
			Width 75
			Value 'DropDown:'
		End Label
		Define CheckBox Check9
			Row 230
			Col 100
			Width 20
			Value .f.
			OnChange TbDropDownChange()
		End CheckBox

		Define Label Label10
			Row 233
			Col 130
			Width 75
			Value 'W.DropDn.:'
		End Label
		Define CheckBox Check10
			Row 230
			Col 205
			Width 20
			Value .f.
			OnChange TbWholeDropDownChange()
		End CheckBox

		* Button Bar

		Define Frame Frame3
			Row 272
			Col 10
			Width 340
			Height 36
		End Frame

		Define Button button3
			Row 276
			Col 13
			Width 61
			Height 30
			Picture 'UP'
			Action	TbMoveUp()
		End Button
		Define Button button4
			Row 276
			Col 76
			Width 61
			Height 30
			Picture 'DOWN'
			Action TbMoveDown()
		End Button
		Define Button button5
			Row 276
			Col 140
			Width 50
			Height 30
			Caption aMsgs [ 112 ]
			Action	TbNext()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button6
			Row 276
			Col 192
			Width 50
			Height 30
			Caption aMsgs [ 113 ]
			Action	TbPrior()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button7
			Row 276
			Col 244
			Width 50
			Height 30
			Caption aMsgs [ 114 ]
			Action	TbInsert()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button8
			Row 276
			Col 296
			Width 50
			Height 30
			Caption aMsgs [ 115 ]
			Action	TbDelete()
			FontName 'Arial'
			FontSize 8
		End Button

		* Main List Box

		Define ListBox List1
			Row 315
			Col 10
			Width 340
			height 130
			Items FillTbList()
			Value 1
			OnChange TbChange()
		End ListBox

		* Ok / Cancel Buttons

		Define Button Ok
			Row 10
			Col 250
			Caption aMsgs [ 116 ]
			Action	( BuildToolBar() , _HMG_SYSDATA [ 257 ] := .F. )
		End Button
		Define Button Cancel
			Row 40
			Col 250
			Caption aMsgs [ 117 ]
			Action	( _HMG_SYSDATA [ 257 ] := .T. , ThisWindow.Release )
		End Button

		Define Button Properties
			Row 235
			Col 250
			Caption aMsgs [ 142 ]
			Action	TbProperties()
		End Button

	End Window

	TbDesigner.List1.Value	:= 1
	TbDesigner.Text1.Value	:= TbDesigner.List1.Item(1)
	TbDesigner.Text2.Value	:= _TbCaptions	[ 1 ]
	TbDesigner.Text3.Value	:= _TbPictures	[ 1 ]
	TbDesigner.Text4.Value	:= _TbActions	[ 1 ]
	TbDesigner.Text4a.Value	:= _TbToolTips	[ 1 ]

	TbDesigner.Check5.Value	:= _TbSeparators	[ 1 ]
	TbDesigner.Check6.Value	:= _TbAutoSizes 	[ 1 ]
	TbDesigner.Check7.Value	:= _TbChecks 		[ 1 ]
	TbDesigner.Check8.Value	:= _TbGroups 		[ 1 ]

	TbDesigner.Check9.Value		:= _TbDropDowns 	[ 1 ]
	TbDesigner.Check10.Value	:= _TbWholeDropDowns	[ 1 ]

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

	TbDesigner.Center
	TbDesigner.Activate

	DoMethod ( DesignForm , 'SetFocus' )

	DrawGrid()

Return
*------------------------------------------------------------------------------*
Procedure TbToolTipChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbToolTips [i] := TbDesigner.Text4a.Value

Return
*------------------------------------------------------------------------------*
Procedure TbDropDownChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbDropDowns [i] := TbDesigner.Check9.Value

Return

*------------------------------------------------------------------------------*
Procedure TbWholeDropDownChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbWholeDropDowns [i] := TbDesigner.Check10.Value

Return

*------------------------------------------------------------------------------*
Procedure TbNameChange
*------------------------------------------------------------------------------*
Local i
Local String

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	String := TbDesigner.List1.Item (i)

	TbDesigner.List1.Item (i) := ALLTRIM ( TbDesigner.Text1.Value )

	TbDesigner.List1.Value := i

	_TbNames [i] := TbDesigner.Text1.Value

Return

*------------------------------------------------------------------------------*
Procedure TbCaptionChange
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbCaptions [i] := TbDesigner.Text2.Value

Return

*------------------------------------------------------------------------------*
Procedure TbPictureChange
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbPictures [i] := TbDesigner.Text3.Value

Return

*------------------------------------------------------------------------------*
Procedure TbActionChange
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbActions [i] := TbDesigner.Text4.Value

Return

*------------------------------------------------------------------------------*
Procedure TbSeparatorChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbSeparators [i] := TbDesigner.Check5.Value

Return
*------------------------------------------------------------------------------*
Procedure TbAutoSizeChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbAutoSizes [i] := TbDesigner.Check6.Value

Return
*------------------------------------------------------------------------------*
Procedure TbCheckChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbChecks [i] := TbDesigner.Check7.Value

Return
*------------------------------------------------------------------------------*
Procedure TbGroupChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbGroups [i] := TbDesigner.Check8.Value

Return
*------------------------------------------------------------------------------*
Procedure TbMoveUp
*------------------------------------------------------------------------------*
Local i
Local Previous
Local Current
Local aux0
Local aux1
Local aux2
Local aux3
Local aux4
Local aux5
Local aux6
Local aux7
Local aux8
Local aux9
Local aux10


	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	if i == 1
		Return
	EndIf

	Previous	:= TbDesigner.List1.Item(i-1)
	Current 	:= TbDesigner.List1.Item(i)

	TbDesigner.List1.Item(i)	:= Previous
	TbDesigner.List1.Item(i-1)	:= Current

	TbDesigner.List1.Value := i - 1

	aux0 := _TbNames		[i]
	aux1 := _TbCaptions		[i]
	aux2 := _TbPictures		[i]
	aux3 := _TbActions		[i]
	aux4 := _TbSeparators		[i]
	aux5 := _TbAutoSizes		[i]
	aux6 := _TbChecks		[i]
	aux7 := _TbGroups		[i]
	aux8 := _TbDropDowns		[i]
	aux9 := _TbWholeDropDowns	[i]
	aux10 := _TbToolTips		[i]

	_Tbnames		[i]	:= _TbNames		[i-1]
	_TbCaptions		[i]	:= _TbCaptions		[i-1]
	_TbPictures		[i]	:= _TbPictures		[i-1]
	_TbActions		[i] 	:= _TbActions		[i-1]
	_TbSeparators   	[i]	:= _TbSeparators	[i-1]
	_TbAutoSizes    	[i]	:= _TbAutoSizes		[i-1]
	_TbChecks 		[i]	:= _TbChecks		[i-1]
	_TbGroups 		[i]	:= _TbGroups		[i-1]
	_TbDropDowns		[i]	:= _TbDropDowns		[i-1]
	_TbWholeDropDowns	[i]	:= _TbWholeDropDowns	[i-1]
	_TbToolTips		[i]	:= _TbToolTips		[i-1]

	_TbNames		[i-1]	:= aux0
	_TbCaptions		[i-1]	:= aux1
	_TbPictures		[i-1]	:= aux2
	_TbActions		[i-1]	:= aux3
	_TbSeparators   	[i-1]	:= aux4
	_TbAutoSizes    	[i-1]	:= aux5
	_TbChecks 		[i-1]	:= aux6
	_TbGroups 		[i-1]	:= aux7
	_TbDropDowns		[i-1]	:= aux8
	_TbWholeDropDowns	[i-1]	:= aux9
	_TbToolTips		[i-1]	:= aux10

Return

*------------------------------------------------------------------------------*
Procedure TbMoveDown
*------------------------------------------------------------------------------*
Local i
Local c
Local Next
Local Current
Local aux0
Local aux1
Local aux2
Local aux3
Local aux4
Local aux5
Local aux6
Local aux7
Local aux8
Local aux9
Local aux10

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c := TbDesigner.List1.ItemCount

	if i == c
		Return
	EndIf

	Current 	:= TbDesigner.List1.Item(i)
	Next		:= TbDesigner.List1.Item(i+1)

	TbDesigner.List1.Item(i)	:= Next
	TbDesigner.List1.Item(i+1)	:= Current

	TbDesigner.List1.Value := i + 1

	aux0 	:=	_TbNames		[i]
	aux1 	:=	_TbCaptions		[i]
	aux2 	:=	_TbPictures		[i]
	aux3 	:=	_TbActions		[i]
	aux4 	:=	_TbSeparators		[i]
	aux5 	:=	_TbAutoSizes		[i]
	aux6 	:=	_TbChecks		[i]
	aux7 	:=	_TbGroups 		[i]
	aux8 	:=	_TbDropDowns		[i]
	aux9 	:=	_TbWholeDropDowns	[i]
	aux10	:=	_TbToolTips		[i]

	_TbNames		[i]	:= _TbNames		[i+1]
	_TbCaptions		[i]	:= _TbCaptions		[i+1]
	_TbPictures		[i]	:= _TbPictures		[i+1]
	_TbActions		[i] 	:= _TbActions		[i+1]
	_TbSeparators   	[i]	:= _TbSeparators	[i+1]
	_TbAutoSizes    	[i]	:= _TbAutoSizes		[i+1]
	_TbChecks 		[i]	:= _TbChecks 		[i+1]
	_TbGroups 		[i]	:= _TbGroups		[i+1]
	_TbDropDowns		[i]	:= _TbDropDowns		[i+1]
	_TbWholeDropDowns	[i]	:= _TbWholeDropDowns	[i+1]
	_TbToolTips		[i]	:= _TbToolTips		[i+1]

	_TbNames		[i+1]	:= aux0
	_TbCaptions		[i+1]	:= aux1
	_TbPictures		[i+1]	:= aux2
	_TbActions		[i+1]	:= aux3
	_TbSeparators		[i+1]	:= aux4
	_TbAutoSizes		[i+1]	:= aux5
	_TbChecks		[i+1]	:= aux6
	_TbGroups		[i+1]	:= aux7
	_TbDropDowns		[i+1]	:= aux8
	_TbWholeDropDowns	[i+1]	:= aux9
	_TbToolTips		[i+1]	:= aux10

Return

*------------------------------------------------------------------------------*
Procedure TbNext
*------------------------------------------------------------------------------*
Local i, c

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= TbDesigner.List1.ItemCount

	if i + 1 > c

		if !Empty ( TbDesigner.List1.Item (i) )

			TbDesigner.List1.additem( '' )

			aadd ( _TbNames		, ''	)
			aadd ( _TbCaptions	, ''	)
			aadd ( _TbPictures	, ''	)
			aadd ( _TbActions	, ''	)
			aadd ( _TbSeparators   	, .f.	)
			aadd ( _TbAutoSizes    	, .f.	)
			aadd ( _TbChecks 	, .f.	)
			aadd ( _TbGroups 	, .f.	)
			aadd ( _TbDropDowns 	, .f.	)
			aadd ( _TbWholeDropDowns, .f.	)
			aadd ( _TbToolTips	, ''	)

		endif

	EndIf

	TbDesigner.List1.Value := i + 1

	TbDesigner.Text1.Value := TbDesigner.List1.Item(i+1)

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

	if HMG_LEN ( _TbActions ) >= i+1

		TbDesigner.Text2.Value := _TbCaptions	[ i + 1 ]
		TbDesigner.Text3.Value := _TbPictures	[ i + 1 ]
		TbDesigner.Text4.Value := _TbActions	[ i + 1 ]
		TbDesigner.Text4a.Value := _TbToolTips	[ i + 1 ]

		TbDesigner.Check5.Value := _TbSeparators	[i+1]
		TbDesigner.Check6.Value := _TbAutoSizes		[i+1]
		TbDesigner.Check7.Value := _TbChecks 		[i+1]
		TbDesigner.Check8.Value := _TbGroups		[i+1]

		TbDesigner.Check9.Value := _TbDropDowns		[i+1]
		TbDesigner.Check10.Value := _TbWholeDropDowns	[i+1]

	Else

		TbDesigner.Text2.Value := ''
		TbDesigner.Text3.Value := ''
		TbDesigner.Text4.Value := ''
		TbDesigner.Text4a.Value := ''

		TbDesigner.Check5.Value := .f.
		TbDesigner.Check6.Value := .f.
		TbDesigner.Check7.Value := .f.
		TbDesigner.Check8.Value := .f.

		TbDesigner.Check9.Value := .f.
		TbDesigner.Check10.Value := .f.

	EndIf

Return

*------------------------------------------------------------------------------*
Procedure TbPrior
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	if i == 1
		Return
	EndIf

	TbDesigner.List1.Value := i - 1

	TbDesigner.Text1.Value := TbDesigner.List1.Item(i-1)

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

	TbDesigner.Text2.Value	:= _TbCaptions	[ i - 1 ]
	TbDesigner.Text3.Value	:= _TbPictures	[ i - 1 ]
	TbDesigner.Text4.Value	:= _TbActions	[ i - 1 ]
	TbDesigner.Text4a.Value	:= _TbToolTips	[ i - 1 ]

	TbDesigner.Check5.Value := _TbSeparators	[i-1]
	TbDesigner.Check6.Value := _TbAutoSizes    	[i-1]
	TbDesigner.Check7.Value := _TbChecks 		[i-1]
	TbDesigner.Check8.Value := _TbGroups 		[i-1]

	TbDesigner.Check9.Value := _TbDropDowns		[i-1]
	TbDesigner.Check10.Value := _TbWholeDropDowns	[i-1]


Return

*------------------------------------------------------------------------------*
Procedure TbDelete
*------------------------------------------------------------------------------*
Local i
Local c

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= TbDesigner.List1.ItemCount

	if c == 1
		TbDesigner.List1.Item (1) :=  ""
		TbDesigner.List1.Value := 1
		Return
	endif

	TbDesigner.List1.DeleteItem(i)

	adel ( _TbNames		, i )
	adel ( _TbCaptions	, i )
	adel ( _TbPictures	, i )
	adel ( _TbActions	, i )
	adel ( _TbToolTips	, i )

	adel ( _TbSeparators	, i )
	adel ( _TbAutoSizes    , i )
	adel ( _TbChecks 	, i )
	adel ( _TbGroups 	, i )

	adel ( _TbDropDowns	, i )
	adel ( _TbWholeDropDowns, i )

	asize ( _TbNames	, HMG_LEN(_TbNames) - 1 )
	asize ( _TbCaptions	, HMG_LEN(_TbCaptions) - 1 )
	asize ( _TbPictures	, HMG_LEN(_TbPictures) - 1 )
	asize ( _TbActions	, HMG_LEN(_TbActions) - 1 )
	asize ( _TbToolTips	, HMG_LEN(_TbToolTips) - 1 )

	asize ( _TbSeparators   , HMG_LEN ( _TbSeparators ) - 1 )
	asize ( _TbAutoSizes    , HMG_LEN ( _TbAutoSizes  ) - 1 )
	asize ( _TbChecks 	, HMG_LEN ( _TbChecks	) - 1 )
	asize ( _TbGroups 	, HMG_LEN ( _TbGroups 	) - 1 )

	asize ( _TbDropDowns	, HMG_LEN ( _TbDropDowns ) - 1 )
	asize ( _TbWholeDropDowns, HMG_LEN ( _TbWholeDropDowns ) - 1 )

	c	:= c - 1

	if i > c

		TbDesigner.List1.Value := c
		TbDesigner.Text1.Value := TbDesigner.List1.Item(c)
		TbDesigner.Text2.Value := _TbCaptions	[ c ]
		TbDesigner.Text3.Value := _TbPictures	[ c ]
		TbDesigner.Text4.Value := _TbActions	[ c ]
		TbDesigner.Text4a.Value := _TbToolTips	[ c ]

		TbDesigner.Check5.Value := _TbSeparators   [c]
		TbDesigner.Check6.Value := _TbAutoSizes    [c]
		TbDesigner.Check7.Value := _TbChecks 	[c]
		TbDesigner.Check8.Value := _TbGroups 	[c]

		TbDesigner.Check9.Value := _TbDropDowns [c]
		TbDesigner.Check10.Value := _TbWholeDropDowns [c]

	Else

		TbDesigner.List1.Value := i
		TbDesigner.Text1.Value := TbDesigner.List1.Item(i)
		TbDesigner.Text2.Value := _TbCaptions		[ i ]
		TbDesigner.Text3.Value := _TbPictures		[ i ]
		TbDesigner.Text4.Value := _TbActions		[ i ]
		TbDesigner.Text4a.Value := _TbToolTips		[ i ]

		TbDesigner.Check5.Value := _TbSeparators   [i]
		TbDesigner.Check6.Value := _TbAutoSizes    [i]
		TbDesigner.Check7.Value := _TbChecks 		[i]
		TbDesigner.Check8.Value := _TbGroups 		[i]

		TbDesigner.Check9.Value := _TbDropDowns		[i]
		TbDesigner.Check10.Value := _TbWholeDropDowns 	[i]

	EndIf

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

Return

*------------------------------------------------------------------------------*
Procedure TbInsert
*------------------------------------------------------------------------------*
Local i
Local c
Local aTemp := {}
Local x

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= TbDesigner.List1.ItemCount

	for x := 1 to c

		if x == i
			aadd ( aTemp , '' )
		endif

		aadd ( aTemp , TbDesigner.List1.Item (x) )

	next x

	TbDesigner.List1.DeleteAllItems

	for x := 1 to HMG_LEN ( aTemp)
		TbDesigner.List1.AddItem ( aTemp [x] )
	next x

	TbDesigner.List1.Value := i

	aadd ( _TbNames		, '' )
	aadd ( _TbCaptions	, '' )
	aadd ( _TbPictures	, '' )
	aadd ( _TbActions	, '' )
	aadd ( _TbToolTips	, '' )

	aadd ( _TbSeparators , .f. )
	aadd ( _TbAutoSizes , .f. )
	aadd ( _TbChecks , .f. )
	aadd ( _TbGroups , .f. )

	aadd ( _TbDropDowns , .f. )
	aadd ( _TbWholeDropDowns , .f. )


	ains ( _TbNames		, i )
	ains ( _TbCaptions	, i )
	ains ( _TbPictures	, i )
	ains ( _TbActions	, i )
	ains ( _TbToolTips	, i )

	ains ( _TbSeparators	, i )
	ains ( _TbAutoSizes	, i )
	ains ( _TbChecks	, i )
	ains ( _TbGroups	, i )

	ains ( _TbDropDowns	, i )
	ains ( _TbWholeDropDowns, i )


	_TbNames	[ i ] := ''
	_TbCaptions	[ i ] := ''
	_TbPictures	[ i ] := ''
	_TbActions	[ i ] := ''
	_TbToolTips	[ i ] := ''

	_TbSeparators [i] := .f.
	_TbAutoSizes [i] := .f.
	_TbChecks 	[i] := .f.
	_TbGroups 	[i] := .f.

	_TbDropDowns	[i] := .f.
	_TbWholeDropDowns[i] := .f.


	TbDesigner.Text1.Value := ''
	TbDesigner.Text2.Value := ''
	TbDesigner.Text3.Value := ''
	TbDesigner.Text4.Value := ''
	TbDesigner.Text4a.Value := ''

	TbDesigner.Check5.Value := .f.
	TbDesigner.Check6.Value := .f.
	TbDesigner.Check7.Value := .f.
	TbDesigner.Check8.Value := .f.

	TbDesigner.Check9.Value := .f.
	TbDesigner.Check10.Value := .f.

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

Return

*------------------------------------------------------------------------------*
Procedure TbChange
*------------------------------------------------------------------------------*
Local i
Local aTemp := {}

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	TbDesigner.Text1.Value	:= TbDesigner.List1.Item(i)
	TbDesigner.Text2.Value	:= _TbCaptions	[ i ]
	TbDesigner.Text3.Value	:= _TbPictures	[ i ]
	TbDesigner.Text4.Value	:= _TbActions	[ i ]
	TbDesigner.Text4a.Value	:= _TbToolTips	[ i ]

	TbDesigner.Check5.Value	:= _TbSeparators	[i]
	TbDesigner.Check6.Value	:= _TbAutoSizes		[i]
	TbDesigner.Check7.Value	:= _TbChecks		[i]
	TbDesigner.Check8.Value	:= _TbGroups		[i]

	TbDesigner.Check9.Value	:= _TbDropDowns		[i]
	TbDesigner.Check10.Value:= _TbWholeDropDowns	[i]

Return

*------------------------------------------------------------------------------*
Function FillTbList()
*------------------------------------------------------------------------------*
Local aList := {}
Local LineCount := 0
Local Line := ''
Local x := 0
Local y := 0
Local j := 0
Local CurrentLevel := 0
Local qc := 0
Local i
Local lStrikeOut := .f.
Local lUnderLine := .f.
Local lBold := .f.
Local lItalic := .f.
Local cTemp
Local Numbers
Local z

	If Empty (_hmgide_CurrentToolBar)
		aList := {''}
	Else

		aList		:= {}
		_TbGroups	:= {}
		_TbChecks	:= {}
		_TbSeparators	:= {}
		_TbActions	:= {}
		_TbPictures	:= {}
		_TbCaptions	:= {}
		_TbNames	:= {}
		_TbAutoSizes	:= {}
		_TbToolTips	:= {}

		_TbDropDowns		:= {}
		_TbWholeDropDowns	:= {}

		LineCount := MlCount ( _hmgide_CurrentToolBar )

		For i := 1 To LineCount

			Line := ALLTRIM ( MemoLine ( _hmgide_CurrentToolBar , 1024 , i , 4 , .t. ) )

			if HMG_UPPER (Line) = 'DEFINE TOOLBAR'

				Line := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN( Line ) - 14 ) )

				* Get Border

				if HB_URIGHT ( HMG_UPPER (Line) , 7 ) == ' BORDER'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 7 ) )
					_TbBorder := .T.
				Else
					_TbBorder := .F.
				EndIf

				* Get RightText

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' RIGHTTEXT'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					_TbRightText := .T.
				Else
					_TbRightText := .F.
				EndIf

                                * Get Bottom

				if HB_URIGHT ( HMG_UPPER (Line) , 7 ) == ' BOTTOM'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 7 ) )
					_TbBottom := .T.
				Else
					_TbBottom := .F.
				EndIf

				* Get Flat

				if HB_URIGHT ( HMG_UPPER (Line) , 5 ) == ' FLAT'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 5 ) )
					_TbFlat := .T.
				Else
					_TbFlat := .F.
				EndIf

				* Get ToolTip

				Line := ALLTRIM(Line)

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( 'TOOLTIP "' , HMG_UPPER(Line) )

					if x > 0
						_TbToolTip := ALLTRIM ( HB_USUBSTR ( Line , x + 9 , HMG_LEN(Line) - ( x + 9 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x - 1 ) )
					Else
						_TbToolTip := ''
					EndIf

				Else
					_TbToolTip := ''
				EndIf

				Line := ALLTRIM(Line)

				* Get StrikeOut

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' STRIKEOUT'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					_TbFontStrikeout := .T.
				Else
					_TbFontStrikeout := .F.
				EndIf

				Line := ALLTRIM(Line)

				* Get UnderLine

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' UNDERLINE'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					_TbFontUnderLine := .T.
				Else
					_TbFontUnderLine := .F.
				EndIf

				Line := ALLTRIM(Line)

                                * Get Italic

				if HB_URIGHT ( HMG_UPPER (Line) , 7 ) == ' ITALIC'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 7 ) )
					_TbFontItalic := .T.
				Else
					_TbFontItalic := .F.
				EndIf

				Line := ALLTRIM(Line)

				* Get Bold

				if HB_URIGHT ( HMG_UPPER (Line) , 5 ) == ' BOLD'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 5 ) )
					_TbFontBold := .T.
				Else
					_TbFontBold := .F.
				EndIf

				* Get Size

				x := HB_UTF8RAT ( ' SIZE ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					_TbFontSize := VAL ( HB_USUBSTR ( Line , x + 6 , 255 ) )
					Line := HB_ULEFT ( Line , x )
				Else
					_TbFontSize := 9
				EndIf

				* Get Font

				Line := ALLTRIM(Line)

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( 'FONT "' , HMG_UPPER(Line) )

					if x > 0
						_TbFontName := ALLTRIM ( HB_USUBSTR ( Line , x + 6 , HMG_LEN(Line) - ( x + 6 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x - 1 ) )
					Else
						_TbFontName := 'Arial'
					EndIf

				Else
					_TbFontName := 'Arial'
				EndIf

				Line := ALLTRIM(Line)

				* Get StrictWidth

				if HB_URIGHT ( HMG_UPPER (Line) , 12 ) == ' STRICTWIDTH'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 12 ) )
					_TbStrictWidth := .T.
				Else
					_TbStrictWidth := .F.
				EndIf

				Line := ALLTRIM(Line)

				* Get ImageSize

				if 	HB_URIGHT ( Line , 1 ) == '0'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '1'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '2'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '3'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '4'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '5'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '6'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '7'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '8'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '9'

					x := HB_UTF8RAT ( ' IMAGESIZE ' , HMG_UPPER(Line) )

					if x == 0
						_TbButtonImageWidth	:= ''
						_TbButtonImageHeight	:= ''
					Else

						Numbers := ALLTRIM ( HB_USUBSTR ( Line , x + 11 , 255 ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )

						z := HB_UAT ( ',' , Numbers )

						_TbButtonImageWidth	:= ALLTRIM ( HB_ULEFT ( Numbers , z - 1 ) )
						_TbButtonImageHeight	:= ALLTRIM ( HB_URIGHT ( Numbers , HMG_LEN( Numbers ) - z ) )

					EndIf

				EndIf

				Line := ALLTRIM(Line)

				* Get ButtonSize

				Line := ALLTRIM(Line)

				if 	HB_URIGHT ( Line , 1 ) == '0'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '1'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '2'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '3'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '4'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '5'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '6'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '7'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '8'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '9'

					x := HB_UTF8RAT ( ' BUTTONSIZE ' , HMG_UPPER(Line) )

					_TbName := ALLTRIM ( HB_ULEFT ( Line , x ) )

					cTemp := ALLTRIM( HB_USUBSTR( Line , x+12 , 255 ) )

					x := HB_UAT ( ',' , cTemp )

					_TbButtonWidth := HB_ULEFT ( cTemp , x - 1 )

					_TbButtonHeight := HB_USUBSTR ( cTemp , x + 1 , 255 )

				Else

					_TbButtonWidth	:= '64'
					_TbButtonHeight	:= '64'

				EndIf

			Elseif HMG_UPPER (Line) = 'BUTTON '

				* Get Group

				if HB_URIGHT ( HMG_UPPER (Line) , 6 ) == ' GROUP'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) -6 ) )
					aadd ( _TbGroups , .T. )
				Else
					aadd ( _TbGroups , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get Check

				if HB_URIGHT ( HMG_UPPER (Line) , 6 ) == ' CHECK'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) -6 ) )
					aadd (  _TbChecks , .T. )
				Else
					aadd ( _TbChecks , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get WholeDropDown

				if HB_URIGHT ( HMG_UPPER (Line) , 14 ) == ' WHOLEDROPDOWN'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 14 ) )
					aadd (  _TbWholeDropDowns , .T. )
				Else
					aadd ( _TbWholeDropDowns , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get DropDown

				if HB_URIGHT ( HMG_UPPER (Line) , 9 ) == ' DROPDOWN'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 9 ) )
					aadd (  _TbDropDowns , .T. )
				Else
					aadd ( _TbDropDowns , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get AutoSize

				if HB_URIGHT ( HMG_UPPER (Line) , 9 ) == ' AUTOSIZE'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 9 ) )
					aadd ( _TbAutoSizes , .T. )
				Else
					aadd ( _TbAutoSizes , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get Separator

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' SEPARATOR'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					aadd ( _TbSeparators , .T. )
				Else
					aadd ( _TbSeparators , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get ToolTip

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' TOOLTIP "' , HMG_UPPER(Line) )

					if x > 0
						aadd ( _TbToolTips , ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						aadd( _TbToolTips , '' )
					EndIf

				Else
					aadd ( _TbToolTips , ''	)
				EndIf

				* Get Action

				x := HB_UTF8RAT ( ' ACTION ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					aadd ( _TbActions , HB_USUBSTR ( Line , x + 8 , 255 ) )
					Line := HB_ULEFT ( Line , x )
				Else
					aadd ( _TbActions , '' )
				EndIf

				Line := ALLTRIM(Line)

				* Get Picture

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' PICTURE "' , HMG_UPPER(Line) )

					if x > 0
						aadd ( _TbPictures , ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						aadd( _TbPictures , '' )
					EndIf

				Else
					aadd ( _TbPictures , ''	)
				EndIf

				* Get Caption

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' CAPTION "' , HMG_UPPER(Line) )

					if x > 0
						aadd ( _TbCaptions , ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						aadd( _TbCaptions , '' )
					EndIf

				Else
					aadd ( _TbCaptions , ''	)
				EndIf

				* Get Name

				Line := ALLTRIM(Line)

				Line := HB_URIGHT ( Line , HMG_LEN(Line) - 7 )

				Line := ALLTRIM(Line)

				aadd ( _TbNames , Line )

				aadd ( aList ,  Line )

			EndIf

		Next i

	EndIf

Return aList

*------------------------------------------------------------------------------*
Procedure BuildToolBar
*------------------------------------------------------------------------------*
Local i
Local Menu

	If Empty(_TbName)
		MsgStop( aMsgs [ 199 ] ,"HMG IDE")
		Return
	EndIf

	Menu := Space(4) + 'DEFINE TOOLBAR ' + _TbName

	if .Not. Empty (_TbButtonWidth) .and. .Not. Empty (_TbButtonHeight)
		Menu := Menu + ' BUTTONSIZE ' + ALLTRIM(_TbButtonWidth) + ',' + ALLTRIM(_TbButtonHeight)
	EndIf

	if .Not. Empty (_TbButtonImageWidth) .and. .Not. Empty (_TbButtonImageHeight)
		Menu := Menu + ' IMAGESIZE ' + ALLTRIM(_TbButtonImageWidth) + ',' + ALLTRIM(_TbButtonImageHeight)
	EndIf

	If _TbStrictWidth == .T.
		Menu := Menu + ' STRICTWIDTH'
	EndIf

	Menu := Menu + ' FONT ' + chr(34) + _TbFontName + chr(34)

	Menu := Menu + ' SIZE ' + ALLTRIM(STR(_TbFontSize))

	If _TbFontBold == .T.
		Menu := Menu + ' BOLD'
	EndIf

	If _TbFontItalic == .T.
		Menu := Menu + ' ITALIC'
	EndIf

	If _TbFontUnderLine == .T.
		Menu := Menu + ' UNDERLINE'
	EndIf

	If _TbFontStrikeout == .T.
		Menu := Menu + ' STRIKEOUT'
	EndIf

	If .Not. Empty(_TbToolTip)
		Menu := Menu + ' TOOLTIP ' +  + chr(34) + _TbToolTip + chr(34)
	EndIf

	If _TbFlat == .T.
		Menu := Menu + ' FLAT'
	EndIf

	If _TbBottom == .T.
		Menu := Menu + ' BOTTOM'
	EndIf

	If _TbRightText == .T.
		Menu := Menu + ' RIGHTTEXT'
	EndIf

	If _TbBorder == .T.
		Menu := Menu + ' BORDER'
	EndIf

	Menu := Menu + CRLF

	For i := 1 To TbDesigner.List1.ItemCount

		* Create Command

		* Button

		If Empty (_TbNames [i])
			MsgStop( aMsgs [ 143 ]  + " (Item: " + ALLTRIM(STR(i)) + ")" ,"HMG IDE")
			Return
		EndIf

		If _TbDropDowns[i] == .T. .and. _TbWholeDropDowns[i] == .T.
			MsgStop( aMsgs [ 144 ] + ALLTRIM(STR(i)) + ")","HMG IDE")
			Return
		EndIf

		if Empty ( _TbPictures[i] )
			MsgStop( aMsgs [ 145 ] + ALLTRIM(STR(i)) + ")","HMG IDE")
			Return
		endif

		Menu := Menu + Space(8) + 'BUTTON ' + _TbNames [i] ;
			+ if ( !Empty(_TbCaptions[i])	, ' CAPTION '	+ chr(34) + _TbCaptions[i] + chr(34) , '' ) ;
			+ if ( !Empty(_TbPictures[i])	, ' PICTURE '	+ chr(34) + _TbPictures[i] + chr(34) , '' ) ;
			+ if ( ((!Empty(_TbActions[i])) .and. (_TbWholeDropDowns[i] == .F.))	, ' ACTION '	+ _TbActions[i]	, '' ) ;
			+ if ( !Empty(_TbToolTips[i]) , ' TOOLTIP ' + chr(34) + _TbToolTips[i]	+ chr(34) , '' ) ;
			+ if ( _TbSeparators[i]	== .T. , ' SEPARATOR', '' ) ;
			+ if ( _TbAutoSizes[i]	== .T. , ' AUTOSIZE', '' ) ;
			+ if ( _TbDropDowns[i]	== .T. , ' DROPDOWN', '' ) ;
			+ if ( _TbWholeDropDowns[i] == .T. , ' WHOLEDROPDOWN', '' ) ;
			+ if ( _TbChecks[i]	== .T. , ' CHECK', '' ) ;
			+ if ( _TbGroups[i]	== .T. , ' GROUP', '' ) ;
			+ CRLF

	Next i

	Menu := Menu + Space(4) + 'END TOOLBAR' + CRLF

	_hmgide_CurrentToolBar := Menu

	DesignFormModified := .T.

	TbDesigner.Release

Return

*------------------------------------------------------------------------------*
Procedure TbProperties
*------------------------------------------------------------------------------*

	Define Window TbProperties ;
		At 0,0 ;
		Width 380 ;
		Height GetTitleHeight() + 310 + 2 ;
		Title aMsgs [ 146 ]  ;
		Modal ;
		NoSize

		ON KEY ESCAPE	Action	( ;
				ThisWindow.Release ;
				)

		Define Frame Frame1
			Row 9
			Col 10
			Width 235
			Height 286
		End Frame

		Define Label Label0
			Row 23
			Col 25
			Width 90
			Value aMsgs [ 147 ]
		End Label
		Define TextBox Text0
			Row 20
			Col 110
			Value _TbName
		End TextBox

		Define Label Label1
			Row 53
			Col 25
			Width 80
			Value aMsgs [ 148 ]
		End Label
		Define TextBox Text1
			Row 50
			Col 110
			Value _TbButtonWidth
		End TextBox

		Define Label Label2
			Row 83
			Col 25
			Width 80
			Value aMsgs [ 149 ]
		End Label
		Define TextBox Text2
			Row 80
			Col 110
			Value _TbButtonHeight
		End TextBox

		Define Label Label2a
			Row 113
			Col 25
			Width 85
			Value aMsgs [ 150 ]
		End Label
		Define TextBox Text2a
			Row 110
			Col 110
			Value _TbButtonImageWidth
		End TextBox

		Define Label Label2b
			Row 143
			Col 25
			Width 80
			Value aMsgs [ 151 ]
		End Label
		Define TextBox Text2b
			Row 140
			Col 110
			Value _TbButtonImageHeight
		End TextBox

		Define Label Label3
			Row 173
			Col 25
			Width 80
			Value 'ToolTip:'
		End Label
		Define TextBox Text3
			Row 170
			Col 110
			Value _TbToolTip
		End TextBox

		Define Label Label5
			Row 203
			Col 25
			Width 60
			Value 'Flat:'
		End Label
		Define CheckBox Check5
			Row 200
			Col 100
			Width 20
			Value _TbFlat
		End CheckBox

		Define Label Label6
			Row 233
			Col 25
			Width 50
			Value 'Bottom:'
		End Label
		Define CheckBox Check6
			Row 230
			Col 100
			Width 20
			Value _TbBottom
		End CheckBox

		Define Label Label7
			Row 203
			Col 145
			Width 50
			Value 'RightText:'
		End Label
		Define CheckBox Check7
			Row 200
			Col 215
			Width 20
			Value _TbRightText
		End CheckBox

		Define Label Label8
			Row 233
			Col 145
			Width 50
			Value 'Border:'
		End Label
		Define CheckBox Check8
			Row 230
			Col 215
			Width 20
			Value _TbBorder
		End CheckBox

		Define Label Label9
			Row 263
			Col 25
			Width 60
			Value 'StrictWidth:'
		End Label
		Define CheckBox Check9
			Row 260
			Col 100
			Width 20
			Value _TbStrictWidth
		End CheckBox

		Define Button Font
			Row 265
			Col 260
			Caption aMsgs [ 134 ]
			Action	TbFont()
		End Button

		* Ok / Cancel Buttons

		Define Button Ok
			Row 10
			Col 260
			Caption aMsgs [ 116 ]
			Action	( ;
				_TbName			:=  TbProperties.Text0.Value , ;
				_TbButtonWidth		:=  TbProperties.Text1.Value , ;
				_TbButtonHeight		:=  TbProperties.Text2.Value , ;
				_TbButtonImageWidth	:=  TbProperties.Text2a.Value , ;
				_TbButtonImageHeight	:=  TbProperties.Text2b.Value , ;
				_TbToolTip		:=  TbProperties.Text3.Value , ;
				_TbFlat			:=  TbProperties.Check5.Value , ;
				_TbBottom		:=  TbProperties.Check6.Value , ;
				_TbRightText		:=  TbProperties.Check7.Value , ;
				_TbBorder		:=  TbProperties.Check8.Value , ;
				_TbStrictWidth		:=  TbProperties.Check9.Value , ;
				_HMG_SYSDATA [ 257 ]	:= .F. , ;
				ThisWindow.Release ;
				)
		End Button
		Define Button Cancel
			Row 40
			Col 260
			Caption aMsgs [ 117 ]
			Action	( ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				ThisWindow.Release ;
				)
		End Button

	End Window

	setfocus ( GetControlHandle ( 'Text0' , 'TbProperties' ) )

	TbProperties.Center
	TbProperties.Activate

Return
*------------------------------------------------------------------------------*
Procedure TbFont
*------------------------------------------------------------------------------*
Local aTemp := {}

	aTemp := GetFont( _TbFontName , _TbFontSize , _TbFontBold , _TbFontItalic , {0,0,0} , _TbFontUnderLine , _TbFontStrikeout , Nil )

	If .Not. Empty ( aTemp [1] )
		_TbFontName		:= aTemp[1]
		_TbFontSize		:= aTemp[2]
		_TbFontBold		:= aTemp[3]
		_TbFontItalic		:= aTemp[4]
		_TbFontUnderLine	:= aTemp[6]
		_TbFontStrikeout	:= aTemp[7]
	EndIf

Return

*------------------------------------------------------------------------------*
Function IsControNameValid ( cNewName )
*------------------------------------------------------------------------------*
Local i
Local l
Local RetVal := .T.
local f := .f.
local c


	for i := 1 To HMG_LEN ( cNewName )

		c := HMG_UPPER ( HB_USUBSTR ( cNewName , i , 1 ) )

		if	c <> 'A'	;
			.AND.		;
			c <> 'B'	;
			.AND.		;
			c <> 'C'	;
			.AND.		;
			c <> 'D'	;
			.AND.		;
			c <> 'E'	;
			.AND.		;
			c <> 'F'	;
			.AND.		;
			c <> 'G'	;
			.AND.		;
			c <> 'H'	;
			.AND.		;
			c <> 'I'	;
			.AND.		;
			c <> 'J'	;
			.AND.		;
			c <> 'K'	;
			.AND.		;
			c <> 'L'	;
			.AND.		;
			c <> 'M'	;
			.AND.		;
			c <> 'N'	;
			.AND.		;
			c <> 'O'	;
			.AND.		;
			c <> 'P'	;
			.AND.		;
			c <> 'Q'	;
			.AND.		;
			c <> 'R'	;
			.AND.		;
			c <> 'S'	;
			.AND.		;
			c <> 'T'	;
			.AND.		;
			c <> 'U'	;
			.AND.		;
			c <> 'V'	;
			.AND.		;
			c <> 'W'	;
			.AND.		;
			c <> 'X'	;
			.AND.		;
			c <> 'Y'	;
			.AND.		;
			c <> 'Z'	;
			.AND.		;
			c <> '0'	;
			.AND.		;
			c <> '1'	;
			.AND.		;
			c <> '2'	;
			.AND.		;
			c <> '3'	;
			.AND.		;
			c <> '4'	;
			.AND.		;
			c <> '5'	;
			.AND.		;
			c <> '6'	;
			.AND.		;
			c <> '7'	;
			.AND.		;
			c <> '8'	;
			.AND.		;
			c <> '9'	;
			.AND.		;
			c <> '_'

			f := .t.
			exit

		endif

	next i

	if f == .t.
		return .f.
	endif

	l := HMG_LEN ( _HMG_SYSDATA [   2 ] )

	For i := 1 To l

		If HMG_UPPER(ALLTRIM(_HMG_SYSDATA [   2 ][i])) == HMG_UPPER(ALLTRIM(cNewName)) ;
			.And. ;
			_HMG_SYSDATA [   4 ] [i] == DesignFormhandle

			RetVal := .F.
			Exit
		EndIf

	Next i

Return ( RetVal )


*------------------------------------------------------------------------------*
Procedure BuildProjectM()
*------------------------------------------------------------------------------*
Local PROJECTFOLDER := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Projectname , HB_UTF8RAT ('\' , ProjectName ) - 1 ) ) )
Local i
Local item
Local appname

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf

	If Project.List_1.ItemCount == 0
		Return
	EndIf

	If _IsWindowDefined ( DesignForm )
		DoMethod ( DesignForm , 'Release' )
	EndIf

	SaveProject()

	if DebuggerSupport == .F.

		if MixedMode == .F.

			if Empty ( AddIncPaths )
				if ResetProjectInfo == .f.
					if ( empty (addlibs) , hmgmake ( Projectname , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				else
					if ( empty (addlibs) , hmgmake ( Projectname , '/F' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/F' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				endif
			else
				if ResetProjectInfo == .f.
					if ( empty (addlibs) , hmgmake ( Projectname , '/I:' + AddIncPaths , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/I:' + AddIncPaths , '/L:' + addlibs , '/H:' + MiniGUIFolder ) )
				else
					if ( empty (addlibs) , hmgmake ( Projectname , '/F' , '/I:' + AddIncPaths , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/F' , '/I:' + AddIncPaths , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				endif
			endif

		else

			if Empty ( AddIncPaths )
				if ResetProjectInfo == .f.
					if ( empty (addlibs) , hmgmake ( Projectname , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				else
					if ( empty (addlibs) , hmgmake ( Projectname , '/F' , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/F' , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				endif
			else
				if ResetProjectInfo == .f.
					if ( empty (addlibs) , hmgmake ( Projectname , '/I:' + AddIncPaths , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/I:' + AddIncPaths , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				else
					if ( empty (addlibs) , hmgmake ( Projectname , '/F' , '/I:' + AddIncPaths , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/F' , '/I:' + AddIncPaths , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				endif
			endif

		endif

	else

		if MixedMode == .F.

			if Empty ( AddIncPaths )
				if ResetProjectInfo == .f.
					if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				else
					if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/F' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/F' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				endif
			else
				if ResetProjectInfo == .f.
					if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/I:' + AddIncPaths, '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/I:' + AddIncPaths , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				else
					if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/F' , '/I:' + AddIncPaths , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/F' , '/I:' + AddIncPaths , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				endif
			endif

		else

			if Empty ( AddIncPaths )
				if ResetProjectInfo == .f.
					if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/C', '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				else
					if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/F' , '/C', '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/F' , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				endif
			else
				if ResetProjectInfo == .f.
					if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/I:' + AddIncPaths , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/I:' + AddIncPaths , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder ) )
				else
					if ( empty (addlibs) , hmgmake ( Projectname , '/D' , '/F' , '/I:' + AddIncPaths , '/C' , '/H:' + MiniGUIFolder) , hmgmake ( Projectname , '/D' , '/F' , '/I:' + AddIncPaths , '/C' , '/L:' + addlibs , '/H:' + MiniGUIFolder) )
				endif
			endif

		endif

	endif

	ResetProjectInfo := .F.

	For i := 1 To Project.List_1.ItemCount

		Item := HMG_UPPER ( ALLTRIM ( Project.List_1.Item (i) ) )

		if HB_URIGHT ( Item , 7 ) == ' (MAIN)'
			AppName := HB_ULEFT ( Item , HMG_LEN( Item ) - 11 ) + '.Exe'
			Exit
		endif

	Next i

   FormBuildLog.EditBox1.VALUE := HB_MEMOREAD (PROJECTFOLDER+"\build.log")
   FormBuildLog.EditBox1.VALUE := HB_UTF8STRTRAN (FormBuildLog.EditBox1.VALUE, CHR(10) , CRLF )   // ADD

Return

Procedure SplitBoxBuilder
local i
local l
local w

	if ! IsWindowDefined(&DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	if ! Empty ( _hmgide_CurrentToolBar )
		MsgStop ( aMsgs [ 171 ] ,'HMG IDE')
		Return
	endif

	DEFINE WINDOW 	spb	;
		AT	0,0	;
		WIDTH	400	;
		HEIGHT	290 + GetTitleHeight() + GetBorderHeight() + 3 ;
		TITLE	aMsgs [ 172 ] 	;
		MODAL

		DEFINE FRAME FRAME_1
			ROW	5
			COL	10
			WIDTH	260
			HEIGHT	205
			CAPTION	aMsgs [ 173 ]
		END FRAME

		DEFINE GRID LIST_1
			ROW	27
			COL	23
			WIDTH	234
			HEIGHT	170
			WIDTHS	{ 110 , 110 }
			HEADERS { aMsgs [ 174 ]  , aMsgs [ 175 ]  }
			ONCHANGE IF ( this.cell ( this.value , 2 ) = 'Window' , spb.button_2c.enabled := .F. , spb.button_2c.enabled := .T. )
			ONDBLCLICK Sp6()
		END GRID

		DEFINE FRAME FRAME_2
			ROW	215
			COL	10
			WIDTH	260
			HEIGHT	65
			CAPTION	aMsgs [ 176 ]
		END FRAME

		DEFINE CHECKBOX CHECK_1
			ROW	237
			COL	50
			CAPTION	'Bottom'
			VALUE	.F.
		END CHECKBOX

		DEFINE CHECKBOX CHECK_2
			ROW	237
			COL	150
			CAPTION	'Horizontal'
			VALUE	.F.
		END CHECKBOX

		DEFINE BUTTON BUTTON_1
			ROW	10
			COL	281
			CAPTION	aMsgs [ 177 ]
			ACTION	Sp1()
		END BUTTON

		DEFINE BUTTON BUTTON_2
			ROW	40
			COL	281
			CAPTION	aMsgs [ 178 ]
			ACTION	Sp2()
		END BUTTON

		DEFINE BUTTON BUTTON_2a
			ROW	70
			COL	281
			CAPTION	aMsgs [ 179 ]
			ACTION	sp4()
		END BUTTON

		DEFINE BUTTON BUTTON_2b
			ROW	100
			COL	281
			CAPTION	aMsgs [ 180 ]
			ACTION	Sp5()
		END BUTTON

		DEFINE BUTTON BUTTON_2c
			ROW	130
			COL	281
			CAPTION	aMsgs [ 181 ]
			ACTION	Sp6()
		END BUTTON

		DEFINE BUTTON BUTTON_3
			ROW	222
			COL	281
			CAPTION	aMsgs [ 116 ]
			ACTION	( Sp3() , ThisWindow.Release )
		END BUTTON

		DEFINE BUTTON BUTTON_4
			ROW	252
			COL	281
			CAPTION	aMsgs [ 117 ]
			ACTION	ThisWindow.Release
		END BUTTON

	END WINDOW

	CENTER WINDOW spb

	L := ALLTRIM ( MemoLine ( _hmgide_CurrentSplitBox , 1024 , 1 , 4 , .t. ) )

	IF 'BOTTOM' $ L
		SPB.CHECK_1.VALUE := .T.
	ENDIF

	IF 'HORIZONTAL' $ L
		SPB.CHECK_2.VALUE := .T.
	ENDIF

	for i := 1 to mlcount ( _hmgide_CurrentSplitBox )

		L := ALLTRIM ( MemoLine ( _hmgide_CurrentSplitBox , 1024 , i , 4 , .t. ) )

		if l = 'LOAD WINDOW '
			w := ALLTRIM ( HB_USUBSTR ( l , 13 , 255 ) )
			spb.list_1.additem ( { w , 'Window' } )
		elseif l = 'DEFINE BROWSE '
			w := ALLTRIM ( HB_USUBSTR ( l , 15 , 255 ) )
			spb.list_1.additem ( { w , 'Browse' } )
		elseif l = 'DEFINE COMBOBOX '
			w := ALLTRIM ( HB_USUBSTR ( l , 17 , 255 ) )
			spb.list_1.additem ( { w , 'ComboBox' } )
		elseif l = 'DEFINE EDITBOX '
			w := ALLTRIM ( HB_USUBSTR ( l , 16 , 255 ) )
			spb.list_1.additem ( { w , 'EditBox' } )
		elseif l = 'DEFINE GRID '
			w := ALLTRIM ( HB_USUBSTR ( l , 13 , 255 ) )
			spb.list_1.additem ( { w , 'Grid' } )
		elseif l = 'DEFINE LISTBOX '
			w := ALLTRIM ( HB_USUBSTR ( l , 16 , 255 ) )
			spb.list_1.additem ( { w , 'ListBox' } )
		elseif l = 'DEFINE RICHEDITBOX '
			w := ALLTRIM ( HB_USUBSTR ( l , 20 , 255 ) )
			spb.list_1.additem ( { w , 'RichEditBox' } )
		elseif l = 'DEFINE TOOLBAR '
			w := ALLTRIM ( HB_USUBSTR ( l , 16 , 255 ) )
			w := ALLTRIM ( HB_ULEFT ( w , HB_UAT( ' ' , w ) ) )
			spb.list_1.additem ( { w , 'ToolBar' } )
		elseif l = 'DEFINE TREE '
			w := ALLTRIM ( HB_USUBSTR ( l , 13 , 255 ) )
			w := ALLTRIM ( HB_ULEFT ( w , HB_UAT( ' ' , w ) ) )
			spb.list_1.additem ( { w , 'Tree' } )
		endif

	next i

	if spb.list_1.itemcount > 0
		spb.list_1.value := 1
	endif

	ACTIVATE WINDOW spb

	DoMethod ( DesignForm , 'SetFocus' )

	DrawGrid()

Return


procedure sp6
local i

	i := spb.list_1.value

	if i == 0
		return
	endif

	if HMG_UPPER ( ALLTRIM ( spb.list_1.cell ( i , 2 ) ) ) == 'TOOLBAR'
		_spx_ToolBarBuilder( ALLTRIM ( spb.list_1.cell ( i , 1 ) ) )
	elseif HMG_UPPER ( ALLTRIM ( spb.list_1.cell ( i , 2 ) ) ) == 'WINDOW'
		return
	else
		sp7 ( HMG_UPPER ( ALLTRIM ( spb.list_1.cell ( i , 2 ) ) ) , HMG_UPPER ( ALLTRIM ( spb.list_1.cell ( i , 1 ) ) ) )
	endif

return

procedure sp7 ( cType , cName )

	DEFINE WINDOW sp7 ;
		AT 0 , 0 ;
		WIDTH 232 ;
		HEIGHT 205 + GetTitleHeight() + GetBorderHeight() + 1 ;
		TITLE aMsgs [ 182 ]  + cName + ']' ;
		MODAL ;
		NOSIZE

		DEFINE TAB Tab_1 AT 4,3 WIDTH 220 HEIGHT 198

			PAGE aMsgs [ 183 ]

				DEFINE GRID Grid_1
					ROW	27
					COL	5
					WIDTH	208
					HEIGHT	164
					HEADERS	{ aMsgs [ 184 ] ,aMsgs [ 185 ] }
					WIDTHS	{115,72}
					ITEMS	{ {'',''},{'',''},{'',''},{'',''},{'',''} }
					FONTNAME 'Arial'
					FONTSIZE 9
					ON DBLCLICK sp8( cName , cType )
					TOOLTIP aMsgs [ 186 ]
				END GRID

			END PAGE

			PAGE aMsgs [ 187 ]

				DEFINE GRID Grid_2
					ROW	27
					COL	5
					WIDTH	208
					HEIGHT	164
					HEADERS	{ aMsgs [ 197 ] , aMsgs [ 198 ] }
					WIDTHS	{115,72}
					ITEMS	{ {'',''},{'',''},{'',''},{'',''},{'',''} }
					FONTNAME 'Arial'
					FONTSIZE 9
					ON DBLCLICK Sp8( cName , cType )
					TOOLTIP aMsgs [ 186 ]
				END GRID

			END PAGE

		END TAB

	END WINDOW

	If	cType == 'BROWSE'

		sp7.Grid_1.DeleteAllItems

		sp7.Grid_1.AddItem ( {'AllowAppend', __MVGET ( cName + 'AllowAppend' ) } )
		sp7.Grid_1.AddItem ( {'AllowDelete', __MVGET ( cName + 'AllowDelete' ) } )
		sp7.Grid_1.AddItem ( {'AllowEdit', __MVGET ( cName + 'AllowEdit' ) } )
		sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
		sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
		sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
		sp7.Grid_1.AddItem ( {'DynamicBackColor', __MVGET ( cName + 'DynamicBackColor' ) } )
		sp7.Grid_1.AddItem ( {'DynamicForeColor', __MVGET ( cName + 'DynamicForeColor' ) } )
		sp7.Grid_1.AddItem ( {'Fields',  __MVGET ( cName + 'Fields' ) } )
		sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
		sp7.Grid_1.AddItem ( {'FontColor', __MVGET ( cName + 'FontColor' ) } )
		sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
		sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
		sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
		sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
		sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
		sp7.Grid_1.AddItem ( {'Format', __MVGET ( cName + 'Format' ) } )
		sp7.Grid_1.AddItem ( {'Headers',  __MVGET ( cName + 'Headers' ) } )
		sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
		sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
		sp7.Grid_1.AddItem ( {'Image',  __MVGET ( cName + 'Image' ) } )
		sp7.Grid_1.AddItem ( {'InputMask',  __MVGET ( cName + 'InputMask' ) } )
		sp7.Grid_1.AddItem ( {'Justify',  __MVGET ( cName + 'Justify' ) } )
		sp7.Grid_1.AddItem ( {'Lines', __MVGET ( cName + 'Lines' ) } )
		sp7.Grid_1.AddItem ( {'Lock', __MVGET ( cName + 'Lock' ) } )
		sp7.Grid_1.AddItem ( {'Name', cName } )
		sp7.Grid_1.AddItem ( {'ReadOnlyFields',  __MVGET ( cName + 'ReadOnlyFields' ) } )
		sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
		sp7.Grid_1.AddItem ( {'Valid', __MVGET ( cName + 'Valid' ) } )
		sp7.Grid_1.AddItem ( {'ValidMessages', __MVGET ( cName + 'ValidMessages' ) } )
		sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
		sp7.Grid_1.AddItem ( {'vScrollBar',  __MVGET ( cName + 'vScrollBar' ) } )
		sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
		sp7.Grid_1.AddItem ( {'When', __MVGET ( cName + 'When' ) } )
		sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )
		sp7.Grid_1.AddItem ( {'Widths',  __MVGET ( cName + 'Widths' ) } )
		sp7.Grid_1.AddItem ( {'WorkArea',  __MVGET ( cName + 'WorkArea' ) } )

		sp7.Grid_2.DeleteAllItems

		sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
		sp7.Grid_2.AddItem ( {'OnDblClick', __MVGET ( cName + 'OnDblClick' ) } )
		sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
		sp7.Grid_2.AddItem ( {'OnHeadClick', __MVGET ( cName + 'OnHeadClick' ) } )
		sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

		elseIf	cType == 'COMBOBOX'

		sp7.Grid_1.DeleteAllItems
		sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
		sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
		sp7.Grid_1.AddItem ( {'DisplayEdit', __MVGET ( cName + 'DisplayEdit' ) } )
		sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
		sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
		sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
		sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
		sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
		sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
		sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
		sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
		sp7.Grid_1.AddItem ( {'Items',  __MVGET ( cName + 'Items' ) } )
		sp7.Grid_1.AddItem ( {'ItemSource',  __MVGET ( cName + 'ItemSource' ) } )
		sp7.Grid_1.AddItem ( {'Name',cName } )
		sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
		sp7.Grid_1.AddItem ( {'Sort', __MVGET ( cName + 'Sort' ) } )
		sp7.Grid_1.AddItem ( {'TabStop', __MVGET ( cName + 'TabStop' ) } )
		sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
		sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
		sp7.Grid_1.AddItem ( {'ValueSource',  __MVGET ( cName + 'ValueSource' ) } )
		sp7.Grid_1.AddItem ( {'Visible', __MVGET ( cName + 'Visible' ) } )
		sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

		sp7.Grid_2.DeleteAllItems
		sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
		sp7.Grid_2.AddItem ( {'OnDisplayChange', __MVGET ( cName + 'OnDisplayChange' ) } )
		sp7.Grid_2.AddItem ( {'OnEnter', __MVGET ( cName + 'OnEnter' ) } )
		sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
		sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

		elseIf	cType == 'EDITBOX'

		sp7.Grid_1.DeleteAllItems
		sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
		sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
		sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
		sp7.Grid_1.AddItem ( {'Field', __MVGET ( cName + 'Field' ) } )
		sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
		sp7.Grid_1.AddItem ( {'FontColor', __MVGET ( cName + 'FontColor' ) } )
		sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
		sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
		sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
		sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
		sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
		sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
		sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
		sp7.Grid_1.AddItem ( {'HScrollBar', __MVGET ( cName + 'hScrollBar' ) } )
		sp7.Grid_1.AddItem ( {'MaxLength', __MVGET ( cName + 'MaxLength' ) } )
		sp7.Grid_1.AddItem ( {'Name',cName } )
		sp7.Grid_1.AddItem ( {'ReadOnly',  __MVGET ( cName + 'ReadOnly' ) } )
		sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
		sp7.Grid_1.AddItem ( {'TabStop', __MVGET ( cName + 'TabStop' ) } )
		sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
		sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
		sp7.Grid_1.AddItem ( {'Visible', __MVGET ( cName + 'Visible' ) } )
		sp7.Grid_1.AddItem ( {'VScrollBar', __MVGET ( cName + 'VScrollBar' ) } )
		sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

		sp7.Grid_2.DeleteAllItems
		sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
		sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
		sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

		elseIf	cType == 'LISTBOX'

		sp7.Grid_1.DeleteAllItems
		sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
		sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
		sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
		sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
		sp7.Grid_1.AddItem ( {'FontColor', __MVGET ( cName + 'FontColor' ) } )
		sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
		sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
		sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
		sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
		sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
		sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
		sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
		sp7.Grid_1.AddItem ( {'Items',  __MVGET ( cName + 'Items' ) } )
		sp7.Grid_1.AddItem ( {'MultiSelect',  __MVGET ( cName + 'MultiSelect' ) } )
		sp7.Grid_1.AddItem ( {'Name',cName } )
		sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
		sp7.Grid_1.AddItem ( {'Sort', __MVGET ( cName + 'Sort' ) } )
		sp7.Grid_1.AddItem ( {'TabStop', __MVGET ( cName + 'TabStop' ) } )
		sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
		sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
		sp7.Grid_1.AddItem ( {'Visible', __MVGET ( cName + 'Visible' ) } )
		sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

		sp7.Grid_2.DeleteAllItems
		sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
		sp7.Grid_2.AddItem ( {'OnDblClick', __MVGET ( cName + 'OnDblClick' ) } )
		sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
		sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

		elseIf	cType == 'GRID'

		sp7.Grid_1.DeleteAllItems
		sp7.Grid_1.AddItem ( {'AllowEdit', __MVGET ( cName + 'AllowEdit' ) } )
		sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
		sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
		sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
		sp7.Grid_1.AddItem ( {'ColumnControls', __MVGET ( cName + 'ColumnControls' ) } )
		sp7.Grid_1.AddItem ( {'ColumnValid', __MVGET ( cName + 'ColumnValid' ) } )
		sp7.Grid_1.AddItem ( {'ColumnWhen', __MVGET ( cName + 'ColumnWhen' ) } )
		sp7.Grid_1.AddItem ( {'DynamicBackColor', __MVGET ( cName + 'DynamicBackColor' ) } )
		sp7.Grid_1.AddItem ( {'DynamicForeColor', __MVGET ( cName + 'DynamicForeColor' ) } )
		sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
		sp7.Grid_1.AddItem ( {'FontColor', __MVGET ( cName + 'FontColor' ) } )
		sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
		sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
		sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
		sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
		sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
		sp7.Grid_1.AddItem ( {'Headers',  __MVGET ( cName + 'Headers' ) } )
		sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
		sp7.Grid_1.AddItem ( {'HelpId',  __MVGET ( cName + 'HelpId' ) } )
		sp7.Grid_1.AddItem ( {'Image',  __MVGET ( cName + 'Image' ) } )
		sp7.Grid_1.AddItem ( {'ItemCount',  __MVGET ( cName + 'ItemCount' ) } )
		sp7.Grid_1.AddItem ( {'Items',  __MVGET ( cName + 'Items' ) } )
		sp7.Grid_1.AddItem ( {'Justify',  __MVGET ( cName + 'Justify' ) } )
		sp7.Grid_1.AddItem ( {'Lines', __MVGET ( cName + 'Lines' ) } )
		sp7.Grid_1.AddItem ( {'MultiSelect',  __MVGET ( cName + 'MultiSelect' ) } )
		sp7.Grid_1.AddItem ( {'Name',cName } )
		sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
		sp7.Grid_1.AddItem ( {'ShowHeaders', __MVGET ( cName + 'ShowHeaders' ) } )
		sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
		sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
		sp7.Grid_1.AddItem ( {'Virtual',  __MVGET ( cName + 'Virtual' ) } )
		sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )
		sp7.Grid_1.AddItem ( {'Widths',  __MVGET ( cName + 'Widths' ) } )

		sp7.Grid_2.DeleteAllItems
		sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
		sp7.Grid_2.AddItem ( {'OnDblClick', __MVGET ( cName + 'OnDblClick' ) } )
		sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
		sp7.Grid_2.AddItem ( {'OnHeadClick', __MVGET ( cName + 'OnHeadClick' ) } )
		sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )
		sp7.Grid_2.AddItem ( {'OnQueryData', __MVGET ( cName + 'OnQueryData' ) } )

		elseIf	cType == 'RICHEDITBOX'

		sp7.Grid_1.DeleteAllItems

		sp7.Grid_1.AddItem ( {'BackColor', __MVGET ( cName + 'BackColor' ) } )
		sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
		sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
		sp7.Grid_1.AddItem ( {'Field', __MVGET ( cName + 'Field' ) } )
		sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
		sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
		sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
		sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
		sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
		sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
		sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
		sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
		sp7.Grid_1.AddItem ( {'MaxLength', __MVGET ( cName + 'MaxLength' ) } )
		sp7.Grid_1.AddItem ( {'Name',cName } )
		sp7.Grid_1.AddItem ( {'ReadOnly',  __MVGET ( cName + 'ReadOnly' ) } )
		sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
		sp7.Grid_1.AddItem ( {'TabStop', __MVGET ( cName + 'TabStop' ) } )
		sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
		sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
		sp7.Grid_1.AddItem ( {'Visible', __MVGET ( cName + 'Visible' ) } )
		sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

		sp7.Grid_2.DeleteAllItems
		sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
		sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
		sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

		elseIf	cType == 'TREE'

		sp7.Grid_1.DeleteAllItems
		sp7.Grid_1.AddItem ( {'Break', __MVGET ( cName + 'Break' ) } )
		sp7.Grid_1.AddItem ( {'Col', __MVGET ( cName + 'Col' ) } )
		sp7.Grid_1.AddItem ( {'FontBold', __MVGET ( cName + 'FontBold' ) } )
		sp7.Grid_1.AddItem ( {'FontItalic', __MVGET ( cName + 'FontItalic' ) } )
		sp7.Grid_1.AddItem ( {'FontName', __MVGET ( cName + 'FontName' ) } )
		sp7.Grid_1.AddItem ( {'FontUnderLine', __MVGET ( cName + 'FontUnderLine' ) } )
		sp7.Grid_1.AddItem ( {'FontSize', __MVGET ( cName + 'FontSize' ) } )
		sp7.Grid_1.AddItem ( {'FontStrikeOut', __MVGET ( cName + 'FontStrikeOut' ) } )
		sp7.Grid_1.AddItem ( {'Height',  __MVGET ( cName + 'Height' ) } )
		sp7.Grid_1.AddItem ( {'HelpId', __MVGET ( cName + 'HelpId' ) } )
		sp7.Grid_1.AddItem ( {'ItemIds', __MVGET ( cName + 'ItemIds' ) } )
		sp7.Grid_1.AddItem ( {'ItemImages', __MVGET ( cName + 'ItemImages' ) } )
		sp7.Grid_1.AddItem ( {'Name',cName } )
		sp7.Grid_1.AddItem ( {'NodeImages', __MVGET ( cName + 'NodeImages' ) } )
		sp7.Grid_1.AddItem ( {'RootButton', __MVGET ( cName + 'RootButton' ) } )
		sp7.Grid_1.AddItem ( {'Row',  __MVGET ( cName + 'Row' ) } )
		sp7.Grid_1.AddItem ( {'ToolTip', __MVGET ( cName + 'ToolTip' ) } )
		sp7.Grid_1.AddItem ( {'Value',  __MVGET ( cName + 'Value' ) } )
		sp7.Grid_1.AddItem ( {'Width',  __MVGET ( cName + 'Width' ) } )

		sp7.Grid_2.DeleteAllItems
		sp7.Grid_2.AddItem ( {'OnChange', __MVGET ( cName + 'OnChange' ) } )
		sp7.Grid_2.AddItem ( {'OnDblClick', __MVGET ( cName + 'OnDblClick' ) } )
		sp7.Grid_2.AddItem ( {'OnGotFocus', __MVGET ( cName + 'OnGotFocus' ) } )
		sp7.Grid_2.AddItem ( {'OnLostFocus', __MVGET ( cName + 'OnLostFocus' ) } )

	endif

	CENTER WINDOW sp7

	ACTIVATE WINDOW sp7

return

procedure sp8 ( cControlName , cType )
Local cName , cValue , Result
Local PropertyName
Local SelectedControlType
Local aRow

	cName := this.cell ( this.value , 1 )
	cValue := this.cell ( this.value , 2 )

	if cName = 'Name' .or. cName = 'Col' .or. cName = 'Row'
		PlayHand()
		Return
	endif

	PropertyName := ALLTRIM(HMG_UPPER(cName))

	SelectedControlType := ALLTRIM(HMG_UPPER(cType))

	aRow := { cName , cValue }

	If	PropertyName == 'VISIBLE' ;
		.Or. ;
		PropertyName == 'HANDCURSOR' ;
		.Or. ;
		PropertyName == 'FLAT' ;
		.Or. ;
		PropertyName == 'SHOWHEADERS' ;
		.Or. ;
		PropertyName == 'BREAK' ;
		.Or. ;
		PropertyName == 'FOCUSED' ;
		.Or. ;
		PropertyName == 'TITLEBAR' ;
		.Or. ;
		PropertyName == 'SYSMENU' ;
		.Or. ;
		PropertyName == 'SIZABLE' ;
		.Or. ;
		PropertyName == 'MAXBUTTON' ;
		.Or. ;
		PropertyName == 'MINBUTTON' ;
		.Or. ;
		PropertyName == 'AUTORELEASE' ;
		.Or. ;
		PropertyName == 'TOPMOST' ;
		.Or. ;
		PropertyName == 'HELPBUTTON' ;
		.Or. ;
		PropertyName == 'VERTICAL' ;
		.Or. ;
		PropertyName == 'HOTTRACK' ;
		.Or. ;
		PropertyName == 'BUTTONS' ;
		.Or. ;
		PropertyName == 'CENTER' ;
		.Or. ;
		PropertyName == 'AUTOPLAY' ;
		.Or. ;
		PropertyName == 'SMOOTH' ;
		.Or. ;
		PropertyName == 'TODAY' ;
		.Or. ;
		PropertyName == 'TODAYCIRCLE' ;
		.Or. ;
		PropertyName == 'WEEKNUMBERS' ;
		.Or. ;
		PropertyName == 'AUTOSIZEWINDOW' ;
		.Or. ;
		PropertyName == 'AUTOSIZEMOVIE' ;
		.Or. ;
		PropertyName == 'ERRORDLG' ;
		.Or. ;
		PropertyName == 'MENU' ;
		.Or. ;
		PropertyName == 'OPEN' ;
		.Or. ;
		PropertyName == 'PLAYBAR' ;
		.Or. ;
		PropertyName == 'SHOWALL' ;
		.Or. ;
		PropertyName == 'SHOWMODE' ;
		.Or. ;
		PropertyName == 'SHOWNAME' ;
		.Or. ;
		PropertyName == 'SHOWPOSITION' ;
		.Or. ;
		PropertyName == 'FONTBOLD' ;
		.Or. ;
		PropertyName == 'LOCK' ;
		.Or. ;
		PropertyName == 'VSCROLLBAR' ;
		.Or. ;
		PropertyName == 'HSCROLLBAR' ;
		.Or. ;
		PropertyName == 'FONTITALIC' ;
		.Or. ;
		PropertyName == 'FONTUNDERLINE' ;
		.Or. ;
		PropertyName == 'FONTSTRIKEOUT' ;
		.Or. ;
		PropertyName == 'TABSTOP' ;
		.Or. ;
		PropertyName == 'TRANSPARENT' ;
		.Or. ;
		PropertyName == 'MULTISELECT' ;
		.Or. ;
		PropertyName == 'SORT' ;
		.Or. ;
		PropertyName == 'DISPLAYEDIT' ;
		.Or. ;
		PropertyName == 'ALLOWEDIT' ;
		.Or. ;
		PropertyName == 'ALLOWAPPEND' ;
		.Or. ;
		PropertyName == 'ALLOWDELETE' ;
		.Or. ;
		PropertyName == 'LINES' ;
		.Or. ;
		PropertyName == 'VIRTUAL' ;
		.Or. ;
		PropertyName == 'READONLY' ;
		.Or. ;
		PropertyName == 'WRAP' ;
		.Or. ;
		PropertyName == 'STRETCH' ;
		.Or. ;
		PropertyName == 'RIGHTALIGN' ;
		.Or. ;
		PropertyName == 'SHOWNONE' ;
		.Or. ;
		PropertyName == 'ROOTBUTTON' ;
		.Or. ;
		PropertyName == 'UPDOWN' ;
		.Or. ;
		PropertyName == 'PASSWORD' ;
		.Or. ;
		PropertyName == 'AUTOSIZE' ;
		.Or. ;
		PropertyName == 'VIRTUAL SIZED' ;
		.Or. ;
		PropertyName == 'ITEMIDS' ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'CHECKBOX' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'CHECKBUTTON' )

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ]  , aRow [1] + ':' , { '.T.' , '.F.' } , aRow [2] ) )

	ElseIf	PropertyName == 'CASECONVERT'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'LOWER' , 'NONE' , 'UPPER' } , aRow [2] ) )

	ElseIf	PropertyName == 'ALIGNMENT'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'LEFT' , 'RIGHT' , 'CENTER' } , aRow [2] ) )

	ElseIf	PropertyName == 'ROW' ;
		.Or. ;
		PropertyName == 'COL' ;
		.Or. ;
		PropertyName == 'WIDTH' ;
		.Or. ;
		PropertyName == 'VIRTUAL WIDTH' ;
		.Or. ;
		PropertyName == 'VIRTUAL HEIGHT' ;
		.Or. ;
		PropertyName == 'SPACING' ;
		.Or. ;
		PropertyName == 'HEIGHT' ;
		.Or. ;
		PropertyName == 'RANGEMAX' ;
		.Or. ;
		PropertyName == 'RANGEMIN' ;
		.Or. ;
		PropertyName == 'INCREMENT' ;
		.Or. ;
		PropertyName == 'FONTSIZE' ;
		.Or. ;
		PropertyName == 'PAGECOUNT' ;
		.Or. ;
		PropertyName == 'INTERVAL' ;
		.Or. ;
		PropertyName == 'MAXLENGTH' ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'BROWSE' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'GRID' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'TAB' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'TREE' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'RADIOGROUP' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'COMBOBOX' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'SLIDER' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'SPINNER' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'PROGRESSBAR' ) ;
		.Or. ;
		( PropertyName == 'VALUE' .And. SelectedControlType == 'LISTBOX' )

		Result := ALLTRIM ( PickNumericPropertyValue ( 'Edit' , aRow [1] + ':' , aRow [2] ) )

	ElseIf PropertyName == 'WINDOWTYPE'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'CHILD' , 'MAIN' , 'MODAL' , 'SPLITCHILD' , 'STANDARD' , 'PANEL' } , aRow [2] ) )

	ElseIf PropertyName == 'HELPBUTTON'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'CHILD' , 'MAIN' , 'MODAL' , 'SPLITCHILD' , 'STANDARD' , 'PANEL' } , aRow [2] ) )

	ElseIf PropertyName == 'DATATYPE'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'CHARACTER' , 'DATE' , 'NUMERIC' } , aRow [2] ) )

	ElseIf PropertyName == 'ORIENTATION'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'HORIZONTAL' , 'VERTICAL' } , aRow [2] ) )

	ElseIf PropertyName == 'TICKMARKS' .And. ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlname + 'Orientation' ) ) ) == 'HORIZONTAL'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'BOTH' , 'BOTTOM' ,  'NONE' , 'TOP' } , aRow [2] ) )

	ElseIf PropertyName == 'TICKMARKS' .And. ALLTRIM ( HMG_UPPER ( __MVGET ( SelectedControlname + 'Orientation' ) ) ) == 'VERTICAL'

		Result := ALLTRIM ( PickPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , { 'BOTH' , 'LEFT' , 'NONE' , 'RIGHT' } , aRow [2] ) )

	ElseIf PropertyName == 'BACKCOLOR'

		Result := PickColorValue()

	ElseIf PropertyName == 'FONTCOLOR'

		Result := PickColorValue()

	ElseIf PropertyName == 'FORECOLOR'

		Result := PickColorValue()

	Else

		Result := ALLTRIM ( PickCharacterPropertyValue ( aMsgs [ 188 ] , aRow [1] + ':' , aRow [2] ) )

	EndIf

	if _HMG_SYSDATA [ 257 ] == .T.
		Return
	else
		this.cell ( this.value , 2 ) := ALLTRIM ( Result )
		__MVPUT ( cControlName + cName , Result )

	endif

return

procedure Sp1
local n
local i
Local aTemp
Local t
Local cNewToolBar

	aTemp := GetChild()

	n := aTemp [2]
	t := aTemp [1]

	if t == 0
		return
	endif

	if t == 1

		if HB_URIGHT ( HMG_UPPER ( n ) , 4 ) == '.FMG'
			n := HB_ULEFT ( n , HMG_LEN (n) - 4 )
		endif

		for i := 1 to spb.list_1.itemcount
			if ALLTRIM(HMG_UPPER( spb.list_1.Cell ( i , 2 ) ) ) == 'WINDOW'
				if ALLTRIM(HMG_UPPER(n)) == ALLTRIM(HMG_UPPER( spb.list_1.Cell ( i , 1 ) ) )
					msgstop( aMsgs [ 189 ] ,'HMG IDE')
					return
				endif
			endif
		next i

		spb.list_1.additem ( { n , 'Window' } )

	elseif t == 2

		if ! iscontrolinsplit(n)

			spb.list_1.additem ( { n , 'Browse' } )

			* Browse Properties

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowAppend' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowAppend' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowDelete' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowDelete' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fields' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fields' , "{''}" )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fontname' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Format' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Format' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' , "{''}" )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'InputMask' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'InputMask' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lock' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lock' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnlyFields' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnlyFields' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Valid' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Valid' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValidMessages' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValidMessages' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'When' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'When' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' , '{0}' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'WorkArea' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'WorkArea' , 'Nil' )

			* Browse Events

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

		endif

	elseif t == 3

		if ! iscontrolinsplit(n)

			spb.list_1.additem ( { n , 'ComboBox' } )

			* ComboBox Properties

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DisplayEdit' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DisplayEdit' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '100' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' , '{""}' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemSource' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemSource' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValueSource' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValueSource' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '100' )

			* ComboBox Events

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDisplayChange' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDisplayChange' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnEnter' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnEnter' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

		endif

	elseif t == 4

		if ! iscontrolinsplit(n)

			spb.list_1.additem ( { n , 'EditBox' } )

			* EditBox Properties

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'hScrollBar' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'hScrollBar' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

			* EditBox Events

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

		endif

	elseif t == 5

		if ! iscontrolinsplit(n)

			spb.list_1.additem ( { n , 'ListBox' } )

			* ListBox Properties

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '100' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' , '{""}' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '100' )

			* ListBox Events

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

		endif

	elseif t == 6

		if ! iscontrolinsplit(n)

			spb.list_1.additem ( { n , 'Grid' } )

			* Grid Properties

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnControls' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnControls' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnValid' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnValid' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnWhen' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnWhen' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' , "{''}" )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemCount' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemCount' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' , '{ {""} }' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Name' , n )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ShowHeaders' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ShowHeaders' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Virtual' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Virtual' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' , '{ 0 }' )

			* Grid Events

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnQueryData' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnQueryData' , 'Nil' )

		endif

	elseif t == 7

		if ! iscontrolinsplit(n)

			spb.list_1.additem ( { n , 'RichEditBox' } )

			* RichEditBox Properties

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fontname' , 'Arial' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

			* RichEditBox Events

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

		endif

	elseif t == 8

		if ! iscontrolinsplit(n)

			spb.list_1.additem ( { n , 'ToolBar' } )

			cNewToolBar := ''
			cNewToolBar := cNewToolBar + Space(8) + 'DEFINE TOOLBAR ' + N + ' BUTTONSIZE 64,64 FONT "Arial" SIZE 9 FLAT ' + CRLF
			cNewToolBar := cNewToolBar + Space (12) + 'BUTTON ' + N + '_Btn1' + ' CAPTION "" PICTURE "MINIGUI_EDIT_NEW" ACTION Nil TOOLTIP ""'+ CRLF
			cNewToolBar := cNewToolBar + Space (8) + 'END TOOLBAR' + CRLF

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'SpxToolBar' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'SpxToolBar' , cNewToolBar )

		endif

	elseif t == 9

		if ! iscontrolinsplit(n)

			spb.list_1.additem ( { n , 'Tree' } )

			* Tree Properties

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' , 'Arial' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' , '9' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' , '120' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemIds' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemIds' , '.F.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemImages' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemImages' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'NodeImages' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'NodeImages' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'RootButton' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'RootButton' , '.T.' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' , '' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' , '0' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' , '120' )

			* Tree Events

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' , 'Nil' )

			__MVPUBLIC ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )
			__MVPUT ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' , 'Nil' )

		endif

	endif

return

function iscontrolinsplit(n)
local i

	for i := 1 to spb.list_1.itemcount
		if ALLTRIM(HMG_UPPER( spb.list_1.Cell ( i , 2 ) ) ) != 'WINDOW'
			if ALLTRIM(HMG_UPPER(n)) == ALLTRIM(HMG_UPPER( spb.list_1.Cell ( i , 1 ) ) )
				msgstop( aMsgs [ 190 ] ,'HMG IDE')
				return .t.
			endif
		endif
	next i

return .f.

function GetChild()
local retval := { 0 , '' }

	define window sp9 at 0,0 width 302 height 395 + If ( IsAppThemed() , 7 , 0 ) + if( IsVista()  .And. IsAppThemed() , 6 , 0 ) title aMsgs [ 194 ] modal

		define frame frame1
			row 10
			col 10
			width 270
			height 250
			caption aMsgs [ 191 ]
		end frame

		define radiogroup radio1
			row 26
			col 40
			options { 'Window' , 'Browse' , 'ComboBox' , 'EditBox' , 'ListBox' , 'Grid' , 'RichEditBox' , 'ToolBar' , 'Tree' }
			OnChange sp9.text1.setfocus
			value 1
		end radiogroup

		define frame frame2
			row 265
			col 10
			width 270
			height 55
			caption aMsgs [ 174 ]
		end frame

		define textbox text1
			row 284
			col 22
			width 241
			value ''
		end textbox

		define button ok
			row 330
			col 45
			caption aMsgs [ 116 ]
			action if ( empty ( sp9.text1.value ) , ( MsgStop( aMsgs [ 192 ] ,'HMG IDE') , sp9.text1.setfocus ) , ( RetVal := { sp9.radio1.value , sp9.text1.value } , ThisWindow.Release ) )
		end button

		define button cancel
			row 330
			col 155
			caption aMsgs [ 117 ]
			action ( RetVal := { 0 , '' } , ThisWindow.Release )
		end button

	end window

	center window sp9

	sp9.text1.setfocus

	activate window sp9

return retval

procedure Sp2
local i

	i := spb.list_1.value

	if i == 0
		msgstop( aMsgs [ 193 ] ,'HMG IDE')
		return
	endif

	if ! msgyesno( aMsgs [ 099 ] ,'HMG IDE')
		return
	endif

	spb.list_1.deleteitem (i)

return

procedure Sp3
local c := ''
local i
local n

	if spb.list_1.itemcount == 0
		_hmgide_CurrentSplitBox := ''
		return
	endif

	c := c + space(4) + 'DEFINE SPLITBOX'

	if spb.check_1.value == .t.
		c := c +  ' BOTTOM'
	endif

	if spb.check_2.value == .t.
		c := c + ' HORIZONTAL'
	endif

	c := c + CRLF

	for i := 1 to spb.list_1.itemcount

		n := ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,1) ) )

		if ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'WINDOW'

			c := c + CRLF

			c := c + space (8) + 'LOAD WINDOW ' + spb.list_1.cell(i,1) + CRLF

		elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'BROWSE'

			c := c + CRLF

			c := c + space (8) + 'DEFINE BROWSE ' + spb.list_1.cell(i,1) + CRLF

			* Browse Properties

			c := c + space (12) + 'ALLOWAPPEND ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowAppend'  )  + CRLF

			c := c + space (12) + 'ALLOWDELETE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowDelete'  )  + CRLF

			c := c + space (12) + 'ALLOWEDIT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit'  )  + CRLF

			c := c + space (12) + 'BACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

			c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

			c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col'  )  + CRLF

			c := c + space (12) + 'DYNAMICBACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' )  + CRLF

			c := c + space (12) + 'DYNAMICFORECOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' )  + CRLF

			c := c + space (12) + 'FIELDS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fields' )  + CRLF

			c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

			c := c + space (12) + 'FONTCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )  + CRLF

			c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

			c := c + space (12) + 'FONTNAME "' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName'  ) + '"' + CRLF

			c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

			c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize'  )  + CRLF

			c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

			c := c + space (12) + 'FORMAT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Format' )  + CRLF

			c := c + space (12) + 'HEADERS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' )  + CRLF

			c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height'  )  + CRLF

			c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId'  )  + CRLF

			c := c + space (12) + 'IMAGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image'  )  + CRLF

			c := c + space (12) + 'INPUTMASK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'InputMask' )  + CRLF

			c := c + space (12) + 'JUSTIFY ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' )  + CRLF

			IF HMG_UPPER ( ALLTRIM ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' ) ) ) == '.T.'
				c := c + space (12) + 'NOLINES .F.'   + CRLF
			ELSE
				c := c + space (12) + 'NOLINES .T.' + CRLF
			ENDIF

			c := c + space (12) + 'LOCK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lock' )  + CRLF

			c := c + space (12) + 'READONLYFIELDS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnlyFields' )  + CRLF

			c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

			c := c + space (12) + 'VALID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Valid' )  + CRLF

			c := c + space (12) + 'VALIDMESSAGES ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValidMessages' )  + CRLF

			c := c + space (12) + 'VALUE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + CRLF

			c := c + space (12) + 'VSCROLLBAR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' )  + CRLF

			c := c + space (12) + 'TOOLTIP "' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

			c := c + space (12) + 'WHEN ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'When' )  + CRLF

			c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

			c := c + space (12) + 'WIDTHS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths'  )  + CRLF

			c := c + space (12) + 'WORKAREA ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'WorkArea' )  + CRLF

			* Browse Events

			c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

			c := c + space (12) + 'ONDBLCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )  + CRLF

			c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus'  )  + CRLF

			c := c + space (12) + 'ONHEADCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' )  + CRLF

			c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF


			c := c + space (8) + 'END BROWSE' + CRLF

		elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'COMBOBOX'

			c := c + CRLF

			c := c + space (8) + 'DEFINE COMBOBOX ' + spb.list_1.cell(i,1) + CRLF

			* ComboBox Properties

			c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

			c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col'  )  + CRLF

			c := c + space (12) + 'DISPLAYEDIT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DisplayEdit' )  + CRLF

			c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

			c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

			c := c + space (12) + 'FONTNAME ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + '"' + CRLF

			c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

			c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

			c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

			c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

			c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

			c := c + space (12) + 'ITEMS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )  + CRLF

			IF HMG_UPPER ( ALLTRIM ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemSource' ) ) ) <> 'NIL'
				c := c + space (12) + 'ITEMSOURCE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemSource' )  + CRLF
			ENDIF

			c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

			c := c + space (12) + 'SORT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' )  + CRLF

			c := c + space (12) + 'TABSTOP ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )  + CRLF

			c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"'  + CRLF

			c := c + space (12) + 'VALUE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + CRLF

			IF ! EMPTY ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValueSource' ) )
				c := c + space (12) + 'VALUESOURCE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ValueSource' )  + CRLF
			ENDIF

			c := c + space (12) + 'VISIBLE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )  + CRLF

			c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

			* ComboBox Events

			c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

			c := c + space (12) + 'ONDISPLAYCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDisplayChange' )  + CRLF

			c := c + space (12) + 'ONENTER ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnEnter' )  + CRLF

			c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

			c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF


			c := c + space (8) + 'END COMBOBOX' + CRLF

		elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'EDITBOX'

			c := c + CRLF

			c := c + space (8) + 'DEFINE EDITBOX ' + spb.list_1.cell(i,1) + CRLF

			* EditBox Properties

			c := c + space (12) + 'BACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

			c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

			c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )  + CRLF

			IF ALLTRIM ( HMG_UPPER ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' ) ) ) <> 'NIL'
				c := c + space (12) + 'FIELD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' )  + CRLF
			ENDIF

			c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

			c := c + space (12) + 'FONTCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )  + CRLF

			c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

			c := c + space (12) + 'FONTNAME ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + '"'  + CRLF

			c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

			c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

			c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

			c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

			c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

			c := c + space (12) + 'HSCROLLBAR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'hScrollBar' )  + CRLF

			c := c + space (12) + 'MAXLENGTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' )  + CRLF

			c := c + space (12) + 'READONLY ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' )  + CRLF

			c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

			c := c + space (12) + 'TABSTOP ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )  + CRLF

			c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

			c := c + space (12) + 'VALUE ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' ) + '"' + CRLF

			c := c + space (12) + 'VISIBLE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )  + CRLF

			c := c + space (12) + 'VSCROLLBAR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'vScrollBar' )  + CRLF

			c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

			* EditBox Events

			c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

			c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

			c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF

			c := c + space (8) + 'END EDITBOX' + CRLF

		elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'GRID'

			c := c + CRLF

			c := c + space (8) + 'DEFINE GRID ' + spb.list_1.cell(i,1) + CRLF

			* Grid Properties

			c := c + space (12) + 'ALLOWEDIT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'AllowEdit' )  + CRLF

			c := c + space (12) + 'BACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

			c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

			c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )  + CRLF

			c := c + space (12) + 'COLUMNCONTROLS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnControls' )  + CRLF

			c := c + space (12) + 'COLUMNVALID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnValid' )  + CRLF

			c := c + space (12) + 'COLUMNWHEN ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ColumnWhen' )  + CRLF

			c := c + space (12) + 'DYNAMICBACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicBackColor' )  + CRLF

			c := c + space (12) + 'DYNAMICFORECOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'DynamicForeColor' )  + CRLF

			c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

			c := c + space (12) + 'FONTCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )  + CRLF

			c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

			c := c + space (12) + 'FONTNAME ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + '"'  + CRLF

			c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

			c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

			c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

			c := c + space (12) + 'HEADERS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Headers' )  + CRLF

			c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

			c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

			c := c + space (12) + 'IMAGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Image' )  + CRLF

			c := c + space (12) + 'ITEMCOUNT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemCount' )  + CRLF

			c := c + space (12) + 'ITEMS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )  + CRLF

			c := c + space (12) + 'JUSTIFY ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Justify' )  + CRLF

			IF HMG_UPPER ( ALLTRIM ( __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Lines' ) ) ) == '.T.'
				c := c + space (12) + 'NOLINES .F.'   + CRLF
			ELSE
				c := c + space (12) + 'NOLINES .T.' + CRLF
			ENDIF

			c := c + space (12) + 'MULTISELECT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' )  + CRLF

			c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

			c := c + space (12) + 'SHOWHEADERS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ShowHeaders' )  + CRLF

			c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

			c := c + space (12) + 'VALUE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + CRLF

			c := c + space (12) + 'VIRTUAL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Virtual' )  + CRLF

			c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

			c := c + space (12) + 'WIDTHS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Widths' )  + CRLF

			* Grid Events

			c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

			c := c + space (12) + 'ONDBLCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )  + CRLF

			c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

			c := c + space (12) + 'ONHEADCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnHeadClick' )  + CRLF

			c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF

			c := c + space (12) + 'ONQUERYDATA ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnQueryData' )  + CRLF

			c := c + space (8) + 'END GRID' + CRLF

		elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'LISTBOX'

			c := c + CRLF

			c := c + space (8) + 'DEFINE LISTBOX ' + spb.list_1.cell(i,1) + CRLF

			* ListBox Properties

			c := c + space (12) + 'BACKCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

			c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

			c := c + space (12) + 'COL ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )  + CRLF

			c := c + space (12) + 'FONTBOLD ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

			c := c + space (12) + 'FONTCOLOR ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontColor' )  + CRLF

			c := c + space (12) + 'FONTITALIC ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

			c := c + space (12) + 'FONTNAME ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + '"'  + CRLF

			c := c + space (12) + 'FONTUNDERLINE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

			c := c + space (12) + 'FONTSIZE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

			c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

			c := c + space (12) + 'HEIGHT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

			c := c + space (12) + 'HELPID ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

			c := c + space (12) + 'ITEMS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Items' )  + CRLF

			c := c + space (12) + 'MULTISELECT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MultiSelect' )  + CRLF

			c := c + space (12) + 'ROW ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

			c := c + space (12) + 'SORT ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Sort' )  + CRLF

			c := c + space (12) + 'TABSTOP ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )  + CRLF

			c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

			c := c + space (12) + 'VALUE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + CRLF

			c := c + space (12) + 'VISIBLE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )  + CRLF

			c := c + space (12) + 'WIDTH ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

			* ListBox Events

			c := c + space (12) + 'ONCHANGE ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

			c := c + space (12) + 'ONDBLCLICK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' )  + CRLF

			c := c + space (12) + 'ONGOTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

			c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF

			c := c + space (8) + 'END LISTBOX' + CRLF

		elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'RICHEDITBOX'

			c := c + CRLF

			c := c + space (8) + 'DEFINE RICHEDITBOX ' + spb.list_1.cell(i,1) + CRLF

			* RichEditBox Properties

			c := c + space (12) + 'BACKCOLOR ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'BackColor' )  + CRLF

			c := c + space (12) + 'BREAK ' + __MVGET ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' )  + CRLF

			c := c + space (12) + 'COL ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' )  + CRLF

			IF HMG_UPPER ( ALLTRIM ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' ) ) ) <> 'NIL'
				c := c + space (12) + 'FIELD ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Field' )  + CRLF
			ENDIF

			c := c + space (12) + 'FONTBOLD ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' )  + CRLF

			c := c + space (12) + 'FONTITALIC ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' )  + CRLF

			c := c + space (12) + 'FONTNAME ' + '"' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Fontname' ) + '"' + CRLF

			c := c + space (12) + 'FONTUNDERLINE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' )  + CRLF

			c := c + space (12) + 'FONTSIZE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + CRLF

			c := c + space (12) + 'FONTSTRIKEOUT ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' )  + CRLF

			c := c + space (12) + 'HEIGHT ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' )  + CRLF

			c := c + space (12) + 'HELPID ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' )  + CRLF

			c := c + space (12) + 'MAXLENGTH ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'MaxLength' )  + CRLF

			c := c + space (12) + 'READONLY ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ReadOnly' )  + CRLF

			c := c + space (12) + 'ROW ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' )  + CRLF

			c := c + space (12) + 'TABSTOP ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'TabStop' )  + CRLF

			c := c + space (12) + 'TOOLTIP ' + '"' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + '"' + CRLF

			c := c + space (12) + 'VALUE ' + '"' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' ) + '"' + CRLF

			c := c + space (12) + 'VISIBLE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Visible' )  + CRLF

			c := c + space (12) + 'WIDTH ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' )  + CRLF

			* RichEditBox Events

			c := c + space (12) + 'ONCHANGE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' )  + CRLF

			c := c + space (12) + 'ONGOTFOCUS ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + CRLF

			c := c + space (12) + 'ONLOSTFOCUS ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' )  + CRLF

			c := c + space (8) + 'END RICHEDITBOX' + CRLF

		elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'TOOLBAR'

			c := c + CRLF

			c := c + __MVGET ( ALLTRIM(n) + 'SpxToolBar' )

		elseif ALLTRIM ( HMG_UPPER ( spb.list_1.cell(i,2) ) ) == 'TREE'

			c := c + CRLF

			c := c + space (8) + 'DEFINE TREE ' + ALLTRIM ( n ) + ' AT ' +  __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Row' ) + ' , ' +  __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Col' ) + ' WIDTH ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Width' ) + ' HEIGHT ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Height' ) + ' VALUE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Value' )  + ' FONT ' + chr(34) + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontName' ) + chr(34) + ' SIZE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontSize' )  + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontBold' ) =='.T.',' BOLD','') + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontItalic' ) =='.T.',' ITALIC','') + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontUnderLine' ) =='.T.',' UNDERLINE','') + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'FontStrikeOut' ) =='.T.',' STRIKEOUT','') + ' TOOLTIP ' + chr(34) + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ToolTip' ) + chr(34)  + ' ON GOTFOCUS ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnGotFocus' )  + ' ON CHANGE ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnChange' ) + ' ON LOSTFOCUS ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnLostFocus' ) + ' ON DBLCLICK ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'OnDblClick' ) + ' NODEIMAGES ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'NodeImages' ) + ' ITEMIMAGES ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemImages' ) + if ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'RootButton' ) == '.T.' , '' , ' NOROOTBUTTON' ) + if ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'ItemIds' ) == '.T.' , ' ITEMIDS' , '' ) + ' HELPID ' + __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'HelpId' ) + IF ( __MVGET  ( HMG_UPPER ( ALLTRIM ( n ) ) + 'Break' ) =='.T.',' BREAK','') + CRLF

			c := c + space (8) + 'END TREE' + CRLF

		endif

	next i

	c := c + CRLF

	c := c + space(4) + 'END SPLITBOX' + CRLF

	_hmgide_CurrentSplitBox := c

	DesignFormModified := .T.

return

procedure sp4
local ant
local cur
local i

	i := spb.list_1.value

	if i == 0
		msgstop( aMsgs [ 193 ] ,'HMG IDE')
		return
	endif

	if i == 1
		return
	endif

	ant := spb.list_1.item(i-1)
	cur := spb.list_1.item(i)

	spb.list_1.item(i-1) := cur
	spb.list_1.item(i) := ant

	spb.list_1.value := i - 1

return

procedure sp5
local cur
local pos
local i

	i := spb.list_1.value

	if i == 0
		msgstop( aMsgs [ 193 ] ,'HMG IDE')
		return
	endif

	if i == spb.list_1.itemcount
		return
	endif

	pos := spb.list_1.item(i+1)
	cur := spb.list_1.item(i)

	spb.list_1.item(i+1) := cur
	spb.list_1.item(i) := pos

	spb.list_1.value := i + 1

return

Procedure SortModuleList (value)
Local i , j
Local aux
Local last

	last := Project.List_1.Item ( Project.List_1.ItemCount )

	For i := 2 To Project.List_1.ItemCount - 1

		For j := i+1 To Project.List_1.ItemCount

			if HMG_UPPER ( Project.List_1.Item ( i ) ) > HMG_UPPER ( Project.List_1.Item ( j ) )

				aux := Project.List_1.Item ( i )
				Project.List_1.Item ( i ) := Project.List_1.Item ( j )
				Project.List_1.Item ( j ) := aux

			EndIf

		Next j

	Next i

	if VALTYPE ( value ) = 'N'
		Project.List_1.Value := value
	else

		For i := 1 to Project.List_1.ItemCount

			if 	ALLTRIM ( HMG_UPPER(Project.List_1.Item ( i ) ) ) ;
				== ;
				ALLTRIM ( HMG_UPPER( Last ) )

				Project.List_1.Value := i
				Exit

			endif

		Next i

	endif

Return

Procedure SortFormList (value)
Local i , j
Local aux
Local last

	last := Project.List_2.Item ( Project.List_2.ItemCount )

	For i := 1 To Project.List_2.ItemCount - 1

		For j := i+1 To Project.List_2.ItemCount

			if HMG_UPPER(Project.List_2.Item ( i ) ) > HMG_UPPER ( Project.List_2.Item ( j ) )

				aux := Project.List_2.Item ( i )
				Project.List_2.Item ( i ) := Project.List_2.Item ( j )
				Project.List_2.Item ( j ) := aux

			EndIf

		Next j

	Next i

	if VALTYPE ( value ) = 'N'
		Project.List_2.Value := value
	else

		For i := 1 to Project.List_2.ItemCount

			if 	ALLTRIM ( HMG_UPPER(Project.List_2.Item ( i ) ) ) ;
				== ;
				ALLTRIM ( HMG_UPPER( Last ) )

				Project.List_2.Value := i
				Exit

			endif

		Next i

	endif

Return

Procedure SortReportList (value)
Local i , j
Local aux
Local last

	last := Project.List_3.Item ( Project.List_3.ItemCount )

	For i := 1 To Project.List_3.ItemCount - 1

		For j := i+1 To Project.List_3.ItemCount

			if HMG_UPPER(Project.List_3.Item ( i ) ) > HMG_UPPER ( Project.List_3.Item ( j ) )

				aux := Project.List_3.Item ( i )
				Project.List_3.Item ( i ) := Project.List_3.Item ( j )
				Project.List_3.Item ( j ) := aux

			EndIf

		Next j

	Next i

	if VALTYPE ( value ) = 'N'
		Project.List_3.Value := value
	else

		For i := 1 to Project.List_3.ItemCount

			if 	ALLTRIM ( HMG_UPPER(Project.List_3.Item ( i ) ) ) ;
				== ;
				ALLTRIM ( HMG_UPPER( Last ) )

				Project.List_3.Value := i
				Exit

			endif

		Next i

	endif

Return




Procedure SortIncludeList (value)
Local i , j
Local aux
Local last

	last := Project.List_4.Item ( Project.List_4.ItemCount )

	For i := 1 To Project.List_4.ItemCount - 1

		For j := i+1 To Project.List_4.ItemCount

			if HMG_UPPER(Project.List_4.Item ( i ) ) > HMG_UPPER ( Project.List_4.Item ( j ) )

				aux := Project.List_4.Item ( i )
				Project.List_4.Item ( i ) := Project.List_4.Item ( j )
				Project.List_4.Item ( j ) := aux

			EndIf

		Next j

	Next i

	if VALTYPE ( value ) = 'N'
		Project.List_4.Value := value
	else

		For i := 1 to Project.List_4.ItemCount

			if 	ALLTRIM ( HMG_UPPER(Project.List_4.Item ( i ) ) ) ;
				== ;
				ALLTRIM ( HMG_UPPER( Last ) )

				Project.List_4.Value := i
				Exit

			endif

		Next i

	endif

Return





// Function hmgmake (cParam1,cParam2,cParam3,cParam4,cParam5,cParam6,cParam7,cParam8)
Procedure hmgmake (cParam1,cParam2,cParam3,cParam4,cParam5,cParam6,cParam7,cParam8)
Local i , o , c , l , cParams
Local aFiles			:= {}
Local cProjectFileFullContent	:= ''
Local nLimes			:= 0
Local cBuffer			:= ''
Local cLineContent		:= ''
Local lFound			:= ''
PUBLIC cProjectFile		:= ''
PUBLIC cLibraries		:= ''
PUBLIC cLinkerLibraries		:= ''
PUBLIC lDebuggerSupport		:= .F.
PUBLIC lFullBuild		:= .F.
PUBLIC aParams [8]
PUBLIC cProjectBaseName		:= ''
PUBLIC aModifiedFiles		:= {}
PUBLIC aFilesToCompile		:= {}
PUBLIC aFormsModified		:= {}
PUBLIC aProjectModuleFiles	:= {}
PUBLIC cProjectFolder		:= ''
PUBLIC cBackupFolder		:= ''
PUBLIC aDependences		:= {}
PUBLIC nstd := ''
PUBLIC nstx := 'Building...'
PUBLIC lConsoleMode		:= .F.
PUBLIC cInclude			:= ''

	aParams [1] := cParam1
	aParams [2] := cParam2
	aParams [3] := cParam3
	aParams [4] := cParam4
	aParams [5] := cParam5
	aParams [6] := cParam6
	aParams [7] := cParam7
	aParams [8] := cParam8

	cProjectFile := aParams [1]

	For i := 2 to pcount()

		If	HMG_UPPER ( HB_ULEFT (  aParams [i] , 3 ) ) == '/H:'

			cHmgFolder := HB_URIGHT ( aParams [i] , HMG_LEN(aParams [i]) - 3 )

		ElseIf	HMG_UPPER ( HB_ULEFT (  aParams [i] , 3 ) ) == '/L:'

			cLibraries := HB_URIGHT ( aParams [i] , HMG_LEN(aParams [i]) - 3 )

		ElseIf	HMG_UPPER ( HB_ULEFT (  aParams [i] , 3 ) ) == '/I:'

			cInclude := HB_URIGHT ( aParams [i] , HMG_LEN(aParams [i]) - 3 )

		ElseIf	HMG_UPPER ( HB_ULEFT (  aParams [i] , 2 ) ) == '/D'

			lDebuggerSupport := .T.

		ElseIf	HMG_UPPER ( HB_ULEFT (  aParams [i] , 2 ) ) == '/C'

			lConsoleMode := .T.

		ElseIf	HMG_UPPER ( HB_ULEFT (  aParams [i] , 3 ) ) == '/F'

			lFullBuild	:= .T.

		Else

			ShowSyntaxError()
			Return

		EndIf

	Next i

	if file ( cProjectFile )

		if	HMG_UPPER ( HB_URIGHT ( ALLTRIM ( cProjectFile ) , 4 ) ) <> '.HBP'

			ShowSyntaxError()
			Return

		endif

	elseif file ( cProjectFile + '.hbp' )

		cProjectFile := cProjectFile + '.hbp'

	Else

		MsgStop ( 'Peoject File "'+ cProjectFile +'" Not Found' , 'HMG MAKE: File Error' )
		Return

	endif

	if HB_UTF8RAT ( '\' , cProjectFile ) == 0

		cProjectFolder := GetCurrentFolder()

	else

		cProjectFolder := HB_ULEFT ( cProjectFile , HB_UTF8RAT ( '\' , cProjectFile ) )

		cBackupFolder := GetCurrentFolder()

		SetCurrentFolder( cProjectFolder )

	endif

	if HB_URIGHT ( cHmgFolder , 1 ) == '\'
		cHmgFolder := HB_ULEFT ( cHmgFolder , HMG_LEN (cHmgFolder) - 1 )
	endif

	if HB_URIGHT ( cLibraries , 1 ) == ';'
		cLibraries := HB_ULEFT ( cLibraries , HMG_LEN (cLibraries) - 1 )
	endif

	if .Not. Empty (cLibraries)
		cLinkerLibraries := '-l' + HB_UTF8STRTRAN ( cLibraries , ';' , ' -l' )
	else
		cLinkerLibraries := ''
	endif

	cProjectBaseName := HB_ULEFT ( cProjectFile , HMG_LEN ( cProjectFile ) - 4 )

	*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*

	* Create Programs List ************************************************

	c := HB_MEMOREAD ( cProjectFile )

	o := ''

	For i := 1 To MlCount (c)

		l := ALLTRIM( MemoLine( c , , i ) )

//		l := HMG_LOWER ( l )

		if HMG_LOWER( HB_URIGHT( l, 4 ) ) == '.prg'
			o := o + l + CRLF
		EndIf

	Next i

	SaveString ( cProjectBaseName + '.hbp' , o )

	* Parameters definition ***********************************************

	If lDebuggerSupport == .t.

		cParams := ' /d '

	ElseIf lConsoleMode == .f. .and. lFullBuild == .t.

		cParams := ' /r '

	ElseIf lConsoleMode == .f. .and. lFullBuild == .f.

		cParams := ' /i '

	ElseIf lConsoleMode == .t. .and. lFullBuild == .t.

		cParams := ' /cr '

	ElseIf lConsoleMode == .t. .and. lFullBuild == .f.

		cParams := ' /ci '

	EndIf

	* Execute Build.bat

	DEFINE WINDOW newbuild ;
		AT 0 , 0 ;
		WIDTH 400 ;
		HEIGHT 150 ;
		TITLE '' ;
		MODAL ;
		NOCAPTION ;
		ON INIT  NewBuild( cParams )

		DEFINE LABEL L
			ROW 60
			COL 130 // 160
			WIDTH 200
			HEIGHT 100
			VALUE 'Building in '+ IF (Form_Main.IsBuild64.CHECKED == .T., "64-bits", "32-bits") +' ...'
			FONTBOLD .T.
		END LABEL

	END WINDOW

	newbuild.center
	newbuild.activate

Return
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Procedure NewBuild( cParams )
LOCAL xLog
Local cOption := ' /n '

   cParams := NIL

// April, 2016
//DisableProcessWindowsGhosting ()
disablewindow (getformhandle('Form_Main'))
disablewindow (getformhandle('project'))
disablewindow (getformhandle('properties'))

	RELEASE KEY F2	OF Form_Main
	RELEASE KEY F5	OF Form_Main
	RELEASE KEY F8	OF Form_Main
	RELEASE KEY F9	OF Form_Main
	RELEASE KEY F11	OF Form_Main

	RELEASE KEY F2	OF PROJECT
	RELEASE KEY F5	OF PROJECT
	RELEASE KEY F8	OF PROJECT
	RELEASE KEY F9	OF PROJECT
	RELEASE KEY F11	OF PROJECT

	RELEASE KEY F2	OF PROPERTIES
	RELEASE KEY F5	OF PROPERTIES
	RELEASE KEY F8	OF PROPERTIES
	RELEASE KEY F9	OF PROPERTIES
	RELEASE KEY F11	OF PROPERTIES

/*
	disablewindow (getformhandle('Form_Main'))
	disablewindow (getformhandle('project'))
	disablewindow (getformhandle('properties'))
*/

	IF ENABLEDEBUGGER == .T.
      cOption := ' /n /d '
      ENABLEDEBUGGER := .F.
	ENDIF

	IF RESETINCREMENTAL == .T.
		cOption := ' -clean '
		RESETINCREMENTAL := .F.
		newbuild.l.value := 'Cleanning...'
	ENDIF

IF Form_Main.IsBuild64.CHECKED == .T. // HMG_IS64BITS() == .T.
	if file ( cHmgFolder + "\BUILD64.BAT" )
		EXECUTE FILE cHmgFolder + "\BUILD64.BAT " + cOption + cProjectBaseName + '.hbp ' + cProjectBaseName + '.hbc' WAIT HIDE
	else
		msgstop (cHmgFolder + "\BUILD64.BAT " + 'Not Found!','HMG-IDE')
	endif
ELSE
	if file ( cHmgFolder + "\BUILD.BAT" )
		EXECUTE FILE cHmgFolder + "\BUILD.BAT " + cOption + cProjectBaseName + '.hbp ' + cProjectBaseName + '.hbc' WAIT HIDE
	else
		msgstop (cHmgFolder + "\BUILD.BAT " + 'Not Found!','HMG-IDE')
	endif
ENDIF


/*
	enablewindow (getformhandle('Form_Main'))
	enablewindow (getformhandle('project'))
	enablewindow (getformhandle('properties'))
*/

	ON KEY F2	OF Form_Main ACTION OpenProject()
	ON KEY F5	OF Form_Main ACTION RunApplication()
	ON KEY F8	OF Form_Main ACTION ( ENABLEDEBUGGER := .T. , RunApplication() ) // ACTION ( RunAfetrBuild := .T. , DebuggerSupport := .T. , BuildProjectM() )
	ON KEY F9	OF Form_Main ACTION NewForm()
	ON KEY F11	OF Form_Main ACTION NewModule()

	ON KEY F2	OF PROJECT ACTION OpenProject()
	ON KEY F5	OF PROJECT ACTION RunApplication()
	ON KEY F8	OF PROJECT ACTION ( ENABLEDEBUGGER := .T. , RunApplication() ) // ACTION ( RunAfetrBuild := .T. , DebuggerSupport := .T. , BuildProjectM() )
	ON KEY F9	OF PROJECT ACTION NewForm()
	ON KEY F11	OF PROJECT ACTION NewModule()

	ON KEY F2	OF PROPERTIES ACTION OpenProject()
	ON KEY F5	OF PROPERTIES ACTION RunApplication()
	ON KEY F8	OF PROPERTIES ACTION ( ENABLEDEBUGGER := .T. , RunApplication() ) // ACTION ( RunAfetrBuild := .T. , DebuggerSupport := .T. , BuildProjectM() )
	ON KEY F9	OF PROPERTIES ACTION NewForm()
	ON KEY F11	OF PROPERTIES ACTION NewModule()


	if file('error.log')

		xLog := ALLTRIM(HB_MEMOREAD('error.log'))

		showlog(xlog)

	else

		if cOption <> ' -clean '

			if file ( cProjectBaseName + '.exe ' )

				EXECUTE FILE cProjectBaseName + '.exe '

			endif

		endif

	EndIf

	newbuild.release

DO EVENTS
enablewindow (getformhandle('Form_Main'))
enablewindow (getformhandle('project'))
enablewindow (getformhandle('properties'))


return


/*
*------------------------------------------------------------------------------*
Static Procedure LoadModuleList()
*------------------------------------------------------------------------------*
Local	nLineCount
Local	cLineBuffer
Local	i
Local	cLine
PUBLIC	cProjectFileContent
PUBLIC	aModules
PUBLIC	aForms

	aModules := {}
	aForms := {}

	cProjectFileContent := HB_MEMOREAD ( cProjectFile )

	nLineCount := MlCount ( cProjectFileContent )

	cLineBuffer := ''

	For i := 1 To nLineCount

		cLine := HMG_UPPER ( ALLTRIM ( MemoLine ( cProjectFileContent , 1024 , i , 4 , .t. ) ) )

		if HB_URIGHT ( cLine , 4 ) == '.PRG'

			cLine := HB_ULEFT ( cLine , HMG_LEN(cLine) - 4 )

			aadd ( aModules , cLine )

		endif

		* Test

		if HB_URIGHT ( cLine , 4 ) == '.FMG'

			cLine := HB_ULEFT ( cLine , HMG_LEN(cLine) - 4 )

			aadd ( aForms , cLine )

		endif

		*

	Next i

Return
*/


*------------------------------------------------------------------------------*
Static Procedure ShowSyntaxError()
*------------------------------------------------------------------------------*
// Empty Function
Return


/*
*------------------------------------------------------------------------------*
Procedure BuildProject()
*------------------------------------------------------------------------------*
// Empty Function
Return
*/

*------------------------------------------------------------------------------*
Function GetFileDate ( cFile )
*------------------------------------------------------------------------------*
Local aFileData
Local RetVal

	If File ( cFile )

		aFileData := Directory ( cFile )

		RetVal := aFileData [1] [3]

	Else

		RetVal := 0d00000101

	EndIf

Return RetVal


*------------------------------------------------------------------------------*
Function GetFileTime ( cFile )
*------------------------------------------------------------------------------*
Local aFileData
Local RetVal
   If File ( cFile )
      aFileData := Directory ( cFile )
      RetVal := aFileData [1] [4]
   Else
      RetVal := '  :  :  '
   EndIf
Return RetVal


/*
*------------------------------------------------------------------------------*
Static Function IsWindowInModule ( cWindow , cModule )
*------------------------------------------------------------------------------*
Local cModuleContent
Local nLimes
Local cLineContent
Local i
Local RetVal := .F.
Local aWords := {}
Local cBaseWindowName

		if VALTYPE ( cWindow ) <> 'C'
			return .f.
		endif

		if VALTYPE ( cModule ) <> 'C'
			return .f.
		endif

		cWindow := ALLTRIM ( HMG_UPPER (cWindow) )
		cModule := ALLTRIM ( HMG_UPPER (cModule) )

		if empty ( cWindow )
			return .f.
		endif

		if empty ( cModule )
			return .f.
		endif

		if .not. file ( cModule )
			return .f.
		endif

		if .not. file ( cWindow )
			return .f.
		endif

		cModuleContent := HB_MEMOREAD ( cModule )

		nLimes := MlCount ( cModuleContent )

		cBaseWindowName := HB_ULEFT ( cWindow , HMG_LEN ( cWindow ) - 4 )

		For i := 1 To nLimes

			cLineContent := MemoLine ( cModuleContent , 1024 , i , 4 , .t. )

			aWords := GetWords ( cLineContent , 3 )

			if	aWords [1] == 'LOAD' ;
				.and. ;
				aWords [2] == 'WINDOW' ;
				.and. ;
				aWords [3] == cBaseWindowName

				RetVal := .T.

				Exit

			endif

		Next i

Return RetVal
*/

/*
*------------------------------------------------------------------------------*
Static Function GetWords ( cText , nWordCount )
*------------------------------------------------------------------------------*
Local aWords := {}
Local i
Local n := 1
Local priordelimiter := .f.

	aSize ( aWords , nWordCount )
	aFill ( aWords , '' )

	if VALTYPE ( cText ) <> 'C'
		return awords
	endif

	if empty ( cText )
		return awords
	endif

	cText := HMG_UPPER ( ALLTRIM ( cText ) )

	For i := 1 To HMG_LEN ( cText )

		c := HB_USUBSTR ( cText , i , 1 )

		if asc ( c ) >= 48 .and. asc ( c ) <= 95

			if priordelimiter == .t.
				n := n + 1
				if n > nWordCount
					exit
				endif
			endif

			aWords [ n ] := aWords [ n ] + c

			priordelimiter := .f.

		else

			priordelimiter := .t.

		endif

	Next i

Return aWords
*/

/*
*------------------------------------------------------------------------------*
FUNCTION FileNoPath( cFile )
*------------------------------------------------------------------------------*
LOCAL nPos, cFileOut

           IF (nPos := HB_UTF8RAT("\", cFile)) != 0
              cFileOut = HB_USUBSTR(cFile, nPos , HMG_LEN (cFile) )
           ELSE
              cFileOut = cFile
           ENDIF

RETURN cFileOut
*/

Procedure SaveLog
Local cBakFolder, cFile

	cBakFolder := GetCurrentFolder()

	cFile := PutFile ( { { 'Text Files' , '*.txt' } } , aMsgs [ 216 ] )

	if ! Empty ( cFile )
		if ALLTRIM ( HMG_UPPER ( HB_URIGHT ( cFile , 4 ) ) ) <> '.TXT'
			cFile := cFile + '.txt'
		endif
		SaveString ( cFile , cUserLog )
	endif

	SetCurrentFolder ( cBakFolder )

Return

*------------------------------------------------------------------------------*
Procedure _Spx_ToolBarBuilder( cName )
*------------------------------------------------------------------------------*
Private _TbName			:= cName
Private _TbNames		:= {}
Private _TbCaptions		:= {}
Private _TbPictures		:= {}
Private _TbActions		:= {}
Private _TbToolTips		:= {}
Private _TbSeparators		:= {}
Private _TbChecks		:= {}
Private _TbAutoSizes		:= {}
Private _TbGroups		:= {}
Private _TbDropDowns		:= {}
Private _TbWholeDropDowns	:= {}

Private _TbFontName		:= 'Arial'
Private _TbFontSize		:= 9
Private _TbFontBold		:= .F.
Private _TbFontItalic		:= .F.
Private _TbFontUnderLine	:= .F.
Private _TbFontStrikeout	:= .F.
Private _TbButtonWidth		:= '64'
Private _TbButtonHeight		:= '64'
Private _TbButtonImageWidth	:= ''
Private _TbButtonImageHeight	:= ''
Private _TbToolTip		:= ''
Private _TbFlat			:= .T.
Private _TbBottom		:= .F.
Private _TbRightText		:= .F.
Private _TbBorder		:= .F.
Private _TbStrictWidth		:= .F.
Private _TbBreak		:= .F.

	if !_IsWIndowDefined (DesignForm)
		MsgStop ( aMsgs [ 086 ] ,'HMG IDE')
		Return
	EndIf

	aadd ( _TbNames		, '' )
	aadd ( _TbCaptions	, '' )
	aadd ( _TbPictures	, '' )
	aadd ( _TbActions	, '' )
	aadd ( _TbToolTips	, '' )
	aadd ( _TbSeparators	, .F. )
	aadd ( _TbChecks	, .F. )
	aadd ( _TbAutoSizes	, .F. )
	aadd ( _TbGroups	, .F. )
	aadd ( _TbDropDowns	, .F. )
	aadd ( _TbWholeDropDowns, .F. )

	Define Window TbDesigner ;
		At 0,0 ;
		Width 370 ;
		Height GetTitleHeight() + 460 + 2 ;
		Title aMsgs [ 196 ] + cName + ']' ;
		Modal ;
		NoSize

		ON KEY ESCAPE	Action	( ;
				ThisWindow.Release ;
				)

		Define Frame Frame1
			Row 9
			Col 10
			Width 225
			Height 256
		End Frame

		Define Label Label1
			Row 23
			Col 25
			Width 50
			Value 'Name:'
		End Label
		Define TextBox Text1
			Row 20
			Col 100
			Value ''
			OnChange _Spx_TbNameChange()
		End TextBox

		Define Label Label2
			Row 53
			Col 25
			Width 50
			Value 'Caption:'
		End Label
		Define TextBox Text2
			Row 50
			Col 100
			Value ''
			OnChange _Spx_TbCaptionChange()
		End TextBox

		Define Label Label3
			Row 83
			Col 25
			Width 50
			Value 'Picture:'
		End Label
		Define TextBox Text3
			Row 80
			Col 100
			Value ''
			OnChange _Spx_TbPictureChange()
		End TextBox

		Define Label Label4
			Row 113
			Col 25
			Width 50
			Value 'Action:'
		End Label
		Define TextBox Text4
			Row 110
			Col 100
			Value ''
			OnChange _Spx_TbActionChange()
		End TextBox

		Define Label Label4a
			Row 143
			Col 25
			Width 50
			Value 'ToolTip:'
		End Label
		Define TextBox Text4a
			Row 140
			Col 100
			Value ''
			OnChange _Spx_TbToolTipChange()
		End TextBox


		Define Label Label5
			Row 173
			Col 25
			Width 60
			Value 'Separator:'
		End Label
		Define CheckBox Check5
			Row 170
			Col 100
			Width 20
			Value .f.
			OnChange _Spx_TbSeparatorChange()
		End CheckBox

		Define Label Label6
			Row 203
			Col 25
			Width 50
			Value 'AutoSize:'
		End Label
		Define CheckBox Check6
			Row 200
			Col 100
			Width 20
			Value .f.
			OnChange _Spx_TbAutoSizeChange()
		End CheckBox

		Define Label Label7
			Row 173
			Col 130
			Width 50
			Value 'Check:'
		End Label
		Define CheckBox Check7
			Row 170
			Col 205
			Width 20
			Value .f.
			OnChange _Spx_TbCheckChange()
		End CheckBox

		Define Label Label8
			Row 203
			Col 130
			Width 50
			Value 'Group:'
		End Label
		Define CheckBox Check8
			Row 200
			Col 205
			Width 20
			Value .f.
			OnChange _Spx_TbGroupChange()
		End CheckBox

		**

		Define Label Label9
			Row 233
			Col 25
			Width 75
			Value 'DropDown:'
		End Label
		Define CheckBox Check9
			Row 230
			Col 100
			Width 20
			Value .f.
			OnChange _Spx_TbDropDownChange()
		End CheckBox

		Define Label Label10
			Row 233
			Col 130
			Width 75
			Value 'W.DropDn.:'
		End Label
		Define CheckBox Check10
			Row 230
			Col 205
			Width 20
			Value .f.
			OnChange _Spx_TbWholeDropDownChange()
		End CheckBox

		* Button Bar

		Define Frame Frame3
			Row 272
			Col 10
			Width 340
			Height 36
		End Frame

		Define Button button3
			Row 276
			Col 13
			Width 61
			Height 30
			Picture 'UP'
			Action	_Spx_TbMoveUp()
		End Button
		Define Button button4
			Row 276
			Col 76
			Width 61
			Height 30
			Picture 'DOWN'
			Action _Spx_TbMoveDown()
		End Button
		Define Button button5
			Row 276
			Col 140
			Width 50
			Height 30
			Caption aMsgs [ 112 ]
			Action	_Spx_TbNext()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button6
			Row 276
			Col 192
			Width 50
			Height 30
			Caption aMsgs [ 113 ]
			Action	_Spx_TbPrior()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button7
			Row 276
			Col 244
			Width 50
			Height 30
			Caption aMsgs [ 114 ]
			Action	_Spx_TbInsert()
			FontName 'Arial'
			FontSize 8
		End Button
		Define Button button8
			Row 276
			Col 296
			Width 50
			Height 30
			Caption aMsgs [ 115 ]
			Action	_Spx_TbDelete()
			FontName 'Arial'
			FontSize 8
		End Button

		* Main List Box

		Define ListBox List1
			Row 315
			Col 10
			Width 340
			height 130
			Items _Spx_FillTbList(cName)
			Value 1
			OnChange TbChange()
		End ListBox

		* Ok / Cancel Buttons

		Define Button Ok
			Row 10
			Col 250
			Caption aMsgs [ 116 ]
			Action	( ;
				_Spx_BuildToolBar() , ;
				_HMG_SYSDATA [ 257 ] := .F. ;
				)
		End Button
		Define Button Cancel
			Row 40
			Col 250
			Caption aMsgs [ 117 ]
			Action	( ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				ThisWindow.Release ;
				)
		End Button

		Define Button Properties
			Row 235
			Col 250
			Caption aMsgs [ 142 ]
			Action	_Spx_TbProperties()
		End Button

	End Window

	TbDesigner.List1.Value	:= 1
	TbDesigner.Text1.Value	:= TbDesigner.List1.Item(1)

	TbDesigner.Text2.Value	:= _TbCaptions	[ 1 ]
	TbDesigner.Text3.Value	:= _TbPictures	[ 1 ]
	TbDesigner.Text4.Value	:= _TbActions	[ 1 ]
	TbDesigner.Text4a.Value	:= _TbToolTips	[ 1 ]

	TbDesigner.Check5.Value	:= _TbSeparators	[ 1 ]
	TbDesigner.Check6.Value	:= _TbAutoSizes 	[ 1 ]
	TbDesigner.Check7.Value	:= _TbChecks 		[ 1 ]
	TbDesigner.Check8.Value	:= _TbGroups 		[ 1 ]

	TbDesigner.Check9.Value		:= _TbDropDowns 	[ 1 ]
	TbDesigner.Check10.Value	:= _TbWholeDropDowns	[ 1 ]

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

	TbDesigner.Center
	TbDesigner.Activate

	DoMethod ( DesignForm , 'SetFocus' )

Return
*------------------------------------------------------------------------------*
Procedure _Spx_TbToolTipChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbToolTips [i] := TbDesigner.Text4a.Value

Return
*------------------------------------------------------------------------------*
Procedure _Spx_TbDropDownChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbDropDowns [i] := TbDesigner.Check9.Value

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbWholeDropDownChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbWholeDropDowns [i] := TbDesigner.Check10.Value

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbNameChange
*------------------------------------------------------------------------------*
Local i
Local String

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	String := TbDesigner.List1.Item (i)

	TbDesigner.List1.Item (i) := ALLTRIM ( TbDesigner.Text1.Value )

	TbDesigner.List1.Value := i

	_TbNames [i] := TbDesigner.Text1.Value

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbCaptionChange
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbCaptions [i] := TbDesigner.Text2.Value

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbPictureChange
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbPictures [i] := TbDesigner.Text3.Value

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbActionChange
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbActions [i] := TbDesigner.Text4.Value

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbSeparatorChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbSeparators [i] := TbDesigner.Check5.Value

Return
*------------------------------------------------------------------------------*
Procedure _Spx_TbAutoSizeChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbAutoSizes [i] := TbDesigner.Check6.Value

Return
*------------------------------------------------------------------------------*
Procedure _Spx_TbCheckChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbChecks [i] := TbDesigner.Check7.Value

Return
*------------------------------------------------------------------------------*
Procedure _Spx_TbGroupChange()
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	_TbGroups [i] := TbDesigner.Check8.Value

Return
*------------------------------------------------------------------------------*
Procedure _Spx_TbMoveUp
*------------------------------------------------------------------------------*
Local i
Local Previous
Local Current
Local aux0
Local aux1
Local aux2
Local aux3
Local aux4
Local aux5
Local aux6
Local aux7
Local aux8
Local aux9
Local aux10


	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	if i == 1
		Return
	EndIf

	Previous	:= TbDesigner.List1.Item(i-1)
	Current 	:= TbDesigner.List1.Item(i)

	TbDesigner.List1.Item(i)	:= Previous
	TbDesigner.List1.Item(i-1)	:= Current

	TbDesigner.List1.Value := i - 1

	aux0 := _TbNames		[i]
	aux1 := _TbCaptions		[i]
	aux2 := _TbPictures		[i]
	aux3 := _TbActions		[i]
	aux4 := _TbSeparators		[i]
	aux5 := _TbAutoSizes		[i]
	aux6 := _TbChecks		[i]
	aux7 := _TbGroups		[i]
	aux8 := _TbDropDowns		[i]
	aux9 := _TbWholeDropDowns	[i]
	aux10 := _TbToolTips		[i]

	_Tbnames		[i]	:= _TbNames		[i-1]
	_TbCaptions		[i]	:= _TbCaptions		[i-1]
	_TbPictures		[i]	:= _TbPictures		[i-1]
	_TbActions		[i] 	:= _TbActions		[i-1]
	_TbSeparators   	[i]	:= _TbSeparators	[i-1]
	_TbAutoSizes    	[i]	:= _TbAutoSizes		[i-1]
	_TbChecks 		[i]	:= _TbChecks		[i-1]
	_TbGroups 		[i]	:= _TbGroups		[i-1]
	_TbDropDowns		[i]	:= _TbDropDowns		[i-1]
	_TbWholeDropDowns	[i]	:= _TbWholeDropDowns	[i-1]
	_TbToolTips		[i]	:= _TbToolTips		[i-1]

	_TbNames		[i-1]	:= aux0
	_TbCaptions		[i-1]	:= aux1
	_TbPictures		[i-1]	:= aux2
	_TbActions		[i-1]	:= aux3
	_TbSeparators   	[i-1]	:= aux4
	_TbAutoSizes    	[i-1]	:= aux5
	_TbChecks 		[i-1]	:= aux6
	_TbGroups 		[i-1]	:= aux7
	_TbDropDowns		[i-1]	:= aux8
	_TbWholeDropDowns	[i-1]	:= aux9
	_TbToolTips		[i-1]	:= aux10

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbMoveDown
*------------------------------------------------------------------------------*
Local i
Local c
Local Next
Local Current
Local aux0
Local aux1
Local aux2
Local aux3
Local aux4
Local aux5
Local aux6
Local aux7
Local aux8
Local aux9
Local aux10

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c := TbDesigner.List1.ItemCount

	if i == c
		Return
	EndIf

	Current 	:= TbDesigner.List1.Item(i)
	Next		:= TbDesigner.List1.Item(i+1)

	TbDesigner.List1.Item(i)	:= Next
	TbDesigner.List1.Item(i+1)	:= Current

	TbDesigner.List1.Value := i + 1

	aux0 	:=	_TbNames		[i]
	aux1 	:=	_TbCaptions		[i]
	aux2 	:=	_TbPictures		[i]
	aux3 	:=	_TbActions		[i]
	aux4 	:=	_TbSeparators		[i]
	aux5 	:=	_TbAutoSizes		[i]
	aux6 	:=	_TbChecks		[i]
	aux7 	:=	_TbGroups 		[i]
	aux8 	:=	_TbDropDowns		[i]
	aux9 	:=	_TbWholeDropDowns	[i]
	aux10	:=	_TbToolTips		[i]

	_TbNames		[i]	:= _TbNames		[i+1]
	_TbCaptions		[i]	:= _TbCaptions		[i+1]
	_TbPictures		[i]	:= _TbPictures		[i+1]
	_TbActions		[i] 	:= _TbActions		[i+1]
	_TbSeparators   	[i]	:= _TbSeparators	[i+1]
	_TbAutoSizes    	[i]	:= _TbAutoSizes		[i+1]
	_TbChecks 		[i]	:= _TbChecks 		[i+1]
	_TbGroups 		[i]	:= _TbGroups		[i+1]
	_TbDropDowns		[i]	:= _TbDropDowns		[i+1]
	_TbWholeDropDowns	[i]	:= _TbWholeDropDowns	[i+1]
	_TbToolTips		[i]	:= _TbToolTips		[i+1]

	_TbNames		[i+1]	:= aux0
	_TbCaptions		[i+1]	:= aux1
	_TbPictures		[i+1]	:= aux2
	_TbActions		[i+1]	:= aux3
	_TbSeparators		[i+1]	:= aux4
	_TbAutoSizes		[i+1]	:= aux5
	_TbChecks		[i+1]	:= aux6
	_TbGroups		[i+1]	:= aux7
	_TbDropDowns		[i+1]	:= aux8
	_TbWholeDropDowns	[i+1]	:= aux9
	_TbToolTips		[i+1]	:= aux10

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbNext
*------------------------------------------------------------------------------*
Local i, c

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= TbDesigner.List1.ItemCount

	if i + 1 > c

		if !Empty ( TbDesigner.List1.Item (i) )

			TbDesigner.List1.additem( '' )

			aadd ( _TbNames		, ''	)
			aadd ( _TbCaptions	, ''	)
			aadd ( _TbPictures	, ''	)
			aadd ( _TbActions	, ''	)
			aadd ( _TbSeparators   	, .f.	)
			aadd ( _TbAutoSizes    	, .f.	)
			aadd ( _TbChecks 	, .f.	)
			aadd ( _TbGroups 	, .f.	)
			aadd ( _TbDropDowns 	, .f.	)
			aadd ( _TbWholeDropDowns, .f.	)
			aadd ( _TbToolTips	, ''	)

		endif

	EndIf

	TbDesigner.List1.Value := i + 1

	TbDesigner.Text1.Value := TbDesigner.List1.Item(i+1)

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

	if HMG_LEN ( _TbActions ) >= i+1

		TbDesigner.Text2.Value := _TbCaptions	[ i + 1 ]
		TbDesigner.Text3.Value := _TbPictures	[ i + 1 ]
		TbDesigner.Text4.Value := _TbActions	[ i + 1 ]
		TbDesigner.Text4a.Value := _TbToolTips	[ i + 1 ]

		TbDesigner.Check5.Value := _TbSeparators	[i+1]
		TbDesigner.Check6.Value := _TbAutoSizes		[i+1]
		TbDesigner.Check7.Value := _TbChecks 		[i+1]
		TbDesigner.Check8.Value := _TbGroups		[i+1]

		TbDesigner.Check9.Value := _TbDropDowns		[i+1]
		TbDesigner.Check10.Value := _TbWholeDropDowns	[i+1]

	Else

		TbDesigner.Text2.Value := ''
		TbDesigner.Text3.Value := ''
		TbDesigner.Text4.Value := ''
		TbDesigner.Text4a.Value := ''

		TbDesigner.Check5.Value := .f.
		TbDesigner.Check6.Value := .f.
		TbDesigner.Check7.Value := .f.
		TbDesigner.Check8.Value := .f.

		TbDesigner.Check9.Value := .f.
		TbDesigner.Check10.Value := .f.

	EndIf

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbPrior
*------------------------------------------------------------------------------*
Local i

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	if i == 1
		Return
	EndIf

	TbDesigner.List1.Value := i - 1

	TbDesigner.Text1.Value := TbDesigner.List1.Item(i-1)

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

	TbDesigner.Text2.Value	:= _TbCaptions	[ i - 1 ]
	TbDesigner.Text3.Value	:= _TbPictures	[ i - 1 ]
	TbDesigner.Text4.Value	:= _TbActions	[ i - 1 ]
	TbDesigner.Text4a.Value	:= _TbToolTips	[ i - 1 ]

	TbDesigner.Check5.Value := _TbSeparators	[i-1]
	TbDesigner.Check6.Value := _TbAutoSizes    	[i-1]
	TbDesigner.Check7.Value := _TbChecks 		[i-1]
	TbDesigner.Check8.Value := _TbGroups 		[i-1]

	TbDesigner.Check9.Value := _TbDropDowns		[i-1]
	TbDesigner.Check10.Value := _TbWholeDropDowns	[i-1]


Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbDelete
*------------------------------------------------------------------------------*
Local i
Local c

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= TbDesigner.List1.ItemCount

	if c == 1
		TbDesigner.List1.Item (1) :=  ""
		TbDesigner.List1.Value := 1
		Return
	endif

	TbDesigner.List1.DeleteItem(i)

	adel ( _TbNames		, i )
	adel ( _TbCaptions	, i )
	adel ( _TbPictures	, i )
	adel ( _TbActions	, i )
	adel ( _TbToolTips	, i )

	adel ( _TbSeparators	, i )
	adel ( _TbAutoSizes    , i )
	adel ( _TbChecks 	, i )
	adel ( _TbGroups 	, i )

	adel ( _TbDropDowns	, i )
	adel ( _TbWholeDropDowns, i )

	asize ( _TbNames	, HMG_LEN(_TbNames) - 1 )
	asize ( _TbCaptions	, HMG_LEN(_TbCaptions) - 1 )
	asize ( _TbPictures	, HMG_LEN(_TbPictures) - 1 )
	asize ( _TbActions	, HMG_LEN(_TbActions) - 1 )
	asize ( _TbToolTips	, HMG_LEN(_TbToolTips) - 1 )

	asize ( _TbSeparators   , HMG_LEN ( _TbSeparators ) - 1 )
	asize ( _TbAutoSizes    , HMG_LEN ( _TbAutoSizes  ) - 1 )
	asize ( _TbChecks 	, HMG_LEN ( _TbChecks	) - 1 )
	asize ( _TbGroups 	, HMG_LEN ( _TbGroups 	) - 1 )

	asize ( _TbDropDowns	, HMG_LEN ( _TbDropDowns ) - 1 )
	asize ( _TbWholeDropDowns, HMG_LEN ( _TbWholeDropDowns ) - 1 )

	c	:= c - 1

	if i > c

		TbDesigner.List1.Value := c
		TbDesigner.Text1.Value := TbDesigner.List1.Item(c)
		TbDesigner.Text2.Value := _TbCaptions	[ c ]
		TbDesigner.Text3.Value := _TbPictures	[ c ]
		TbDesigner.Text4.Value := _TbActions	[ c ]
		TbDesigner.Text4a.Value := _TbToolTips	[ c ]

		TbDesigner.Check5.Value := _TbSeparators   [c]
		TbDesigner.Check6.Value := _TbAutoSizes    [c]
		TbDesigner.Check7.Value := _TbChecks 	[c]
		TbDesigner.Check8.Value := _TbGroups 	[c]

		TbDesigner.Check9.Value := _TbDropDowns [c]
		TbDesigner.Check10.Value := _TbWholeDropDowns [c]

	Else

		TbDesigner.List1.Value := i
		TbDesigner.Text1.Value := TbDesigner.List1.Item(i)
		TbDesigner.Text2.Value := _TbCaptions		[ i ]
		TbDesigner.Text3.Value := _TbPictures		[ i ]
		TbDesigner.Text4.Value := _TbActions		[ i ]
		TbDesigner.Text4a.Value := _TbToolTips		[ i ]

		TbDesigner.Check5.Value := _TbSeparators   [i]
		TbDesigner.Check6.Value := _TbAutoSizes    [i]
		TbDesigner.Check7.Value := _TbChecks 		[i]
		TbDesigner.Check8.Value := _TbGroups 		[i]

		TbDesigner.Check9.Value := _TbDropDowns		[i]
		TbDesigner.Check10.Value := _TbWholeDropDowns 	[i]

	EndIf

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbInsert
*------------------------------------------------------------------------------*
Local i
Local c
Local aTemp := {}
Local x

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	c	:= TbDesigner.List1.ItemCount

	for x := 1 to c

		if x == i
			aadd ( aTemp , '' )
		endif

		aadd ( aTemp , TbDesigner.List1.Item (x) )

	next x

	TbDesigner.List1.DeleteAllItems

	for x := 1 to HMG_LEN ( aTemp)
		TbDesigner.List1.AddItem ( aTemp [x] )
	next x

	TbDesigner.List1.Value := i

	aadd ( _TbNames		, '' )
	aadd ( _TbCaptions	, '' )
	aadd ( _TbPictures	, '' )
	aadd ( _TbActions	, '' )
	aadd ( _TbToolTips	, '' )

	aadd ( _TbSeparators , .f. )
	aadd ( _TbAutoSizes , .f. )
	aadd ( _TbChecks , .f. )
	aadd ( _TbGroups , .f. )

	aadd ( _TbDropDowns , .f. )
	aadd ( _TbWholeDropDowns , .f. )


	ains ( _TbNames		, i )
	ains ( _TbCaptions	, i )
	ains ( _TbPictures	, i )
	ains ( _TbActions	, i )
	ains ( _TbToolTips	, i )

	ains ( _TbSeparators	, i )
	ains ( _TbAutoSizes	, i )
	ains ( _TbChecks	, i )
	ains ( _TbGroups	, i )

	ains ( _TbDropDowns	, i )
	ains ( _TbWholeDropDowns, i )


	_TbNames	[ i ] := ''
	_TbCaptions	[ i ] := ''
	_TbPictures	[ i ] := ''
	_TbActions	[ i ] := ''
	_TbToolTips	[ i ] := ''

	_TbSeparators [i] := .f.
	_TbAutoSizes [i] := .f.
	_TbChecks 	[i] := .f.
	_TbGroups 	[i] := .f.

	_TbDropDowns	[i] := .f.
	_TbWholeDropDowns[i] := .f.


	TbDesigner.Text1.Value := ''
	TbDesigner.Text2.Value := ''
	TbDesigner.Text3.Value := ''
	TbDesigner.Text4.Value := ''
	TbDesigner.Text4a.Value := ''

	TbDesigner.Check5.Value := .f.
	TbDesigner.Check6.Value := .f.
	TbDesigner.Check7.Value := .f.
	TbDesigner.Check8.Value := .f.

	TbDesigner.Check9.Value := .f.
	TbDesigner.Check10.Value := .f.

	setfocus ( GetControlHandle ( 'Text1' , 'TbDesigner' ) )

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbChange
*------------------------------------------------------------------------------*
Local i
Local aTemp := {}

	i := TbDesigner.List1.Value

	if i == 0
		Return
	EndIf

	TbDesigner.Text1.Value	:= TbDesigner.List1.Item(i)
	TbDesigner.Text2.Value	:= _TbCaptions	[ i ]
	TbDesigner.Text3.Value	:= _TbPictures	[ i ]
	TbDesigner.Text4.Value	:= _TbActions	[ i ]
	TbDesigner.Text4a.Value	:= _TbToolTips	[ i ]

	TbDesigner.Check5.Value	:= _TbSeparators	[i]
	TbDesigner.Check6.Value	:= _TbAutoSizes		[i]
	TbDesigner.Check7.Value	:= _TbChecks		[i]
	TbDesigner.Check8.Value	:= _TbGroups		[i]

	TbDesigner.Check9.Value	:= _TbDropDowns		[i]
	TbDesigner.Check10.Value:= _TbWholeDropDowns	[i]

Return

*------------------------------------------------------------------------------*
Function _Spx_FillTbList( cName )
*------------------------------------------------------------------------------*
Local aList := {}
Local LineCount := 0
Local Line := ''
Local x := 0
Local y := 0
Local j := 0
Local CurrentLevel := 0
Local qc := 0
Local i
Local lStrikeOut := .f.
Local lUnderLine := .f.
Local lBold := .f.
Local lItalic := .f.
Local cTemp
Local Numbers
Local z

	If Empty ( __MVGET ( HMG_UPPER ( ALLTRIM ( cName ) ) + 'SpxToolBar' ) )
		aList := {''}
	Else

		aList		:= {}
		_TbGroups	:= {}
		_TbChecks	:= {}
		_TbSeparators	:= {}
		_TbActions	:= {}
		_TbPictures	:= {}
		_TbCaptions	:= {}
		_TbNames	:= {}
		_TbAutoSizes	:= {}
		_TbToolTips	:= {}

		_TbDropDowns		:= {}
		_TbWholeDropDowns	:= {}

		LineCount := MlCount ( __MVGET ( HMG_UPPER ( ALLTRIM ( cName ) ) + 'SpxToolBar' ) )

		For i := 1 To LineCount

			Line := ALLTRIM ( MemoLine ( __MVGET ( HMG_UPPER ( ALLTRIM ( cName ) ) + 'SpxToolBar' ) , 1024 , i , 4 , .t. ) )

			if HMG_UPPER (Line) = 'DEFINE TOOLBAR'

				Line := ALLTRIM ( HB_URIGHT ( Line , HMG_LEN( Line ) - 14 ) )

				* Get Break

				if HB_URIGHT ( HMG_UPPER (Line) , 6 ) == ' BREAK'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 6 ) )
					_TbBreak := .T.
				Else
					_TbBreak := .F.
				EndIf

				* Get Border

				if HB_URIGHT ( HMG_UPPER (Line) , 7 ) == ' BORDER'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 7 ) )
					_TbBorder := .T.
				Else
					_TbBorder := .F.
				EndIf

				* Get RightText

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' RIGHTTEXT'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					_TbRightText := .T.
				Else
					_TbRightText := .F.
				EndIf

                                * Get Bottom

				if HB_URIGHT ( HMG_UPPER (Line) , 7 ) == ' BOTTOM'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 7 ) )
					_TbBottom := .T.
				Else
					_TbBottom := .F.
				EndIf

				* Get Flat

				if HB_URIGHT ( HMG_UPPER (Line) , 5 ) == ' FLAT'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 5 ) )
					_TbFlat := .T.
				Else
					_TbFlat := .F.
				EndIf

				* Get ToolTip

				Line := ALLTRIM(Line)

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( 'TOOLTIP "' , HMG_UPPER(Line) )

					if x > 0
						_TbToolTip := ALLTRIM ( HB_USUBSTR ( Line , x + 9 , HMG_LEN(Line) - ( x + 9 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x - 1 ) )
					Else
						_TbToolTip := ''
					EndIf

				Else
					_TbToolTip := ''
				EndIf

				Line := ALLTRIM(Line)

				* Get StrikeOut

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' STRIKEOUT'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					_TbFontStrikeout := .T.
				Else
					_TbFontStrikeout := .F.
				EndIf

				Line := ALLTRIM(Line)

				* Get UnderLine

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' UNDERLINE'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					_TbFontUnderLine := .T.
				Else
					_TbFontUnderLine := .F.
				EndIf

				Line := ALLTRIM(Line)

                                * Get Italic

				if HB_URIGHT ( HMG_UPPER (Line) , 7 ) == ' ITALIC'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 7 ) )
					_TbFontItalic := .T.
				Else
					_TbFontItalic := .F.
				EndIf

				Line := ALLTRIM(Line)

				* Get Bold

				if HB_URIGHT ( HMG_UPPER (Line) , 5 ) == ' BOLD'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 5 ) )
					_TbFontBold := .T.
				Else
					_TbFontBold := .F.
				EndIf

				* Get Size

				x := HB_UTF8RAT ( ' SIZE ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					_TbFontSize := VAL ( HB_USUBSTR ( Line , x + 6 , 255 ) )
					Line := HB_ULEFT ( Line , x )
				Else
					_TbFontSize := 9
				EndIf

				* Get Font

				Line := ALLTRIM(Line)

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( 'FONT "' , HMG_UPPER(Line) )

					if x > 0
						_TbFontName := ALLTRIM ( HB_USUBSTR ( Line , x + 6 , HMG_LEN(Line) - ( x + 6 ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x - 1 ) )
					Else
						_TbFontName := 'Arial'
					EndIf

				Else
					_TbFontName := 'Arial'
				EndIf

				Line := ALLTRIM(Line)

				* Get StrictWidth

				if HB_URIGHT ( HMG_UPPER (Line) , 12 ) == ' STRICTWIDTH'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 12 ) )
					_TbStrictWidth := .T.
				Else
					_TbStrictWidth := .F.
				EndIf

				Line := ALLTRIM(Line)

				* Get ImageSize

				if 	HB_URIGHT ( Line , 1 ) == '0'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '1'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '2'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '3'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '4'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '5'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '6'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '7'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '8'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '9'

					x := HB_UTF8RAT ( ' IMAGESIZE ' , HMG_UPPER(Line) )

					if x == 0
						_TbButtonImageWidth	:= ''
						_TbButtonImageHeight	:= ''
					Else

						Numbers := ALLTRIM ( HB_USUBSTR ( Line , x + 11 , 255 ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )

						z := HB_UAT ( ',' , Numbers )

						_TbButtonImageWidth	:= ALLTRIM ( HB_ULEFT ( Numbers , z - 1 ) )
						_TbButtonImageHeight	:= ALLTRIM ( HB_URIGHT ( Numbers , HMG_LEN( Numbers ) - z ) )

					EndIf

				EndIf

				Line := ALLTRIM(Line)

				* Get ButtonSize

				Line := ALLTRIM(Line)

				if 	HB_URIGHT ( Line , 1 ) == '0'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '1'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '2'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '3'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '4'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '5'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '6'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '7'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '8'	;
					.Or. 				;
					HB_URIGHT ( Line , 1 ) == '9'

					x := HB_UTF8RAT ( ' BUTTONSIZE ' , HMG_UPPER(Line) )

					_TbName := ALLTRIM ( HB_ULEFT ( Line , x ) )

					cTemp := ALLTRIM( HB_USUBSTR( Line , x+12 , 255 ) )

					x := HB_UAT ( ',' , cTemp )

					_TbButtonWidth := HB_ULEFT ( cTemp , x - 1 )

					_TbButtonHeight := HB_USUBSTR ( cTemp , x + 1 , 255 )

				Else

					_TbButtonWidth	:= '64'
					_TbButtonHeight	:= '64'

				EndIf

			Elseif HMG_UPPER (Line) = 'BUTTON '

				* Get Group

				if HB_URIGHT ( HMG_UPPER (Line) , 6 ) == ' GROUP'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) -6 ) )
					aadd ( _TbGroups , .T. )
				Else
					aadd ( _TbGroups , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get Check

				if HB_URIGHT ( HMG_UPPER (Line) , 6 ) == ' CHECK'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) -6 ) )
					aadd (  _TbChecks , .T. )
				Else
					aadd ( _TbChecks , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get WholeDropDown

				if HB_URIGHT ( HMG_UPPER (Line) , 14 ) == ' WHOLEDROPDOWN'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 14 ) )
					aadd (  _TbWholeDropDowns , .T. )
				Else
					aadd ( _TbWholeDropDowns , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get DropDown

				if HB_URIGHT ( HMG_UPPER (Line) , 9 ) == ' DROPDOWN'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 9 ) )
					aadd (  _TbDropDowns , .T. )
				Else
					aadd ( _TbDropDowns , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get AutoSize

				if HB_URIGHT ( HMG_UPPER (Line) , 9 ) == ' AUTOSIZE'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 9 ) )
					aadd ( _TbAutoSizes , .T. )
				Else
					aadd ( _TbAutoSizes , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get Separator

				if HB_URIGHT ( HMG_UPPER (Line) , 10 ) == ' SEPARATOR'
					Line := ALLTRIM ( HB_ULEFT ( Line , HMG_LEN(Line) - 10 ) )
					aadd ( _TbSeparators , .T. )
				Else
					aadd ( _TbSeparators , .F. )
				EndIf

				Line := ALLTRIM(Line)

				* Get ToolTip

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' TOOLTIP "' , HMG_UPPER(Line) )

					if x > 0
						aadd ( _TbToolTips , ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						aadd( _TbToolTips , '' )
					EndIf

				Else
					aadd ( _TbToolTips , ''	)
				EndIf

				* Get Action

				x := HB_UTF8RAT ( ' ACTION ' , HMG_UPPER(Line) )

				if x > 0 .and. !IsLiteral ( Line , x )
					aadd ( _TbActions , HB_USUBSTR ( Line , x + 8 , 255 ) )
					Line := HB_ULEFT ( Line , x )
				Else
					aadd ( _TbActions , '' )
				EndIf

				Line := ALLTRIM(Line)

				* Get Picture

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' PICTURE "' , HMG_UPPER(Line) )

					if x > 0
						aadd ( _TbPictures , ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						aadd( _TbPictures , '' )
					EndIf

				Else
					aadd ( _TbPictures , ''	)
				EndIf

				* Get Caption

				if HB_URIGHT ( Line , 1 ) == '"'

	                                x := HB_UTF8RAT ( ' CAPTION "' , HMG_UPPER(Line) )

					if x > 0
						aadd ( _TbCaptions , ALLTRIM ( HB_USUBSTR ( Line , x + 10 , HMG_LEN(Line) - ( x + 10 ) ) ) )
						Line := ALLTRIM ( HB_ULEFT ( Line , x ) )
					Else
						aadd( _TbCaptions , '' )
					EndIf

				Else
					aadd ( _TbCaptions , ''	)
				EndIf

				* Get Name

				Line := ALLTRIM(Line)

				Line := HB_URIGHT ( Line , HMG_LEN(Line) - 7 )

				Line := ALLTRIM(Line)

				aadd ( _TbNames , Line )

				aadd ( aList ,  Line )

			EndIf

		Next i

	EndIf

Return aList

*------------------------------------------------------------------------------*
Procedure _Spx_BuildToolBar
*------------------------------------------------------------------------------*
Local i
Local Menu

	If Empty(_TbName)
		MsgStop( aMsgs [ 199 ] ,"HMG IDE")
		Return
	EndIf

	Menu := Space(4) + Space(4) + 'DEFINE TOOLBAR ' + _TbName

	if .Not. Empty (_TbButtonWidth) .and. .Not. Empty (_TbButtonHeight)
		Menu := Menu + ' BUTTONSIZE ' + ALLTRIM(_TbButtonWidth) + ',' + ALLTRIM(_TbButtonHeight)
	EndIf

	if .Not. Empty (_TbButtonImageWidth) .and. .Not. Empty (_TbButtonImageHeight)
		Menu := Menu + ' IMAGESIZE ' + ALLTRIM(_TbButtonImageWidth) + ',' + ALLTRIM(_TbButtonImageHeight)
	EndIf

	If _TbStrictWidth == .T.
		Menu := Menu + ' STRICTWIDTH'
	EndIf

	Menu := Menu + ' FONT ' + chr(34) + _TbFontName + chr(34)

	Menu := Menu + ' SIZE ' + ALLTRIM(STR(_TbFontSize))

	If _TbFontBold == .T.
		Menu := Menu + ' BOLD'
	EndIf

	If _TbFontItalic == .T.
		Menu := Menu + ' ITALIC'
	EndIf

	If _TbFontUnderLine == .T.
		Menu := Menu + ' UNDERLINE'
	EndIf

	If _TbFontStrikeout == .T.
		Menu := Menu + ' STRIKEOUT'
	EndIf

	If .Not. Empty(_TbToolTip)
		Menu := Menu + ' TOOLTIP ' +  + chr(34) + _TbToolTip + chr(34)
	EndIf

	If _TbFlat == .T.
		Menu := Menu + ' FLAT'
	EndIf

	If _TbBottom == .T.
		Menu := Menu + ' BOTTOM'
	EndIf

	If _TbRightText == .T.
		Menu := Menu + ' RIGHTTEXT'
	EndIf

	If _TbBorder == .T.
		Menu := Menu + ' BORDER'
	EndIf

	If _TbBreak == .T.
		Menu := Menu + ' BREAK'
	EndIf

	Menu := Menu + CRLF

	For i := 1 To TbDesigner.List1.ItemCount

		* Create Command

		* Button

		If Empty (_TbNames [i])
			MsgStop( aMsgs [ 143 ] + " (Item: " + ALLTRIM(STR(i)) + ")" ,"HMG IDE")
			Return
		EndIf

		If _TbDropDowns[i] == .T. .and. _TbWholeDropDowns[i] == .T.
			MsgStop( aMsgs [ 144 ] + ALLTRIM(STR(i)) + ")","HMG IDE")
			Return
		EndIf

		if Empty ( _TbPictures[i] )
			MsgStop( aMsgs [ 145 ] + ALLTRIM(STR(i)) + ")","HMG IDE")
			Return
		endif

		Menu := Menu + Space(8) + Space(4) + 'BUTTON ' + _TbNames [i] ;
			+ if ( !Empty(_TbCaptions[i])	, ' CAPTION '	+ chr(34) + _TbCaptions[i] + chr(34) , '' ) ;
			+ if ( !Empty(_TbPictures[i])	, ' PICTURE '	+ chr(34) + _TbPictures[i] + chr(34) , '' ) ;
			+ if ( ((!Empty(_TbActions[i])) .and. (_TbWholeDropDowns[i] == .F.))	, ' ACTION '	+ _TbActions[i]	, '' ) ;
			+ if ( !Empty(_TbToolTips[i]) , ' TOOLTIP ' + chr(34) + _TbToolTips[i]	+ chr(34) , '' ) ;
			+ if ( _TbSeparators[i]	== .T. , ' SEPARATOR', '' ) ;
			+ if ( _TbAutoSizes[i]	== .T. , ' AUTOSIZE', '' ) ;
			+ if ( _TbDropDowns[i]	== .T. , ' DROPDOWN', '' ) ;
			+ if ( _TbWholeDropDowns[i] == .T. , ' WHOLEDROPDOWN', '' ) ;
			+ if ( _TbChecks[i]	== .T. , ' CHECK', '' ) ;
			+ if ( _TbGroups[i]	== .T. , ' GROUP', '' ) ;
			+ CRLF

	Next i

	Menu := Menu + Space(4) + Space(4) + 'END TOOLBAR' + CRLF

	__MVPUT ( HMG_UPPER ( ALLTRIM ( _TbName ) ) + 'SpxToolBar' , Menu )

	DesignFormModified := .T.

	TbDesigner.Release

Return

*------------------------------------------------------------------------------*
Procedure _Spx_TbProperties
*------------------------------------------------------------------------------*
	Define Window TbProperties ;
		At 0,0 ;
		Width 380 ;
		Height GetTitleHeight() + 310 + 2 ;
		Title aMsgs [ 195 ] ;
		Modal ;
		NoSize

		ON KEY ESCAPE	Action	( ;
				ThisWindow.Release ;
				)

		Define Frame Frame1
			Row 9
			Col 10
			Width 235
			Height 286
		End Frame

		Define Label Label0
			Row 23
			Col 25
			Width 90
			Value aMsgs [ 147 ]
		End Label
		Define TextBox Text0
			Row 20
			Col 110
			Value _TbName
			ReadOnly .T.
			TabStop .f.
		End TextBox

		Define Label Label1
			Row 53
			Col 25
			Width 80
			Value aMsgs [ 148 ]
		End Label
		Define TextBox Text1
			Row 50
			Col 110
			Value _TbButtonWidth
		End TextBox

		Define Label Label2
			Row 83
			Col 25
			Width 80
			Value aMsgs [ 149 ]
		End Label
		Define TextBox Text2
			Row 80
			Col 110
			Value _TbButtonHeight
		End TextBox

		Define Label Label2a
			Row 113
			Col 25
			Width 85
			Value aMsgs [ 150 ]
		End Label
		Define TextBox Text2a
			Row 110
			Col 110
			Value _TbButtonImageWidth
		End TextBox

		Define Label Label2b
			Row 143
			Col 25
			Width 80
			Value aMsgs [ 151 ]
		End Label
		Define TextBox Text2b
			Row 140
			Col 110
			Value _TbButtonImageHeight
		End TextBox

		Define Label Label3
			Row 173
			Col 25
			Width 80
			Value 'ToolTip:'
		End Label
		Define TextBox Text3
			Row 170
			Col 110
			Value _TbToolTip
		End TextBox

		Define Label Label5
			Row 203
			Col 25
			Width 60
			Value 'Flat:'
		End Label
		Define CheckBox Check5
			Row 200
			Col 100
			Width 20
			Value _TbFlat
		End CheckBox

		Define Label Label6
			Row 233
			Col 25
			Width 50
			Value 'Bottom:'
		End Label
		Define CheckBox Check6
			Row 230
			Col 100
			Width 20
			Value _TbBottom
		End CheckBox

		Define Label Label7
			Row 203
			Col 145
			Width 50
			Value 'RightText:'
		End Label
		Define CheckBox Check7
			Row 200
			Col 215
			Width 20
			Value _TbRightText
		End CheckBox

		Define Label Label8
			Row 233
			Col 145
			Width 50
			Value 'Border:'
		End Label
		Define CheckBox Check8
			Row 230
			Col 215
			Width 20
			Value _TbBorder
		End CheckBox

		Define Label Label9
			Row 263
			Col 25
			Width 60
			Value 'StrictWidth:'
		End Label
		Define CheckBox Check9
			Row 260
			Col 100
			Width 20
			Value _TbStrictWidth
		End CheckBox

		Define Label Label10
			Row 263
			Col 145
			Width 50
			Value 'Break:'
		End Label
		Define CheckBox Check10
			Row 260
			Col 215
			Width 20
			Value _TbBreak
		End CheckBox

		Define Button Font
			Row 265
			Col 260
			Caption aMsgs [ 134 ]
			Action	TbFont()
		End Button

		* Ok / Cancel Buttons

		Define Button Ok
			Row 10
			Col 260
			Caption aMsgs [ 116 ]
			Action	( ;
				_TbName			:=  TbProperties.Text0.Value , ;
				_TbButtonWidth		:=  TbProperties.Text1.Value , ;
				_TbButtonHeight		:=  TbProperties.Text2.Value , ;
				_TbButtonImageWidth	:=  TbProperties.Text2a.Value , ;
				_TbButtonImageHeight	:=  TbProperties.Text2b.Value , ;
				_TbToolTip		:=  TbProperties.Text3.Value , ;
				_TbFlat			:=  TbProperties.Check5.Value , ;
				_TbBottom		:=  TbProperties.Check6.Value , ;
				_TbRightText		:=  TbProperties.Check7.Value , ;
				_TbBorder		:=  TbProperties.Check8.Value , ;
				_TbStrictWidth		:=  TbProperties.Check9.Value , ;
				_TbBreak		:=  TbProperties.Check10.Value , ;
				_HMG_SYSDATA [ 257 ]	:= .F. , ;
				ThisWindow.Release ;
				)
		End Button
		Define Button Cancel
			Row 40
			Col 260
			Caption aMsgs [ 117 ]
			Action	( ;
				_HMG_SYSDATA [ 257 ] := .T. , ;
				ThisWindow.Release ;
				)
		End Button

	End Window

	setfocus ( GetControlHandle ( 'Text1' , 'TbProperties' ) )

	TbProperties.Center
	TbProperties.Activate

Return
*------------------------------------------------------------------------------*
Procedure _Spx_TbFont
*------------------------------------------------------------------------------*
Local aTemp := {}

	aTemp := GetFont( _TbFontName , _TbFontSize , _TbFontBold , _TbFontItalic , {0,0,0} , _TbFontUnderLine , _TbFontStrikeout , Nil )

	If .Not. Empty ( aTemp [1] )
		_TbFontName		:= aTemp[1]
		_TbFontSize		:= aTemp[2]
		_TbFontBold		:= aTemp[3]
		_TbFontItalic		:= aTemp[4]
		_TbFontUnderLine	:= aTemp[6]
		_TbFontStrikeout	:= aTemp[7]
	EndIf

Return
*------------------------------------------------------------------------------*
Procedure InitControlCounters()
*------------------------------------------------------------------------------*

	BrowseCount		:= 0
	TreeCount		:= 0
	CurrentControl 		:= 0
	ButtonCount		:= 0
	CheckBoxCount		:= 0
	ListBoxCount		:= 0
	ComboBoxCount		:= 0
	CheckButtonCount	:= 0
	GridCount		:= 0
	FrameCount		:= 0
	TabCount		:= 0
	ImageCount		:= 0
	AnimateCount		:= 0
	DatepickerCount		:= 0
	TextBoxCount		:= 0
	EditBoxCount		:= 0
	LabelCount		:= 0
	PlayerCount		:= 0
	ProgressBarCount	:= 0
	RadioGroupCount		:= 0
	SliderCount		:= 0
	SpinnerCount		:= 0
	HyperLinkCount		:= 0
	MonthCalendarCount	:= 0
	RichEditCount		:= 0
	IpAddressCount		:= 0
	TimerCount		:= 0
	ActivexCount		:= 0

Return




Procedure ResetToolBar

SendMessage( GetControlHandle('Control_01','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_02','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_03','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_04','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_05','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_06','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_07','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_08','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_09','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_10','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_11','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_12','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_13','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_14','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_15','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_16','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_17','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_18','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_19','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_20','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_21','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_22','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_23','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_24','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_25','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_26','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_27','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )
SendMessage( GetControlHandle('Control_35','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )

SendMessage( GetControlHandle('Control_36','Form_Main') , BM_SETCHECK  , BST_UNCHECKED , 0 )

Form_Main.user.value := 0

Return

*-----------------------------------------------------------------------------*
Procedure EditNewReport(FileName)
*-----------------------------------------------------------------------------*
Local i , tmp

	rep_build_step_1.title		:= aMsgs [ 228 ]
	rep_build_step_1.label_1.value	:= aMsgs [ 229 ]
	rep_build_step_1.label_2.value	:= aMsgs [ 230 ]
	rep_build_step_1.label_3.value	:= aMsgs [ 231 ]
	rep_build_step_1.label_4.value	:= aMsgs [ 232 ]
	rep_build_step_1.label_5.value	:= aMsgs [ 233 ]
	rep_build_step_1.label_6.value	:= aMsgs [ 234 ]
	rep_build_step_1.cancel.caption	:= aMsgs [ 235 ]
	rep_build_step_1.next.caption	:= aMsgs [ 236 ]

	rep_build_step_2.title		:= aMsgs [ 237 ]
	rep_build_step_2.label_1.value	:= aMsgs [ 238 ]
	rep_build_step_2.label_2.value	:= aMsgs [ 239 ]
	rep_build_step_2.label_3.value	:= aMsgs [ 240 ]
	rep_build_step_2.cancel.caption	:= aMsgs [ 235 ]
	rep_build_step_2.back.caption	:= aMsgs [ 241 ]

	rep_build_step_3.title		:= aMsgs [ 242 ]
	rep_build_step_3.label_1.value	:= aMsgs [ 243 ]
	rep_build_step_3.titles.caption	:= aMsgs [ 244 ]
	rep_build_step_3.totals.caption	:= aMsgs [ 245 ]
	rep_build_step_3.formats.caption:= aMsgs [ 246 ]
	rep_build_step_3.font.caption	:= aMsgs [ 247 ]
	rep_build_step_3.preview.caption:= aMsgs [ 248 ]
	rep_build_step_3.label_2.value	:= aMsgs [ 249 ]
	rep_build_step_3.cancel.caption	:= aMsgs [ 235 ]
	rep_build_step_3.back.caption	:= aMsgs [ 241 ]
	rep_build_step_3.finish.caption	:= aMsgs [ 254 ]

	reporttitlesoptions.title		:= aMsgs [ 255 ]
	reporttitlesoptions.label_1.value	:= aMsgs [ 256 ]
	reporttitlesoptions.close.caption	:= aMsgs [ 257 ]

	reportsummaryoptions.title		:= aMsgs [ 258 ]
	reportsummaryoptions.label_1.value	:= aMsgs [ 259 ]
	reportsummaryoptions.label_2.value	:= aMsgs [ 260 ]
	reportsummaryoptions.close.caption	:= aMsgs [ 257 ]

	reportformatoptions.title		:= aMsgs [ 261 ]
	reportformatoptions.label_1.value	:= aMsgs [ 262 ]
	reportformatoptions.label_2.value	:= aMsgs [ 263 ]
	reportformatoptions.close.caption	:= aMsgs [ 257 ]


	reportformatoptions.formats.header(1)	:= aMsgs [ 264 ] // Field
	reportformatoptions.formats.header(2)	:= aMsgs [ 265 ] // Mask

	reportsummaryoptions.fields.header(1)	:= aMsgs [ 264 ] // Field
	reportsummaryoptions.fields.header(2)	:= aMsgs [ 266 ] // Totalize

	reporttitlesoptions.titles.header(1)	:= aMsgs [ 264 ] // Field
	reporttitlesoptions.titles.header(2)	:= aMsgs [ 267 ] // Title


	rep_build_step_1.movetoselected.tooltip	:= aMsgs [ 268 ]
	rep_build_step_1.addall.tooltip		:= aMsgs [ 269 ]
	rep_build_step_1.movetoavailable.tooltip:= aMsgs [ 270 ]
	rep_build_step_1.removeall.tooltip	:= aMsgs [ 271 ]
	rep_build_step_1.addcustom.tooltip	:= aMsgs [ 272 ]
	rep_build_step_1.removecustom.tooltip	:= aMsgs [ 273 ]


	rep_build_step_3.grouping.caption	:= aMsgs [ 283 ]
	groupingoptions.label_1.value		:= aMsgs [ 284 ]
	groupingoptions.label_2.value		:= aMsgs [ 285 ]
	groupingoptions.label_3.value		:= aMsgs [ 286 ]
	groupingoptions.ok.caption		:= aMsgs [ 116 ]
	groupingoptions.cancel.caption		:= aMsgs [ 117 ]



	cCurrentReportFileName := FileName

	tmp := HB_MEMOREAD ( cCurrentReportFileName )

	rep_build_step_1.tables.deleteallitems
	rep_build_step_1.availablefields.deleteallitems
	rep_build_step_1.selectedfields.deleteallitems


	aTables := DIRECTORY("*.dbf")


	For i := 1 To HMG_LEN (aTables)

		rep_build_step_1.tables.additem ( HMG_UPPER ( HB_ULEFT ( aTables[i][1] , HMG_LEN(aTables[i][1]) - 4 ) ) )

	Next i



	If mlcount( tmp ) > 10

		LoadNewReport(FileName)

	EndIf



	rep_build_step_1.center
	rep_build_step_2.center
	rep_build_step_3.center

	_ReportBuilderActive := .T.

	rep_build_step_1.Show

	rep_build_step_1.cancel.setfocus


Return

*-----------------------------------------------------------------------------*
Procedure rep_build_step_1_tables_onchange
*-----------------------------------------------------------------------------*
Local i
Loca z

	i := rep_build_step_1.tables.value

	if i == 0
		return
	endif

	Use

	Use ( rep_build_step_1.tables.item(i) ) Shared

	rep_build_step_1.availablefields.deleteallitems
	rep_build_step_1.selectedfields.deleteallitems

	For z := 1 To fCount()
		rep_build_step_1.availablefields.additem ( rep_build_step_1.tables.item(i) + '->'  + FieldName(z) )
	Next z

	rep_build_step_3.title.Value := Capitalize ( rep_build_step_1.tables.item(i) )

return


*-----------------------------------------------------------------------------*
Procedure rep_build_step_1_addall
*-----------------------------------------------------------------------------*
Local z , table , i , aTemp := {}

	i := rep_build_step_1.tables.value

	if i == 0
		return
	endif


	For z := 1 To rep_build_step_1.selectedfields.itemcount

		If HB_ULEFT ( rep_build_step_1.selectedfields.item(z) ,  2 ) == '* '

			aadd ( aTemp , rep_build_step_1.selectedfields.item(z) )

		EndIf

	Next z

	table := rep_build_step_1.tables.item(i)

	rep_build_step_1.selectedfields.deleteallitems
	rep_build_step_1.availablefields.deleteallitems

	For z := 1 To fCount()
		rep_build_step_1.selectedfields.additem ( table + '->' + FieldName(z) )
	Next z

	For z := 1 To HMG_LEN ( aTemp)
		rep_build_step_1.selectedfields.additem ( aTemp [z] )
	Next z


	resetformats()
	resettitles()
	resettotals()


Return

*-----------------------------------------------------------------------------*
Procedure rep_build_step_1_removeall
*-----------------------------------------------------------------------------*
Local z , table , i
Local aTemp := {}

	i := rep_build_step_1.tables.value

	if i == 0
		return
	endif

	table := rep_build_step_1.tables.item(i)

	For z := 1 To rep_build_step_1.selectedfields.itemcount

		If HB_ULEFT ( rep_build_step_1.selectedfields.item(z) ,  2 ) == '* '

			aadd ( aTemp , rep_build_step_1.selectedfields.item(z) )

		EndIf

	Next z

	rep_build_step_1.selectedfields.deleteallitems
	rep_build_step_1.availablefields.deleteallitems

	For z := 1 To fCount()
		rep_build_step_1.availablefields.additem ( table + '->' + FieldName(z) )
	Next z

	For z := 1 To HMG_LEN ( aTemp)
		rep_build_step_1.selectedfields.additem ( aTemp [z] )
	Next z

	resetformats()
	resettitles()
	resettotals()

return

*-----------------------------------------------------------------------------*
Procedure rep_build_step_1_movetoselected
*-----------------------------------------------------------------------------*
Local i
Local cField

	i := rep_build_step_1.availablefields.value

	if i == 0
		return
	endif

	cField := rep_build_step_1.availablefields.item(i)

	rep_build_step_1.selectedfields.additem ( cField )

	rep_build_step_1.availablefields.deleteitem(i)

	resetformats()
	resettitles()
	resettotals()

return

*-----------------------------------------------------------------------------*
Procedure rep_build_step_1_movetoavailable
*-----------------------------------------------------------------------------*
Local i
Local cField

	i := rep_build_step_1.selectedfields.value

	if i == 0
		return
	endif

	cField := rep_build_step_1.selectedfields.item(i)

	If HB_ULEFT ( cField , 2 ) == '* '
		MsgStop( 'Use [-] button to remove a custom field or expression' , 'HMG IDE' )
		return
	endif

	rep_build_step_1.availablefields.additem ( cField )

	rep_build_step_1.selectedfields.deleteitem(i)

	resetformats()
	resettitles()
	resettotals()


return

*-----------------------------------------------------------------------------*
procedure rep_build_step_3_finish
*-----------------------------------------------------------------------------*
Local cReport

	rep_build_step_3.hide

	cReport := GenReport(.F.)

	SaveString ( cCurrentReportFileName , cReport )

	_ReportBuilderActive := .F.

return

*-----------------------------------------------------------------------------*
Procedure SaveString ( cFileName , cString, lUTF8 )
*-----------------------------------------------------------------------------*
 Local nOutfile := NIL
   lUTF8 := NIL

   HB_MEMOWRIT (cFileName, cString)

/*
	nOutfile := FCREATE( cFileName , FC_NORMAL)

   IF ValType(lUTF8) == "L" .AND. lUTF8 == .T.
      #define UTF8_BOM  ( HB_BCHAR (0xEF) + HB_BCHAR (0xBB) + HB_BCHAR (0xBF) )
      FWRITE(nOutfile, BOM_UTF8 , HB_BLEN (BOM_UTF8))
   ENDIF

//	FWRITE(nOutfile , cString , HMG_LEN ( cString ) )
 FWRITE(nOutfile , cString , HB_BLEN ( cString ) )

        FCLOSE(nOutfile)
*/
Return

*-----------------------------------------------------------------------------*
Function GetPaperSize()
*-----------------------------------------------------------------------------*
Local cRet

	If	rep_build_step_2.PaperSize.DisplayValue == 'Letter'

		cRet := 'PRINTER_PAPER_LETTER'

	ElseIf	rep_build_step_2.PaperSize.DisplayValue == 'A4'

		cRet := 'PRINTER_PAPER_A4'

	ElseIf	rep_build_step_2.PaperSize.DisplayValue == 'Legal'

		cRet := 'PRINTER_PAPER_LEGAL'

	EndIf

Return cRet

*-----------------------------------------------------------------------------*
Function GetOrientation()
*-----------------------------------------------------------------------------*
Local cRet

	If	rep_build_step_2.Orientation.DisplayValue == 'Portrait'

		cRet := 'PRINTER_ORIENT_PORTRAIT'

	ElseIf	rep_build_step_2.Orientation.DisplayValue == 'Landscape'

		cRet := 'PRINTER_ORIENT_LANDSCAPE'

	EndIf

Return cRet

*-----------------------------------------------------------------------------*
Function GetPaperWidth()
*-----------------------------------------------------------------------------*
Local nRet

	If	rep_build_step_2.PaperSize.DisplayValue == 'Letter'

		If	rep_build_step_2.Orientation.DisplayValue == 'Portrait'

			nRet := 215.9

		ElseIf	rep_build_step_2.Orientation.DisplayValue == 'Landscape'

			nRet := 279.4

		EndIf

	ElseIf	rep_build_step_2.PaperSize.DisplayValue == 'A4'

		If	rep_build_step_2.Orientation.DisplayValue == 'Portrait'

			nRet := 210

		ElseIf	rep_build_step_2.Orientation.DisplayValue == 'Landscape'

			nRet := 297

		EndIf

	ElseIf	rep_build_step_2.PaperSize.DisplayValue == 'Legal'

		If	rep_build_step_2.Orientation.DisplayValue == 'Portrait'

			nRet := 215.9

		ElseIf	rep_build_step_2.Orientation.DisplayValue == 'Landscape'

			nRet := 355.6

		EndIf

	EndIf

Return nRet

*-----------------------------------------------------------------------------*
Procedure PreviewNewReport
*-----------------------------------------------------------------------------*
Local i

	i := rep_build_step_1.tables.value

	SaveString ( '_TempReport.Rmg' , GenReport(.T.) )

	SaveString ( '_TempTable.Txt' , rep_build_step_1.tables.item(i) )

	Use

	SaveString ( 'RePreviewSemaforo.Txt' , '' )

	GenerateReportApps()

	rep_build_step_3.preview.enabled	:= .f.
	rep_build_step_3.finish.enabled		:= .f.
	rep_build_step_3.back.enabled		:= .f.
	rep_build_step_3.cancel.enabled		:= .f.
	rep_build_step_3.title.enabled		:= .f.
	rep_build_step_3.totals.enabled		:= .f.
	rep_build_step_3.titles.enabled		:= .f.
	rep_build_step_3.formats.enabled	:= .f.
	rep_build_step_3.font.enabled		:= .f.
	rep_build_step_3.grouping.enabled	:= .f.


	rep_build_step_3.label_3.value	:= aMsgs [ 250 ]
	rep_build_step_3.label_4.value	:= aMsgs [ 251 ]
	rep_build_step_3.label_5.value	:= aMsgs [ 253 ]


	DELETE FILE ERROR.LOG

	EXECUTE FILE "_CompileReport.Bat" PARAMETERS "_PreviewReport" HIDE

	DO WHILE FILE('RePreviewSemaforo.Txt')
		DO EVENTS
		IF FILE ('ERROR.LOG')
			MSGSTOP ( aMsgs [089] , 'HMG-IDE')
			EXIT
		ENDIF
	ENDDO

	rep_build_step_3.label_3.value		:= ''
	rep_build_step_3.label_4.value		:= ''
	rep_build_step_3.label_5.value		:= ''

	rep_build_step_3.preview.enabled	:= .t.
	rep_build_step_3.finish.enabled		:= .t.
	rep_build_step_3.back.enabled		:= .t.
	rep_build_step_3.cancel.enabled		:= .t.
	rep_build_step_3.title.enabled		:= .t.
	rep_build_step_3.totals.enabled		:= .t.
	rep_build_step_3.titles.enabled		:= .t.
	rep_build_step_3.formats.enabled	:= .t.
	rep_build_step_3.font.enabled		:= .t.
	rep_build_step_3.grouping.enabled	:= .t.


	DELETE FILE _TempReport.Rmg
	DELETE FILE _TempTable.Txt
	DELETE FILE _PreviewReport.Prg
	DELETE FILE _PreviewReport.Exe
	DELETE FILE _CompileReport.Bat


	Use ( rep_build_step_1.tables.item(i) ) Shared

Return

Procedure GenerateReportApps
Local CR
Local c

	CR := CRLF

	c := ''

	c+='#include "hmg.ch"' + CR


	c+='Function Main ' + CR
	c+='DEFINE WINDOW Win_1 ROW 0 COL 0 WIDTH 400 HEIGHT 400 TITLE "Report Preview" MAIN  ON INIT TEST()' + CR
	c+='END WINDOW' + CR
	c+='Win_1.Minimize' + CR
	c+='Win_1.Activate' + CR
	c+='Return' + CR
	c+='Function Test' + CR
	c+='Use ( HB_MEMOREAD("_TempTable.Txt") ) Shared' + CR
	c+='LOAD REPORT _TempReport' + CR


	c+='bSaveHandler := errorblock( { |x| break(x) } )' + CR

	c+='BEGIN SEQUENCE' + CR


	c+='     EXECUTE REPORT _TempReport PREVIEW ' + CR
	c+='     DELETE FILE RePreviewSemaforo.Txt' + CR
	c+='     Exit Program' + CR
	c+='     QUIT' + CR

	c+='RECOVER USING oError' + CR


	c+='     MSGSTOP( oError:Description + " " + oError:Operation  , "Report Error:" )' + CR

	c+='     DELETE FILE RePreviewSemaforo.Txt' + CR
	c+='     Exit Program' + CR

	c+='     QUIT' + CR
	c+='END' + CR

	c+='  errorblock( bSaveHandler )' + CR



	SaveString ( '_PreviewReport.Prg' , c )

	c := ''

	c+='@ECHO OFF' + CR

IF Form_Main.IsBuild64.CHECKED == .T.   // HMG_IS64BITS() == .T.
	c+='call ' + cHmgFolder + '\build64.bat %1 %2' + CR
ELSE
	c+='call ' + cHmgFolder + '\build.bat %1 %2' + CR
ENDIF

	SaveString ( '_CompileReport.Bat' , c )

Return

*-----------------------------------------------------------------------------*
Function GenReport ( lPreview )
*-----------------------------------------------------------------------------*
LOCAL aTotalize, cField
Local cReport := ''
Local CR := CRLF
Local i, r

Local nPaperWidth
Local nColmunCount
Local nColumnSpace
Local nMargin
Local nAvailableWidth
Local nTotalFieldWidth
Local nFieldWidth
Local nCurrentCol
Local cExp


	nPaperWidth := GetPaperWidth()
	nColmunCount := rep_build_step_1.selectedfields.itemcount

	nColumnSpace := 2
	nMargin := 12
	nAvailableWidth := nPaperWidth - ( nMargin * 2 )

	nTotalFieldWidth := nAvailableWidth  - ( nColumnSpace * nColmunCount )

	nFieldWidth := Int ( nTotalFieldWidth / nColmunCount )

	nCurrentCol := nMargin


	cReport+= 'DEFINE REPORT TEMPLATE'                 + CR
	cReport+= ''                                       + CR
	cReport+= '    BEGIN LAYOUT'                       + CR
	cReport+= ''                                       + CR
	cReport+= '        PAPERSIZE   ' + GetPaperSize()  + CR
	cReport+= '        ORIENTATION ' + GetOrientation()+ CR
	cReport+= ''                                       + CR
	cReport+= '    END LAYOUT'                         + CR
	cReport+= ''                                       + CR
	cReport+= '    BEGIN HEADER'                       + CR
	cReport+= ''                                       + CR
	cReport+= '        BANDHEIGHT 27'                  + CR
	cReport+= ''                                       + CR

	cReport+= '        BEGIN TEXT'                     + CR
	cReport+= '            EXPRESSION  "' + rep_build_step_3.title.value + '"' + CR
	cReport+= '            ROW         11'             + CR
	cReport+= '            COL         10'             + CR
	cReport+= '            WIDTH       100'            + CR
	cReport+= '            HEIGHT      10'             + CR
	cReport+= '            FONTNAME    "'  + _ReportFontName +  '"'        + CR
	cReport+= '            FONTSIZE    20'             + CR
	cReport+= '            FONTBOLD    .F.'            + CR
	cReport+= '        END TEXT'                       + CR
	cReport+= ''                                       + CR
	cReport+= '        BEGIN LINE'                     + CR
	cReport+= '            FROMROW     21'             + CR
	cReport+= '            FROMCOL     10'             + CR
	cReport+= '            TOROW       21'             + CR
	cReport+= '            TOCOL       ' +  ALLTRIM(STR(Int(GetPaperWidth()) - 12 )) + CR
	cReport+= '            PENWIDTH    0.2'            + CR
	cReport+= '        END LINE'                       + CR
	cReport+= ''                                       + CR


	nCurrentCol := nMargin

	For i := 1 To rep_build_step_1.selectedfields.itemcount

		cReport+= '        BEGIN TEXT'                     + CR
		cReport+= '            EXPRESSION "' + reporttitlesoptions.titles.cell(i,2) +'"'+ CR
		cReport+= '            ROW         22'              + CR
		cReport+= '            COL         ' + ALLTRIM ( STR ( nCurrentCol ) )           + CR
		cReport+= '            WIDTH       ' + ALLTRIM(STR( nFieldWidth ))           + CR
		cReport+= '            HEIGHT      8'              + CR
		cReport+= '            FONTNAME    "' + _ReportFontName + '"'        + CR
		cReport+= '            FONTSIZE    ' +  ALLTRIM(STR(_ReportFontSize)) + CR
		cReport+= '            FONTBOLD    .T.'            + CR

		IF TYPE ( rep_build_step_1.selectedfields.item(i) ) == 'N'
			cReport+= '            ALIGNMENT RIGHT'             + CR
		ENDIF

		cReport+= '        END TEXT'                       + CR
		cReport+= ''                                       + CR

		nCurrentCol += nFieldWidth + nColumnSpace

	Next i

	cReport+= '        BEGIN LINE'                     + CR
	cReport+= '            FROMROW     27'             + CR
	cReport+= '            FROMCOL     10'             + CR
	cReport+= '            TOROW       27'             + CR
	cReport+= '            TOCOL       ' +  ALLTRIM(STR(Int(GetPaperWidth()) - 12 )) + CR
	cReport+= '            PENWIDTH    0.2'            + CR
	cReport+= '        END LINE'                       + CR
	cReport+= ''                                       + CR
	cReport+= '    END HEADER'                         + CR
	cReport+= ''                                       + CR
	cReport+= '    BEGIN DETAIL'                       + CR
	cReport+= ''                                       + CR
	cReport+= '        BANDHEIGHT      ' +  ALLTRIM(STR(int(_ReportFontSize/2))) + CR
	cReport+= ''                                       + CR

	nCurrentCol := nMargin

	For i := 1 To rep_build_step_1.selectedfields.itemcount

		cReport+= '        BEGIN TEXT'                     + CR


		cExp := rep_build_step_1.selectedfields.item(i)

		If HB_ULEFT ( cExp , 2 ) == '* '

		        If lPreview

				cExp := '"' + HB_USUBSTR ( cExp , 3 , 255 ) + '"'

			Else

				cExp := HB_USUBSTR ( cExp , 3 , 255 )

			EndIf

		EndIf

		If Empty ( ReportFormatOptions.formats.cell(i,2) )

			cReport+= '            EXPRESSION ' + cExp + CR

		Else

			cReport+= '            EXPRESSION Transform( ' + cExp + ' , "' +  ReportFormatOptions.formats.cell(i,2)  + '")'   + CR

		EndIf

		cReport+= '            ROW         2'             + CR
		cReport+= '            COL         ' + ALLTRIM ( STR ( nCurrentCol ) )           + CR
		cReport+= '            WIDTH       ' + ALLTRIM(STR( nFieldWidth ))           + CR
		cReport+= '            HEIGHT      4'             + CR
		cReport+= '            FONTNAME    "' + _ReportFontName   + '"'        + CR
		cReport+= '            FONTSIZE    ' +   ALLTRIM(STR(_ReportFontSize))  + CR

		If _ReportFontBold

			cReport+= '            FONTBOLD    .T.' + CR

		Else

			cReport+= '            FONTBOLD    .F.' + CR

		EndIf

		If _ReportFontItalic

			cReport+= '            FONTITALIC  .T.' + CR

		Else

			cReport+= '            FONTITALIC  .F.' + CR

		EndIf


		IF TYPE ( rep_build_step_1.selectedfields.item(i) ) == 'N'
			cReport+= '            ALIGNMENT   RIGHT'             + CR
		ENDIF

		cReport+= '        END TEXT'                       + CR
		cReport+= ''                                       + CR

		nCurrentCol += nFieldWidth + nColumnSpace

	Next i

	cReport+= '    END DETAIL'                         + CR
	cReport+= ''                                       + CR
	cReport+= '    BEGIN FOOTER'                       + CR
	cReport+= ''                                       + CR
	cReport+= '        BANDHEIGHT	23'                + CR
	cReport+= ''                                       + CR
	cReport+= '        BEGIN LINE'                     + CR
	cReport+= '            FROMROW     4'              + CR
	cReport+= '            FROMCOL     10'             + CR
	cReport+= '            TOROW       4'              + CR
	cReport+= '            TOCOL       ' + ALLTRIM(STR(Int(GetPaperWidth()) - 12 ))           + CR
	cReport+= '            PENWIDTH    0.1'            + CR
	cReport+= '        END LINE'                       + CR
	cReport+= ''                                       + CR
	cReport+= '        BEGIN TEXT'                     + CR
	cReport+= '            EXPRESSION  STR(_PageNo)'   + CR
	cReport+= '            ROW         6'              + CR
	cReport+= '            COL         '+ ALLTRIM(STR(GetPaperWidth() - 25 ))            + CR
	cReport+= '            WIDTH       100'            + CR
	cReport+= '            HEIGHT      10'             + CR
	cReport+= '            FONTNAME   "' + _ReportFontName  + '"'         + CR
	cReport+= '            FONTSIZE    9'              + CR
	cReport+= '            FONTBOLD    .T.'            + CR
	cReport+= '        END TEXT'                       + CR
	cReport+= ''                                       + CR
	cReport+= '        BEGIN TEXT'                     + CR
	cReport+= '            EXPRESSION  dtoc(Date())'   + CR
	cReport+= '            ROW         6'              + CR
	cReport+= '            COL         10'             + CR
	cReport+= '            WIDTH       100'            + CR
	cReport+= '            HEIGHT      10'             + CR
	cReport+= '            FONTNAME   "' + _ReportFontName + '"'         + CR
	cReport+= '            FONTSIZE    9'              + CR
	cReport+= '            FONTBOLD    .T.'            + CR
	cReport+= '        END TEXT'                       + CR
	cReport+= ''                                       + CR
	cReport+= '    END FOOTER'                         + CR

	aTotalize := {}

	For i := 1 To reportsummaryoptions.fields.ItemCount

		If reportsummaryoptions.fields.Cell ( i , 2 ) == '.T.'

			aadd ( aTotalize , i )

		EndIf

	Next i


	If HMG_LEN ( aTotalize ) > 0

		* Summary

		cReport+= ''                                       + CR
		cReport+= '    BEGIN SUMMARY'                      + CR
		cReport+= ''                                       + CR
		cReport+= '        BANDHEIGHT	23'                + CR
		cReport+= ''                                       + CR

		cReport+= '        BEGIN TEXT'                     + CR
		cReport+= '            EXPRESSION  "Total:"'       + CR
		cReport+= '            ROW         12'              + CR
		cReport+= '            COL         10'             + CR
		cReport+= '            WIDTH       100'            + CR
		cReport+= '            HEIGHT      10'             + CR
		cReport+= '            FONTNAME   "' + _ReportFontName  + '"'         + CR
		cReport+= '            FONTSIZE    9'              + CR
		cReport+= '            FONTBOLD    .T.'            + CR
		cReport+= '        END TEXT'                       + CR

		nCurrentCol := nMargin

		For i := 1 To reportsummaryoptions.fields.ItemCount

			r := aScan ( aTotalize , i )

			If r <> 0

				cReport+= ''                                       + CR
				cReport+= '        BEGIN TEXT'                     + CR

				cField := reportsummaryoptions.fields.cell(i,1)

				If HB_ULEFT ( cField , 2 ) == '* '

					cField := HB_USUBSTR ( cField , 3 , 255 )

				EndIf

				If Empty ( ReportFormatOptions.formats.cell(i,2) )

					cReport+= '            EXPRESSION  _dbSum("' + cField + '") '  + CR

				Else

					cReport+= '            EXPRESSION  Transform ( _dbSum("' + cField + '") , "' + ReportFormatOptions.formats.cell(i,2) +  '"  ) '  + CR

				EndIf

				cReport+= '            ROW         12'              + CR
				cReport+= '            COL         '+ ALLTRIM( STR( nCurrentCol ) )+ CR
				cReport+= '            WIDTH       ' + ALLTRIM(STR( nFieldWidth )) + CR
				cReport+= '            HEIGHT      10'             + CR
				cReport+= '            FONTNAME   "' + _ReportFontName + '"'         + CR
				cReport+= '            FONTSIZE    9'              + CR
				cReport+= '            FONTBOLD    .T.'            + CR
				cReport+= '            ALIGNMENT   RIGHT'          + CR
				cReport+= '        END TEXT'                       + CR
				cReport+= ''                                       + CR

			EndIf

			nCurrentCol += nFieldWidth + nColumnSpace

		Next i

		cReport+= '    END SUMMARY'                         + CR

	EndIf


	* Group Definition *********************************************

	if .not. empty ( ALLTRIM(groupingoptions.groupby.value) )

		cReport+= ''                                       + CR
		cReport+= '    BEGIN GROUP'+ CR
		cReport+= ''                                       + CR
		cReport+= '        GROUPEXPRESSION ' + ALLTRIM(groupingoptions.groupby.value) + CR
		cReport+= ''                                       + CR
		cReport+= '        BEGIN GROUPHEADER'+ CR
		cReport+= ''                                       + CR
		cReport+= '            BANDHEIGHT	15'+ CR
		cReport+= ''                                       + CR
		cReport+= '            BEGIN TEXT'+ CR

	        If lPreview

			cReport+= '                EXPRESSION ' + '"' + HB_UTF8STRTRAN(ALLTRIM(groupingoptions.groupheader.value) ,'"' , "'" ) + '"' + CR

		Else

			cReport+= '                EXPRESSION ' + ALLTRIM(groupingoptions.groupheader.value) + CR

		EndIf

		cReport+= '                ROW         5'+ CR
		cReport+= '                COL         5'+ CR
		cReport+= '                WIDTH       '+ ALLTRIM(STR(GetPaperWidth())) + CR
		cReport+= '                HEIGHT      20'+ CR
		cReport+= '                FONTNAME    "' + _ReportFontName + '"' + CR
		cReport+= '                FONTSIZE    '+ ALLTRIM(STR(_ReportFontSize))  + CR
		cReport+= '                FONTBOLD    .T.'+ CR
		cReport+= '                ALIGNMENT   CENTER' + CR
		cReport+= '            END TEXT'+ CR
		cReport+= ''                                       + CR
		cReport+= '        END GROUPHEADER'+ CR
		cReport+= ''                                       + CR
		cReport+= '        BEGIN GROUPFOOTER'+ CR
		cReport+= ''                                       + CR
		cReport+= '            BANDHEIGHT	15'+ CR
		cReport+= ''                                       + CR
		cReport+= '            BEGIN TEXT'+ CR

	        If lPreview

			cReport+= '                EXPRESSION ' + '"' + HB_UTF8STRTRAN(ALLTRIM(groupingoptions.groupfooter.value) ,'"' , "'" ) + '"' + CR

		Else

			cReport+= '                EXPRESSION ' + ALLTRIM(groupingoptions.groupfooter.value) + CR

		EndIf

		cReport+= '                ROW         5'+ CR
		cReport+= '                COL         5'+ CR
		cReport+= '                WIDTH       '+ ALLTRIM(STR(GetPaperWidth())) + CR
		cReport+= '                HEIGHT      20'+ CR
		cReport+= '                FONTNAME    "' + _ReportFontName + '"' + CR
		cReport+= '                FONTSIZE    '+ ALLTRIM(STR(_ReportFontSize)) + CR
		cReport+= '                FONTBOLD	.T.'+ CR
		cReport+= '                ALIGNMENT   CENTER' + CR
		cReport+= '            END TEXT'+ CR
		cReport+= ''                                       + CR
		cReport+= '        END GROUPFOOTER'+ CR
		cReport+= ''                                       + CR
		cReport+= '    END GROUP'+ CR

	endif

*******************************************************************************

	cReport+= ''                                       + CR
	cReport+= 'END REPORT'                             + CR

	cReport+= ''  + CR

	cReport+= '*_REPORT_BUILDER_DATA_BEGIN____________________________________'  + CR
	cReport+= '*'  + CR


		cReport+= '*_STEP_1_SELECTED_TABLE_________' + rep_build_step_1.tables.item(rep_build_step_1.tables.value) + CR



	For i := 1 To rep_build_step_1.availablefields.itemcount

		cReport+= '*_STEP_1_AVAILABLE_FIELDS_______' + rep_build_step_1.availablefields.item(i) + CR

	Next i


	For i := 1 To rep_build_step_1.selectedfields.itemcount

		cReport+= '*_STEP_1_SELECTED_FIELDS________' + rep_build_step_1.selectedfields.item(i) + CR

	Next i


		cReport+= '*_STEP_2_SELECTED_PAPER_SIZE____' + ALLTRIM(STR(rep_build_step_2.papersize.value)) + CR
		cReport+= '*_STEP_2_SELECTED_ORIENTATION___' + ALLTRIM(STR(rep_build_step_2.orientation.value)) + CR



		cReport+= '*_STEP_3_REPORT_TITLE___________' + ALLTRIM(rep_build_step_3.title.value) + CR



	For i := 1 To reporttitlesoptions.titles.itemcount

		cReport+= '*_STEP_3_TITLES_FIELD___________' + reporttitlesoptions.titles.cell(i,1) + CR

		cReport+= '*_STEP_3_TITLES_TITLE___________' + reporttitlesoptions.titles.cell(i,2) + CR

	Next i

	For i := 1 To reportsummaryoptions.fields.itemcount

		cReport+= '*_STEP_3_TOTALS_FIELD___________' + reportsummaryoptions.fields.cell(i,1) + CR

		cReport+= '*_STEP_3_TOTALS_TOTALIZE________' + reportsummaryoptions.fields.cell(i,2) + CR

	Next i


	For i := 1 To reportformatoptions.formats.itemcount

		cReport+= '*_STEP_3_FORMATS_FIELD__________' + reportformatoptions.formats.cell(i,1) + CR

		cReport+= '*_STEP_3_FORMATS_MASK___________' + reportformatoptions.formats.cell(i,2) + CR

	Next i


		cReport+= '*_STEP_3_FONT_NAME______________' + ALLTRIM(_ReportFontName) + CR
		cReport+= '*_STEP_3_FONT_SIZE______________' + ALLTRIM(STR(_ReportFontSize)) + CR
		cReport+= '*_STEP_3_FONT_BOLD______________' + if ( _ReportFontBold , '.T.' , '.F.' ) + CR
		cReport+= '*_STEP_3_FONT_ITALIC____________' + if ( _ReportFontItalic , '.T.' , '.F.' ) + CR


		cReport+= '*_STEP_3_GROUPEXPRESSION________' + ALLTRIM(groupingoptions.groupby.value) + CR
		cReport+= '*_STEP_3_GROUPHEADER____________' + ALLTRIM(groupingoptions.groupheader.value) + CR
		cReport+= '*_STEP_3_GROUPFOOTER____________' + ALLTRIM(groupingoptions.groupfooter.value) + CR


	cReport+= '*'  + CR
	cReport+= '*_REPORT_BUILDER_DATA_END______________________________________'  + CR
	cReport+= ''  + CR


Return cReport


Function Capitalize ( cString )

	cString := HMG_LOWER ( cString )

	cString := HMG_UPPER ( HB_ULEFT( cString , 1 ) ) + HB_URIGHT ( cString , HMG_LEN(cString) - 1 )

Return cString

Procedure reportsummaryoptions

	reportsummaryoptions.center
	reportsummaryoptions.show

Return

procedure resettotals
LOCAL i
	reportsummaryoptions.fields.deleteallitems

	For i := 1 To rep_build_step_1.selectedfields.itemcount

		reportsummaryoptions.fields.additem ( { rep_build_step_1.selectedfields.item(i) , ".F." } )

	Next i

return

procedure resettitles
Local cTitle, i, s

	reporttitlesoptions.titles.deleteallitems

	For i := 1 To rep_build_step_1.selectedfields.itemcount

		cTitle := rep_build_step_1.selectedfields.item(i)

		s := HB_UAT ( '>' , cTitle )

		cTitle :=  HB_USUBSTR ( cTitle , s + 1 , 255 )

		If HB_ULEFT ( cTitle , 2 ) == '* '

			cTitle := HB_USUBSTR ( cTitle , 3 , 255 )

		EndIf

		reporttitlesoptions.titles.additem ( { rep_build_step_1.selectedfields.item(i) , Capitalize ( cTitle ) } )

	Next i

return

procedure resetformats
LOCAL i

	reportformatoptions.formats.deleteallitems

	For i := 1 To rep_build_step_1.selectedfields.itemcount

		reportformatoptions.formats.additem ( { rep_build_step_1.selectedfields.item(i) , '' } )

	Next i

return

procedure reporttitlesoptions

	reporttitlesoptions.center
	reporttitlesoptions.show

return

procedure reporttitleedit
Local i
local cTemp

	i := reporttitlesoptions.titles.value

	If i == 0
		return
	endif

	cTemp := InputBox ( '' , aMsgs [ 277 ] , reporttitlesoptions.titles.cell(i,2) )

	If Empty ( cTemp )
		return
	endif

	reporttitlesoptions.titles.cell(i,2) := cTemp

return

procedure reportformatoptions

	reportformatoptions.center
	reportformatoptions.show

return

Procedure ReportFormatsEdit
Local i
local cTemp

	i := ReportFormatOptions.formats.value

	If i == 0
		return
	endif

	cTemp := InputBox ( '' , aMsgs [ 276 ] , ReportFormatOptions.formats.cell(i,2) )

	if _HMG_SYSDATA [ 257 ] == .T.
		return
	endif

	ReportFormatOptions.formats.cell(i,2) := cTemp

return


Procedure TotalizeChange()
Local i

	i := reportsummaryoptions.fields.value

	If reportsummaryoptions.fields.cell( i , 1 ) = '*'

		If !MsgYesNo ( aMsgs [ 274 ] , 'HMG IDE' )
			return
		endif

	EndIf


	If	reportsummaryoptions.fields.cell( i , 2 ) = '.T.'

			reportsummaryoptions.fields.cell( i , 2 ) := '.F.'

	ElseIf	reportsummaryoptions.fields.cell( i , 2 ) = '.F.'

			reportsummaryoptions.fields.cell( i , 2 ) := '.T.'

	EndIf


return


*------------------------------------------------------------------------------*
Function IdeGetFont( cInitFontName , nInitFontSize , lBold , lItalic , anInitColor , lUnderLine , lStrikeOut , nCharset )
*------------------------------------------------------------------------------*
Local RetArray [8] , Tmp , rgbcolor

	If VALTYPE ( cInitFontName ) == 'U'
		cInitFontName := ""
	EndIf

	If VALTYPE ( nInitFontSize ) == 'U'
		nInitFontSize := 0
	EndIf

	If VALTYPE ( lBold ) == 'U'
		lBold := .F.
	EndIf

	If VALTYPE ( lItalic ) == 'U'
		lItalic := .F.
	EndIf

	If VALTYPE ( anInitColor ) == 'U'
		rgbcolor := 0
	Else
		rgbcolor := RGB( anInitColor[1] , anInitColor[2] , anInitColor[3] )
	EndIf

	If VALTYPE ( lUnderLine ) == 'U'
		lUnderLine := .F.
	EndIf

	If VALTYPE ( lStrikeOut ) == 'U'
		lStrikeOut := .F.
	EndIf

	If VALTYPE ( nCharSet ) == 'U'
		nCharSet := 0
	EndIf

	RetArray := IdeChooseFont( cInitFontName , nInitFontSize , lBold , lItalic , rgbcolor , lUnderLine , lStrikeOut , nCharSet )

	If ! Empty ( RetArray [1] )
		Tmp := RetArray [5]
		RetArray [5] := { GetRed(Tmp) , GetGreen(Tmp) , GetBlue(Tmp) }
	Else
		RetArray [5] := { Nil , Nil , Nil }
	EndIf

Return RetArray


Procedure ReportGetFont
Local a


	a := IdeGetFont ( _ReportFontName , _ReportFontSize , _ReportFontBold , _ReportFontItalic , {0,0,0} , .f. , .f. , 0 )

	if ! empty ( a [1] )

		_ReportFontName := a [1]

		_ReportFontSize := a [2]

		if  a [3] == .t.
			_ReportFontBold := .t.
		else
			_ReportFontBold := .f.
		endif

		if  a [4] == .t.
			_ReportFontItalic := .t.
		else
			_ReportFontItalic := .f.
		endif

	endif

Return


Procedure addcustomfield
Local cField

	cField := InputBox ( '' , aMsgs [272] , '' )

	If !Empty(cField)

		rep_build_step_1.selectedfields.additem ( '* ' + cField )

		resetformats()
		resettitles()
		resettotals()

	EndIf

return

procedure deletecustomfield()
local i

	i := rep_build_step_1.selectedfields.value

	if i == 0
		return
	endif

	if HB_ULEFT ( rep_build_step_1.selectedfields.item ( i ) , 2 ) == '* '

		If MsgYesNo( aMsgs [ 099 ] )

			rep_build_step_1.selectedfields.deleteitem ( i )

		resetformats()
		resettitles()
		resettotals()


		EndIf

	else

		MsgStop ( aMsgs [ 275 ] , 'HMG IDE' )

	endif



return
//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
procedure showlog (clog)
LOCAL nLeftPar, nRightPar, cLine, cLine1, cLine2, cLineOriginal, cLineFixed, cPrgName, nLineNo
local i

	cLog := HB_UTF8STRTRAN ( cLog , chr(13) + chr(13) , CRLF )

   IF HMG_UPPER("HMG_IDE_NoRunApp") $ HMG_UPPER (cLog) // ADD: App is running
      RETURN
   ENDIF

	define window showlog at 0,0 width 800 height 580 title aMsgs[092] modal

		on key F5 of showlog action	( showlog.release , DoEvents() , newbuild.release , DoEvents() , RunApplication() )
		on key F8 of showlog action	( showlog.release , DoEvents() , newbuild.release , DoEvents() , ENABLEDEBUGGER := .T. , RunApplication() )  // RunAfetrBuild := .T. , DebuggerSupport := .T. , BuildProjectM() )
		on key ESCAPE of showlog action	( showlog.release , DoEvents() , DoEvents() , DoEvents() , DoEvents() , newbuild.release , DoEvents() , DoEvents() , DoEvents() , DoEvents() )

		define grid grid_0
			row		10
			col		10
			width		770
			height		090
			items		{{''}}
			headers		{ aMsgs [091] }
			onchange	geterrorprocname(this.value)
			lines		.f.
			widths		{ 730 }

			fontname		'courier new'
			fontsize		9

		end grid

		define grid grid_1
			row			110
			col			10
			width			770
			height			390
			headers			{ '' , ''}
			widths			{ 45 , 670 }

			allowedit		.t.
			lines			.f.

			columnwhen		{ {||.F.} , {||.T.} }

			VIRTUAL			.T.
			ITEMCOUNT		0
			ONQUERYDATA		QueryTest()
			fontname		'courier new'
			fontsize		9

			columnvalid	{ NIL , { || SaveFixedModule() } }

		end grid

		define button rebuild
			row	510
			col	565
			caption	aMsgs [021] + ' [F5]'
			action	( showlog.release , DoEvents() , newbuild.release , DoEvents() , RunApplication() )
		end button

		define button close
			row	510
			col	675
			caption	aMsgs [106] + ' [ESC]'
			action	showlog.release
		end button



		define label label1
			row	511
			col	10
			width	400
			value	aMsgs [90]
		end label

	end window

	showlog.grid_0.deleteallitems

	for i := 1 to mlcount (	cLog )

		cLine := ALLTRIM ( memoline (clog , 1024, i ) )

		cLine := HB_ULEFT ( cLine , HMG_LEN(cLine) - 1 )

		if  "Can't delete previous"  $ cLine

			showlog.grid_0.additem( { 'HMG-IDE Builder: ' +  cLine } )
			showlog.debug.enabled := .f.
			showlog.rebuild.enabled := .f.

		endif

		if  '.prg(' $ HMG_LOWER(cLine)

			showlog.grid_0.additem( { 'Harbour: ' +  cLine } )

		endif

		if  '.fmg(' $ HMG_LOWER(cLine)

			showlog.grid_0.additem( { 'Harbour: ' +  cLine } )

		endif

		if  '.ch(' $ HMG_LOWER(cLine)

			showlog.grid_0.additem( { 'Harbour: ' +  cLine } )

		endif

		if	'reference' $ HMG_LOWER(cLine)		;
			.or.					;
			'multiple definition' $ HMG_LOWER(cLine)	;
			.or.					;
			'first defined here' $ HMG_LOWER(cLine)


			cLine := HB_UTF8STRTRAN ( cLine , 'HB_FUN_' , '' )

			nLeftPar := HB_UAT ( '(' , cLine )
			nRightPar := HB_UAT ( ')' , cLine )

			cLine1 := HB_USUBSTR ( cLine , 1 , nLeftPar - 1 )
			cLine2 := HB_USUBSTR ( cLine , nRightPar + 1 , 255 )

			cLine := cLine1 + cLine2

			cLineOriginal := cLine

			nRightPar := HB_UTF8RAT ( ':' , cLine )

			cLine1 := HB_USUBSTR ( cLine , 1 , nRightPar - 3 ) + 'prg:'
			cLine2 := HB_USUBSTR ( cLine , nRightPar + 1 , 255 )

			cLine := cLine1 + cLine2

			cLineFixed := cLine

			* get prg name

			nLeftPar := HB_UAT ( ':' , cLine )
			nRightPar := HB_UTF8RAT ( ':' , cLine )

			cPrgName := HB_USUBSTR ( cLine , nLeftPar + 1 , nRightPar - nLeftPar - 1 )

			if !file(cPrgName)
				cLine := cLineOriginal
			endif

			showlog.grid_0.additem( { 'Linker ' + cLine } )

		endif

		if  'windres' $ HMG_LOWER(cLine)
			cLine := HB_UTF8STRTRAN ( cLine , 'windres:' , '' )
			cLine := HB_UTF8STRTRAN ( cLine , '_temp.rc:' , 'line:' )


			nLeftPar := HB_UAT ( ':' , cLine )
			nRightPar := HB_UTF8RAT ( ':' , cLine )

			nLineNo := VAL ( HB_USUBSTR( cLine , nLeftPar + 1 , nRightPar - nLeftPar - 1 ) ) - 42

			cLine := ALLTRIM ( HB_USUBSTR ( cLine , 1 , nLeftPar ) + ALLTRIM(STR(nLineNo)) + HB_USUBSTR ( cLine , nRightPar , 1024 ) )

			showlog.grid_0.additem( { 'Resource compiler ' + cLine } )

		endif

	next i


	showlog.grid_0.value := 1
	showlog.grid_0.setfocus

	showlog.center

	showlog.activate

*	_HMG_SYSDATA [ 347 ] :=  NIL

return

Procedure QueryTest()

	if	This.QueryColIndex == 1

		This.QueryData := strzero ( This.QueryRowIndex , 5 )

	else

		IF _HMG_SYSDATA [ 320 ] == .F.

			This.QueryData := RTRIM ( Memoline ( cSourceBuffer , 1024 , This.QueryRowIndex , 8 ) )

		ELSE

			This.QueryData := RTRIM ( MyMemoline ( cSourceBuffer , 1024 , This.QueryRowIndex ) )

		ENDIF

	endif

Return


Procedure SaveFixedModule()
local c
local nCellRow
local nCellCol
local cNewLine
local string1 , string2 , string3 , pos1 , pos2
local mlc

	nCellRow := This.CellRowIndex
	nCellCol := This.CellColIndex
	cNewLine := This.CellValue

	cNewLine := HB_UTF8STRTRAN( cNewLine , Space ( 4 ) , chr(9) )

	c := HB_MEMOREAD ( cCurrentFixedFile )

	mlc := mlcount (c)

	pos1 := MLPOS( c , 1024 , nCellRow )
	pos2 := MLPOS( c , 1024 , nCellRow + 1 )

	if nCellRow <> mlc

		string1 := HB_USUBSTR ( c , 1 , pos1 - 1 )
		string2 := cNewLine + CRLF
		string3 := HB_USUBSTR ( c , pos2 , HMG_LEN(c) )

	else

		string1 := HB_USUBSTR ( c , 1 , pos1 - 1 )
		string2 := cNewLine
		string3 := ''

	endif

	cSourceBuffer := string1 + string2 + string3

	savestring ( cCurrentFixedFile , cSourceBuffer )

	if HMG_LOWER ( HB_URIGHT ( cCurrentFixedFile , 3 ) ) == '.rc'
		project.edit_1.value := cSourceBuffer
	endif

	showlog.rebuild.enabled := .T.
	showlog.close.enabled := .T.

return


#define EM_SCROLLCARET 183
#define EM_SETSEL 177

procedure geterrorprocname (i)
LOCAL cFileName, nLineNo, cPrgFile

local cSearch
local nPos
local aLineColumn
local cLine
local nLeftPar
local nRightPar
local mlc
local cMissingProc

PUBLIC cCurrentFixedFile

	if HB_ULEFT ( showlog.grid_0.cell(i,1) , 16 ) == 'HMG-IDE Builder:'

		showlog.grid_1.caption(1) := ''
		showlog.grid_1.caption(2) := ''
		showlog.grid_1.itemcount := 0

		showlog.grid_0.value	:= 1
		showlog.grid_0.setfocus

		Return

	elseif HB_ULEFT ( showlog.grid_0.cell(i,1) , 6 ) == 'Linker'

		cLine := Showlog.grid_0.cell(i,1)

		* get prg name

		nLeftPar := HB_UAT ( ':' , cLine )
		nRightPar := HB_UTF8RAT ( ':' , cLine )

		cFileName := HB_USUBSTR ( cLine , nLeftPar + 1 , nRightPar - nLeftPar - 1 )

		if !file(cFileName)

			showlog.grid_1.itemcount	:= 0
			showlog.grid_1.caption(1)	:= ''
			showlog.grid_1.caption(2)	:= ''

			return

		else

			nLineNo := 1

			cCurrentFixedFile := cFileName

			cPrgFile := HB_MEMOREAD ( cFileName )

			cSourceBuffer := cPrgFile

			mlc := mlcount ( cPrgFile )

			showlog.grid_1.caption(1) := '#'
			showlog.grid_1.caption(2) := cFileName

			showlog.grid_1.itemcount := mlc


			nLeftPar := HB_UAT ( "`" , cLine )
			nRightPar := HB_UAT ( "'" , cLine )
			cMissingProc := HB_USUBSTR ( cLine , nLeftPar + 1 , nRightPar - nLeftPar - 1 )

			cSearch := HMG_LOWER(cMissingProc)

			if !empty (cSearch)

		                nPos := HB_UAT ( cSearch , HMG_LOWER(cPrgFile) )

				aLineColumn := MPOSTOLC( cPrgFile , 1024 , nPos )

				nLineNo := aLineColumn [1]

			else

*******************************************************************************
				cLine := Showlog.grid_0.cell(i-1,1)
				nLeftPar := HB_UAT ( "`" , cLine )
				nRightPar := HB_UAT ( "'" , cLine )
				cMissingProc := HB_USUBSTR ( cLine , nLeftPar + 1 , nRightPar - nLeftPar - 1 )
				cSearch := HMG_LOWER(cMissingProc)
				if !empty (cSearch)
			                nPos := HB_UAT ( cSearch , HMG_LOWER(cPrgFile) )
					aLineColumn := MPOSTOLC( cPrgFile , 1024 , nPos )
					nLineNo := aLineColumn [1]
				else
					nLineNo := 1
				endif
*******************************************************************************

			endif

			showlog.grid_1.value	:= nLineNo
			showlog.grid_1.setfocus

			return

		endif

	endif


	cLine := Showlog.grid_0.cell(i,1)

	nLeftPar := HB_UAT ( '(' , cLine )
	nRightPar := HB_UAT ( ')' , cLine )

	if nLeftPar == 0 .and. nRightPar == 0

		nLeftPar := HB_UAT ( ':' , cLine )
		nRightPar := HB_UTF8RAT ( ':' , cLine )

		cFileName := HB_URIGHT ( ProjectName , HMG_LEN(Projectname) - HB_UTF8RAT ('\',ProjectName) )
		cFileName := HB_ULEFT ( cFileName , HMG_LEN(cFileName) - 4 ) + '.rc'

		nLineNo := VAL ( HB_USUBSTR( cLine , nLeftPar + 1 , nRightPar - nLeftPar - 1 ) )

	else

		cFileName := HB_USUBSTR ( cLine , 10 , HB_UAT ( '(' , cLine) - 10 )
		cFileName := HB_UTF8STRTRAN ( cFileName , '/' , '\' )

		nLineNo := VAL ( HB_USUBSTR( cLine , nLeftPar + 1 , nRightPar - nLeftPar - 1 ) )

	endif

	cCurrentFixedFile := cFileName

	showlog.grid_1.caption(1) := '#'
	showlog.grid_1.caption(2) := cFileName

	cPrgFile := HB_MEMOREAD ( cFileName )
	cSourceBuffer := cPrgFile
       	mlc := mlcount ( cPrgFile )

	showlog.grid_1.itemcount := 0
	showlog.grid_1.itemcount := mlc

	showlog.grid_1.value	:= nLineNo
	showlog.grid_1.setfocus

return

*------------------------------------------------------------------------------*
Procedure NewInclude ( cNewModule )
*------------------------------------------------------------------------------*
Local Result
Local i
Local cProgram := ''

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf

	If VALTYPE ( cNewModule ) = 'U'

		Result := ALLTRIM ( InputBox ( aMsgs [ 152 ] , aMsgs [ 280 ]  , '' ) )
		cProgram := ''
	Else

		Result := cNewModule
		cProgram := ''

	EndIf

	If _HMG_SYSDATA [ 257 ] == .T.
		If _IsWindowDefined ( DesignForm )
			SelectControl (SelectedControlName)
			DrawGrid()
		endif
		Return
	EndIf

	If Empty ( Result )
		If _IsWindowDefined ( DesignForm )
			SelectControl (SelectedControlName)
			DrawGrid()
		endif
		Return
	EndIf

	Result := ALLTRIM (Result)

	If HMG_UPPER ( HB_URIGHT ( Result,4 ) ) != '.CH'
		Result := Result + '.ch'
	EndIf

	For i := 1 To Project.List_4.ItemCount
		if ALLTRIM( HMG_UPPER(Project.List_4.Item(i)) ) == ALLTRIM( HMG_UPPER(result) )
			MsgStop( aMsgs [ 156 ]  , 'HMG IDE' )
			Return
		endif
	next i

	If File ( Result )

		If MsgYesNo ( Result + ' ' + aMsgs [ 227 ] )

			SaveString ( Result , cProgram )

		Else

			Return

		EndIf

	Else

		SaveString ( Result , cProgram )

	EndIf

	Project.List_4.AddItem ( Result )

	SortIncludeList()

	EXECUTE FILE ProgramEditor PARAMETERS Result

	SaveProject()

	Project.Tab_1.Value := 6

	if _IsWindowDefined ( DesignForm )
		SelectControl (SelectedControlName)
		DrawGrid()
	endif

Return


*------------------------------------------------------------------------------*
Procedure SaveResources
*------------------------------------------------------------------------------*
Local PROJECTFOLDER := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Projectname , HB_UTF8RAT ('\' , ProjectName ) - 1 ) ) )
// Local ResourceName
Local xName
Local cData, lUTF8 := .F.

	If Empty ( Projectname )
		Return
	EndIf

	If Project.List_1.ItemCount == 0
		Return
	EndIf

	xName := HB_URIGHT ( ProjectName , HMG_LEN(Projectname) - HB_UTF8RAT ('\',ProjectName) )
	xName := HB_ULEFT ( xName , HMG_LEN(xName) - 4 ) + '.rc'

	SaveString ( xName , Project.Edit_1.Value , lUTF8)


	xName := HB_URIGHT ( ProjectName , HMG_LEN(Projectname) - HB_UTF8RAT ('\',ProjectName) )
	xName := HB_ULEFT ( xName , HMG_LEN(xName) - 4 ) + '.hbc'

	cData := project.config.value

	SaveString ( xName , cData, lUTF8)

Return

*------------------------------------------------------------------------------*
Procedure EventEdit()
*------------------------------------------------------------------------------*
LOCAL Result
Local i , aRow , EventName ,st , cSnippetName , x , cDefaultValue , cWindowName , cTemp

	i := Properties.Grid_2.Value

	if i == 0
		Return
	EndIf

	aRow := Properties.Grid_2.Item (i)

	EventName := ALLTRIM ( HMG_UPPER ( aRow [1] ) )

	***********************************************************************
	* Begin User *
	***********************************************************************

	If SelectedControlType == 'USER'

		Result := ALLTRIM ( PickCharacterPropertyValue ( aMsgs [ 131 ] , aRow [1] + ':' , aRow [2] ) )

		If _HMG_SYSDATA [ 257 ] == .F.

			DesignFormModified := .T.

			if ! Empty ( SelectedControlName )

				__MVPUT( SelectedControlName + EventName , Result )
				SelectControl (SelectedControlName)

			EndIf

		EndIf

		Return

	EndIf

	***********************************************************************
	* End User *
	***********************************************************************

	If EventName == 'ONHSCROLLBOX' .And. !lVirtualForm
		Playhand()
		Return
	EndIf
	If EventName == 'ONVSCROLLBOX' .And. !lVirtualForm
		Playhand()
		Return
	EndIf
	If EventName == 'ONSCROLLDOWN' .And. !lVirtualForm
		Playhand()
		Return
	EndIf
	If EventName == 'ONSCROLLLEFT' .And. !lVirtualForm
		Playhand()
		Return
	EndIf
	If EventName == 'ONSCROLLRIGHT' .And. !lVirtualForm
		Playhand()
		Return
	EndIf
	If EventName == 'ONSCROLLEIGHT' .And. !lVirtualForm
		Playhand()
		Return
	EndIf
	If EventName == 'ONSCROLLUP' .And. !lVirtualForm
		Playhand()
		Return
	EndIf

	if This.CellColIndex == 1

		return

	elseif This.CellColIndex == 2

		Result := ALLTRIM ( PickCharacterPropertyValue ( aMsgs [ 131 ] , aRow [1] + ':' , aRow [2] ) )

	elseif This.CellColIndex == 3


		cDefaultValue := ALLTRIM( HB_USUBSTR ( properties.title , HB_UAT('[',properties.title) + 1 , 255 ) )

		cDefaultValue := HB_ULEFT ( cDefaultValue , HB_UAT( '.' , cDefaultValue ) - 1 ) + '_'

		cDefaultValue += ALLTRIM(properties.combo_1.item(properties.combo_1.value)) + '_' + ALLTRIM(aRow[1])

		cDefaultValue := HMG_LOWER(cDefaultValue)

		Result := ALLTRIM ( PickCharacterPropertyValue ( aMsgs [ 071 ] , aRow [1] + ':' , cDefaultValue ) )


		if HB_URIGHT (result , 2 ) == '()'

			result := HB_ULEFT ( result , HMG_LEN(result) - 2 )

		endif

		if HMG_LOWER(ALLTRIM(HB_URIGHT (result , 4 ))) == '.prg'

			result := HB_ULEFT ( result , HMG_LEN(result) - 4 )

		endif


		cTemp := aRow [2]

		if HB_URIGHT ( cTemp , 2 ) == '()'

			cTemp := HB_ULEFT ( cTemp , HMG_LEN(cTemp) - 2 )

		endif



		if file ( cTemp + '.prg' )

			if MsgYesNo ( aMsgs [ 073 ] , 'HMG-IDE' )

				DELETE FILE (cTemp + '.prg')

				for x := 1 to Project.List_1.ItemCount

					if HMG_UPPER(ALLTRIM(Project.List_1.Item(x)))==HMG_UPPER(ALLTRIM(cTemp + '.prg'))

						Project.List_1.DeleteItem (x)

						SaveProject()

						SortModuleList()

					endif

				next x

			endif

		endif


		If _HMG_SYSDATA [ 257 ] == .F.

			cTemp := ALLTRIM( HB_USUBSTR ( properties.title , HB_UAT('[',properties.title) + 1 , 255 ) )

			cWindowName := HB_ULEFT ( cTemp , HB_UAT( '.' , cTemp ) - 1 )


			st := CreateCodeSnippet(Result , cWindowName )

			if st == .f.

				_HMG_SYSDATA [ 257 ] := .T.

			else

				result := result + '()'

			endif

		EndIf

	elseif This.CellColIndex == 4

		cSnippetName := ALLTRIM ( aRow [2] )

		if HB_URIGHT ( cSnippetName , 2 ) == '()'

			cSnippetName := HB_ULEFT ( cSnippetName , HMG_LEN(cSnippetName) - 2 )

		endif

		cSnippetName +=  '.prg'

		if file (cSnippetName)

			if msgyesno( aMsgs [ 099 ] , aMsgs [ 007 ] + ' ' + cSnippetName )

				DELETE FILE (cSnippetName)

				Properties.Grid_2.cell(i,2) := 'Nil'

				Result := 'Nil'

				for x := 1 to Project.List_1.ItemCount

					if HMG_UPPER(ALLTRIM(Project.List_1.Item(x)))==HMG_UPPER(ALLTRIM(cSnippetName))

						Project.List_1.DeleteItem (x)

						SaveProject()

						SortModuleList()

					endif

				next x

			endif

		else

			MsgStop ( aMsgs [162] ,'HMG-IDE' )
			_HMG_SYSDATA [ 257 ] := .T.

		endif

	elseif This.CellColIndex == 5

		cSnippetName := ALLTRIM ( aRow [2] )

		if HB_URIGHT ( cSnippetName , 2 ) == '()'

			cSnippetName := HB_ULEFT ( cSnippetName , HMG_LEN(cSnippetName) - 2 )

		endif

		cSnippetName +=  '.prg'

		if file (cSnippetName)

			EXECUTE FILE ProgramEditor PARAMETERS cSnippetName

			Return

		else

			MsgStop ( aMsgs [162] ,'HMG-IDE' )

			Return

		endif

	else

		return

	endif

	If _HMG_SYSDATA [ 257 ] == .F.

		DesignFormModified := .T.

		if ! Empty ( SelectedControlName )

			Properties.Grid_2.Item (i) := { aRow [1] , Result }

			If	SelectedControlType == 'BUTTON'

				If EventName == 'ACTION'
					__MVPUT( SelectedControlName + 'Action' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'CHECKBOX'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'LISTBOX'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONDBLCLICK'
					__MVPUT( SelectedControlName + 'OnDblClick' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'COMBOBOX'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONENTER'
					__MVPUT( SelectedControlName + 'OnEnter' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONDISPLAYCHANGE'
					__MVPUT( SelectedControlName + 'OnDisplayChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONDROPDOWN'
					__MVPUT( SelectedControlName + 'OnDropDown' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONCLOSEUP'
					__MVPUT( SelectedControlName + 'OnCloseUp' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'CHECKBUTTON'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'GRID'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONDBLCLICK'
					__MVPUT( SelectedControlName + 'OnDblClick' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONHEADCLICK'
					__MVPUT( SelectedControlName + 'OnHeadClick' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONQUERYDATA'
					__MVPUT( SelectedControlName + 'OnQueryData' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONSAVE'
					__MVPUT( SelectedControlName + 'OnSave' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'SLIDER'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'SPINNER'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'IMAGE'

				If EventName == 'ACTION'
					__MVPUT( SelectedControlName + 'Action' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'TREE'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONDBLCLICK'
					__MVPUT( SelectedControlName + 'OnDblClick' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'DATEPICKER'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONENTER'
					__MVPUT( SelectedControlName + 'OnEnter' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'TEXTBOX'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONENTER'
					__MVPUT( SelectedControlName + 'OnEnter' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'EDITBOX'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'LABEL'
				If EventName == 'ACTION'
					__MVPUT( SelectedControlName + 'Action' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'BROWSE'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONDBLCLICK'
					__MVPUT( SelectedControlName + 'OnDblClick' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONHEADCLICK'
					__MVPUT( SelectedControlName + 'OnHeadClick' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'RADIOGROUP'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'FRAME'

			ElseIf	SelectedControlType == 'ANIMATEBOX'

			ElseIf	SelectedControlType == 'HYPERLINK'

			ElseIf	SelectedControlType == 'MONTHCALENDAR'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'RICHEDITBOX'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'PROGRESSBAR'

			ElseIf	SelectedControlType == 'PLAYER'

			ElseIf	SelectedControlType == 'IPADDRESS'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONGOTFOCUS'
					__MVPUT( SelectedControlName + 'OnGotFocus' , Result )
					SelectControl (SelectedControlName)
				ElseIf EventName == 'ONLOSTFOCUS'
					__MVPUT( SelectedControlName + 'OnlostFocus' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'TAB'

				If EventName == 'ONCHANGE'
					__MVPUT( SelectedControlName + 'OnChange' , Result )
					SelectControl (SelectedControlName)
				EndIf

			ElseIf	SelectedControlType == 'TIMER'

				If EventName == 'ACTION'
					__MVPUT( SelectedControlName + 'Action' , Result )
					SelectControl (SelectedControlName)
				EndIf

			EndIf

		Else

			If EventName == 'ONINIT'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnInit' , Result )

			ElseIf EventName == 'ONRELEASE'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnRelease' , Result )

			ElseIf EventName == 'ONINTERACTIVECLOSE'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnInteractiveClose' , Result )

			ElseIf EventName == 'ONMOUSECLICK'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnMouseClick' , Result )

			ElseIf EventName == 'ONMOUSEDRAG'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnMouseDrag' , Result )

			ElseIf EventName == 'ONMOUSEMOVE'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnMouseMove' , Result )

			ElseIf EventName == 'ONSIZE'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnSize' , Result )

			ElseIf EventName == 'ONMAXIMIZE'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnMaximize' , Result )

			ElseIf EventName == 'ONMINIMIZE'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnMinimize' , Result )

			ElseIf EventName == 'ONPAINT'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnPaint' , Result )

			ElseIf EventName == 'ONNOTIFYCLICK'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnNotifyClick' , Result )

			ElseIf EventName == 'ONGOTFOCUS'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnGotFocus' , Result )

			ElseIf EventName == 'ONLOSTFOCUS'

				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'OnLostFocus' , Result )

			ElseIf EventName == 'ONSCROLLUP'
				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'ONSCROLLUP' , Result )

			ElseIf EventName == 'ONSCROLLDOWN'
				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'ONSCROLLDOWN' , Result )

			ElseIf EventName == 'ONSCROLLLEFT'
				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'ONSCROLLLEFT' , Result )

			ElseIf EventName == 'ONSCROLLRIGHT'
				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'ONSCROLLRIGHT' , Result )

			ElseIf EventName == 'ONHSCROLLBOX'
				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'ONHSCROLLBOX' , Result )

			ElseIf EventName == 'ONVSCROLLBOX'
				Properties.Grid_2.Item (i) := { aRow [1] , Result }
				__MVPUT( DesignForm + 'ONVSCROLLBOX' , Result )

			EndIf

		EndIf

		Properties.Grid_2.Value := i
		Properties.Grid_2.SetFocus

	Else

		if ! Empty ( SelectedControlName )
			SelectControl (SelectedControlName)
		EndIf

		Properties.Grid_2.Value := i
		Properties.Grid_2.SetFocus

	EndIf

Return

*------------------------------------------------------------------------------*
Function CreateCodeSnippet( cArg , cWindowName )
*------------------------------------------------------------------------------*
Local cModule
Local cFileName
Local i, item

	cArg := ALLTRIM ( cArg )

	cFileName := cArg + '.prg'

	For i := 1 To Project.List_1.ItemCount
		item := Project.List_1.Item(i)
		If ALLTRIM (HMG_UPPER(Item)) == ALLTRIM(HMG_UPPER(cFileName)) .OR. ALLTRIM (HMG_UPPER(cFileName)) == ALLTRIM(HMG_UPPER(cFileName)) + ' (MAIN)'
			MsgStop( aMsgs [ 165 ] ,'HMG IDE')
			Return .f.
		endif
	Next i

	if file (cFileName)

		if ! MsgYesNo ( aMsgs [227] , 'HMG-IDE' )

			return .f.

		endif

	endif

	cModule := ''

	cModule += '#include "hmg.ch"' + CRLF

	cModule += '' + CRLF

	cModule += 'declare window ' + cWindowName + CRLF

	cModule += '' + CRLF

	cModule += 'Function ' + cArg + CRLF
	cModule += '' + CRLF
	cModule += '' + CRLF
	cModule += 'Return Nil' + CRLF

	SaveString ( cFileName , cModule )

	Project.List_1.AddItem ( cFileName )

	SaveProject()

	SortModuleList()

	EXECUTE FILE ProgramEditor PARAMETERS ALLTRIM(cArg)+'.prg'

Return .t.



Procedure LoadNewReport(cFileName)
LOCAL cLine, cToken, cValue, cTemp
local creport
local i
local aReportTitles := {}
local aReportFields := {}
local aReportTotals := {}
local x

	reporttitlesoptions.titles.deleteallitems
	reportsummaryoptions.fields.deleteallitems
	reportformatoptions.formats.deleteallitems



	cReport := HB_MEMOREAD ( cFileName )


	For i := 1 to mlcount ( cReport )


		cLine		:= ALLTRIM ( memoline ( cReport , 254 , i ) )

		cToken		:= HB_ULEFT ( cLine , 32  )

		cValue		:= ALLTRIM ( HB_USUBSTR ( cLine , 33 , 254 ) )


		if cToken == '*_STEP_1_SELECTED_TABLE_________'


			for x := 1 to rep_build_step_1.tables.itemcount

				if ALLTRIM ( HMG_LOWER ( rep_build_step_1.tables.item(x) ) ) == ALLTRIM ( HMG_LOWER ( cValue ) )

					rep_build_step_1.tables.value := x
					rep_build_step_1.availablefields.deleteallitems
					exit

				endif

			next x

		endif

		if cToken == '*_STEP_1_SELECTED_FIELDS________'

			rep_build_step_1.selectedfields.additem( cValue )

		endif


		if cToken == '*_STEP_1_AVAILABLE_FIELDS_______'

			rep_build_step_1.availablefields.additem( cValue )

		endif


		if cToken == '*_STEP_2_SELECTED_PAPER_SIZE____'

			rep_build_step_2.papersize.value := VAL ( cValue )

		endif

		if cToken == '*_STEP_2_SELECTED_ORIENTATION___'

			rep_build_step_2.orientation.value := VAL ( cValue )

		endif

		if cToken == '*_STEP_3_REPORT_TITLE___________'

			rep_build_step_3.title.value := cValue

		endif

		if cToken == '*_STEP_3_TITLES_FIELD___________'

			cTemp := cValue

		endif

		if cToken == '*_STEP_3_TITLES_TITLE___________'

			reporttitlesoptions.titles.additem ( { cTemp , cValue } )

		endif

		if cToken == '*_STEP_3_TOTALS_FIELD___________'

			cTemp := cValue

		endif

		if cToken == '*_STEP_3_TOTALS_TOTALIZE________'

			reportsummaryoptions.fields.additem ( { cTemp , cValue } )

		endif

		if cToken == '*_STEP_3_FORMATS_FIELD__________'

			cTemp := cValue

		endif

		if cToken == '*_STEP_3_FORMATS_MASK___________'

			reportformatoptions.formats.additem ( { cTemp , cValue } )

		endif

		if cToken == '*_STEP_3_FONT_NAME______________'

			_ReportFontName := cValue

		endif

		if cToken == '*_STEP_3_FONT_SIZE______________'

			_ReportFontSize := VAL ( cValue )

		endif

		if cToken == '*_STEP_3_FONT_BOLD______________'

			_ReportFontBold := if ( cValue == '.T.' , .T. , .F. )

		endif

		if cToken == '*_STEP_3_FONT_ITALIC____________'

			_ReportFontItalic := if ( cValue == '.T.' , .T. , .F. )

		endif

		if cToken == '*_STEP_3_GROUPEXPRESSION________'

			groupingoptions.groupby.value := cValue

		endif

		if cToken == '*_STEP_3_GROUPHEADER____________'

			groupingoptions.groupheader.value := cValue

		endif

		if cToken == '*_STEP_3_GROUPFOOTER____________'

			groupingoptions.groupfooter.value := cValue

		endif


	next i


return


procedure groupingoptions

	groupingoptions.center
	groupingoptions.groupby.setfocus
	groupingoptions.show

return

procedure fieldselector
local i

	load window fieldselector

	fieldselector.ok.caption	:= aMsgs [ 116 ]
	fieldselector.cancel.caption	:= aMsgs [ 117 ]

	fieldselector.fields.deleteallitems

	for i := 1 to rep_build_step_1.selectedfields.itemcount

		fieldselector.fields.additem ( rep_build_step_1.selectedfields.item(i) )

	next i

	for i := 1 to rep_build_step_1.availablefields.itemcount

		fieldselector.fields.additem ( rep_build_step_1.availablefields.item(i) )

	next i


	fieldselector.center
	fieldselector.activate

	groupingoptions.groupheader.setfocus

return


Function fieldselector_ok_action

local i

	i := fieldselector.fields.value

	if i==0
		return NIL
	endif

	groupingoptions.groupby.setfocus
	groupingoptions.groupby.value := fieldselector.fields.item(i)

	DoMethod ( "fieldselector" ,"release" )

Return Nil

Function groupingoptions_button_1_action

	groupingoptions.groupby.value := ''

Return Nil

Procedure TableView ( cFileName )
Local cData := ''
Local aStruct
Local i
Local nFieldCount


	USE ( cFileName )

	nFieldCount	:= fCount()

	aStruct := DBSTRUCT()

	cData += 'File Name: "' + cFileName + '"  -  Field Count: ' + ALLTRIM(STR(fcount())) + '  -  Record Count: ' + ALLTRIM(STR(reccount()))

	USE

	LOAD WINDOW TABLEVIEW

	TABLEVIEW.LABEL_1.VALUE := cData

	TABLEVIEW.TITLE				:= aMsgs [ 287 ]
	TABLEVIEW.browse.caption		:= aMsgs [ 288 ]
	TABLEVIEW.modifystructure.caption	:= aMsgs [ 289 ]
	TABLEVIEW.close.caption			:= aMsgs [ 106 ]

	TABLEVIEW.GRID_1.header(1)		:= aMsgs [ 174 ]
	TABLEVIEW.GRID_1.header(2)		:= aMsgs [ 175 ]
	TABLEVIEW.GRID_1.header(3)		:= aMsgs [ 290 ]
	TABLEVIEW.GRID_1.header(4)		:= aMsgs [ 291 ]

	TABLEVIEW.GRID_1.DELETEALLITEMS


	for i := 1 to nFieldCount

		aStruct [ i ] [ 1 ] := Capitalize ( aStruct [ i ] [ 1 ] )

		if	aStruct [ i ] [ 2 ] == 'N'

			aStruct [ i ] [ 2 ] := 'Numeric'

		elseif	aStruct [ i ] [ 2 ] == 'C'

			aStruct [ i ] [ 2 ] := 'Character'

		elseif	aStruct [ i ] [ 2 ] == 'D'

			aStruct [ i ] [ 2 ] := 'Date'

		elseif	aStruct [ i ] [ 2 ] == 'L'

			aStruct [ i ] [ 2 ] := 'Logical'

		elseif	aStruct [ i ] [ 2 ] == 'M'

			aStruct [ i ] [ 2 ] := 'Memo'

		endif

	next i


	for i := 1 to nFieldCount
		TABLEVIEW.GRID_1.ADDITEM ( { aStruct [ i ] [ 1 ] , aStruct [ i ] [ 2 ] , STR ( aStruct [ i ] [ 3 ] ) , STR ( aStruct [ i ] [ 4 ] ) } )
	next i


	TABLEVIEW.CENTER

	TABLEVIEW.ACTIVATE




Return

Procedure TableBrowse ( cFileName )
Local cData := ''
Local i
Local nFieldCount
Local aFieldNames	:= {}
Local aHeaders	 	:= {}
Local aWidths	 	:= {}
Local cBrowseArea	:= HB_ULEFT ( cFileName , HMG_LEN(cFileName) - 4 )

	USE ( cFileName )

	nFieldCount	:= fCount()

	cData += 'File Name: "' + cFileName + '"  -  Field Count: ' + ALLTRIM(STR(fcount())) + '  -  Record Count: ' + ALLTRIM(STR(reccount()))


	go top

	LOAD WINDOW TABLEBROWSE

	TABLEBROWSE.LABEL_1.VALUE := cData

	TABLEBROWSE.LABEL_2.VALUE := '[Alt+A] : Append - [Del] : Delete - [Enter] / [DblClick] : Modify'

	TABLEBROWSE.TITLE				:= 'Table Browse'
	TABLEBROWSE.close.caption			:= 'Close'


	for i := 1 to nFieldCount
		aadd ( aFieldNames 	, cBrowseArea+'->'+field(i)	)
		aadd ( aHeaders		, Capitalize ( field(i)	)	)
		aadd ( aWidths	 	, 120				)
	next i


	define browse browse_1
		parent		tablebrowse
		workarea        &cBrowseArea
		row		38
		col		13
		width		596
		height		357
		headers		aHeaders
		fields		aFieldNames
		widths		aWidths
		allowedit	.t.
		allowappend	.t.
		allowdelete	.t.
	end browse

	TABLEBROWSE.BROWSE_1.SETFOCUS

	TABLEBROWSE.CENTER

	TABLEBROWSE.ACTIVATE

	USE

Return


Procedure TableModify ( cFileName )
Local i, cTemp
Local aItems := {}
Local nTemp := 1

	* _HMG_SYSDATA [ 347 ] :=  { || tablemodify01() }

	if file ( cFileName )

		for i := 1 to tableview.grid_1.itemcount

			cTemp := tableview.grid_1.cell(i,2)

			if	cTemp = 'Character'
				nTemp := 1

			elseif	cTemp = 'Numeric'
				nTemp := 2

			elseif	cTemp = 'Date'
				nTemp := 3

			elseif	cTemp = 'Logical'
				nTemp := 4

			elseif	cTemp = 'Memo'
				nTemp := 5

			endif

			aadd ( aItems , { tableview.grid_1.cell(i,1) , nTemp , VAL ( tableview.grid_1.cell(i,3) ) , VAL ( tableview.grid_1.cell(i,4) ) } )

		next i

	endif

	LOAD WINDOW TABLEMODIFY

	TABLEMODIFY.LABEL_1.VALUE		:= 'File Name: "' + cFileName + '" '

	TABLEMODIFY.TITLE			:= aMsgs [ 292 ]
	TABLEMODIFY.addfield.caption		:= aMsgs [ 293 ]
	TABLEMODIFY.deletefield.caption		:= aMsgs [ 294 ]
	TABLEMODIFY.save.caption		:= aMsgs [ 295 ]
	TABLEMODIFY.cancel.caption		:= aMsgs [ 117 ]

	TABLEMODIFY.GRID_1.header(1)		:= aMsgs [ 174 ]
	TABLEMODIFY.GRID_1.header(2)		:= aMsgs [ 175 ]
	TABLEMODIFY.GRID_1.header(3)		:= aMsgs [ 290 ]
	TABLEMODIFY.GRID_1.header(4)		:= aMsgs [ 291 ]


	_HMG_SYSDATA [ 40 ] [ GetControlIndex ( 'GRID_1' , 'TABLEMODIFY' ) ] [ 5 ] :=  { NIL , { || tablemodify01() } , NIL , NIL }

	TABLEMODIFY.CENTER

	TABLEMODIFY.ACTIVATE

	_HMG_SYSDATA [ 347 ] :=  Nil

Return

procedure tablemodify01

Local nCellRow := This.CellRowIndex
Local nCellCol := This.CellColIndex
Local cNewLine := This.CellValue

	if nCellCol == 2

		if	cNewLine == 1 // Character

			TABLEMODIFY.GRID_1.CELL ( nCellRow , 4 ) := 0

		elseif	cNewLine == 2 // Numeric


		elseif	cNewLine == 3 // Date

			TABLEMODIFY.GRID_1.CELL ( nCellRow , 3 ) := 8
			TABLEMODIFY.GRID_1.CELL ( nCellRow , 4 ) := 0

		elseif	cNewLine == 4 // Logical

			TABLEMODIFY.GRID_1.CELL ( nCellRow , 3 ) := 1
			TABLEMODIFY.GRID_1.CELL ( nCellRow , 4 ) := 0

		elseif	cNewLine == 5 // Memo

			TABLEMODIFY.GRID_1.CELL ( nCellRow , 3 ) := 8
			TABLEMODIFY.GRID_1.CELL ( nCellRow , 4 ) := 0

		endif

	endif

return

Function EvalLength()
local r

	if	TABLEMODIFY.GRID_1.CELL ( This.CellRowIndex , 2 ) == 3 // Date
		r := .f.
	elseif	TABLEMODIFY.GRID_1.CELL ( This.CellRowIndex , 2 ) == 4 // Logical
		r := .f.
	elseif	TABLEMODIFY.GRID_1.CELL ( This.CellRowIndex , 2 ) == 5 // Memo
		r := .f.
	else
		r := .t.
	endif

return r

Function EvalDec()
local r

	if TABLEMODIFY.GRID_1.CELL ( This.CellRowIndex , 2 ) == 2  // Numeric
		r := .t.
	else
		r := .f.
	endif

return r

procedure tableaddfield()
local cTemp, lFound
local n
local i

	n := 1

	do while .t.

		lFound := .F.

		cTemp := 'NewField' + ALLTRIM ( STR ( n ) )

		for i := 1 to TABLEMODIFY.GRID_1.ITEMCOUNT

			if HMG_UPPER(ALLTRIM(TABLEMODIFY.GRID_1.CELL (i,1))) == HMG_UPPER( ALLTRIM ( cTemp ) )

				lFound := .T.
				exit

			endif

		next i

		if lFound == .f.
			exit
		endif

		n++

	enddo


	TABLEMODIFY.GRID_1.ADDITEM ( {'NewField' + ALLTRIM(STR(n)) , 1 , 10 , 0 } )
	TABLEMODIFY.GRID_1.VALUE := { TABLEMODIFY.GRID_1.ITEMCOUNT , 1 }
	TABLEMODIFY.GRID_1.SETFOCUS

return

procedure tabledeletefield()
Local aTemp

	if TABLEMODIFY.GRID_1.ITEMCOUNT == 0
		return
	endif

	aTemp := TABLEMODIFY.GRID_1.VALUE

	if aTemp [1] == 0
		return
	endif

	if msgyesno ( aMsgs [099] , 'HMG-IDE' )

		TABLEMODIFY.GRID_1.DELETEITEM ( aTemp [1] )

		if TABLEMODIFY.GRID_1.ITEMCOUNT > 0

			if aTemp [1] <= TABLEMODIFY.GRID_1.ITEMCOUNT

				TABLEMODIFY.GRID_1.VALUE := { aTemp [1] , aTemp [2] }

			else

				TABLEMODIFY.GRID_1.VALUE := { TABLEMODIFY.GRID_1.ITEMCOUNT , aTemp [2] }

			endif

		endif

	endif

return



procedure tablefieldmoveup()
local i
local anterior
local actual
local aTemp
local j

	aTemp  := TABLEMODIFY.GRID_1.value

	i := aTemp [1]

	j := aTemp [2]

	if i < 2
		return
	endif

	anterior := TABLEMODIFY.GRID_1.ITEM ( i - 1 )

	actual := TABLEMODIFY.GRID_1.ITEM ( i )

	TABLEMODIFY.GRID_1.ITEM ( i - 1 ) := actual

	TABLEMODIFY.GRID_1.ITEM ( i     ) := anterior

	TABLEMODIFY.GRID_1.value := { i - 1 , j }

return

procedure tablefieldmovedown()
local i
local actual, posterior
local aTemp
local j

	aTemp  := TABLEMODIFY.GRID_1.value

	i := aTemp [1]

	j := aTemp [2]

	if i > TABLEMODIFY.GRID_1.ITEMCOUNT - 1
		return
	endif

	if i == 0
		return
	endif

	actual := TABLEMODIFY.GRID_1.ITEM ( i )

	posterior := TABLEMODIFY.GRID_1.ITEM ( i + 1 )


	TABLEMODIFY.GRID_1.ITEM ( i + 1 ) := actual

	TABLEMODIFY.GRID_1.ITEM ( i     ) := posterior

	TABLEMODIFY.GRID_1.value := { i + 1 , j }

return


procedure tablesave( cFileName )
local i
local aStruct := {}
local cName , cType , nLength , nDecimals
Local cData := ''
Local lNew
Local nTables, nFieldCount
Local aTables := {}
Local v

	if !file (cFileName)
		lNew := .T.
	else
		lNew := .F.
	endif


	for i := 1 To TABLEMODIFY.GRID_1.ITEMCOUNT

		cName := ALLTRIM(TABLEMODIFY.GRID_1.CELL ( i , 1 ))

		if	TABLEMODIFY.GRID_1.CELL ( i , 2 ) == 1 // Character

			cType := 'C'

		elseif	TABLEMODIFY.GRID_1.CELL ( i , 2 ) == 2 // Numeric

			cType := 'N'

		elseif	TABLEMODIFY.GRID_1.CELL ( i , 2 ) == 3 // Date

			cType := 'D'

		elseif	TABLEMODIFY.GRID_1.CELL ( i , 2 ) == 4 // Logical

			cType := 'L'

		elseif	TABLEMODIFY.GRID_1.CELL ( i , 2 ) == 5 // Memo

			cType := 'M'

		endif

		nLength := TABLEMODIFY.GRID_1.CELL ( i , 3 )

		nDecimals := TABLEMODIFY.GRID_1.CELL ( i , 4 )

		aadd ( aStruct , { cName , cType , nLength , nDecimals } )

	next i


	* Create a temporary file

	dbCreate ( 'temp.dbf', aStruct )



	* Append records from original to temporary

	if file (cFileName)

		USE TEMP.DBF

		APPEND FROM (cFileName)

		USE

	endif


	*Create a Backup

	if file (cFileName)

		COPY FILE (cFileName) TO  ( HB_ULEFT( cFileName , HMG_LEN(cFileName) - 3 ) + 'bak' )

	endif


	* Delete Original File

	if file (cFileName)

		DELETE FILE (cFileName)

	endif


	* Rename temporary file as original file

	RENAME TEMP.DBF TO (cFileName)


	* Update TableView

	if lNew == .F.

		USE ( cFileName )

		nFieldCount	:= fCount()

		aStruct := DBSTRUCT()

		cData += 'File Name: "' + cFileName + '"  -  Field Count: ' + ALLTRIM(STR(fcount())) + '  -  Record Count: ' + ALLTRIM(STR(reccount()))

		USE

		TABLEVIEW.LABEL_1.VALUE := cData


		for i := 1 to nFieldCount

			aStruct [ i ] [ 1 ] := Capitalize ( aStruct [ i ] [ 1 ] )

			if	aStruct [ i ] [ 2 ] == 'N'

				aStruct [ i ] [ 2 ] := 'Numeric'

			elseif	aStruct [ i ] [ 2 ] == 'C'

				aStruct [ i ] [ 2 ] := 'Character'

			elseif	aStruct [ i ] [ 2 ] == 'D'

				aStruct [ i ] [ 2 ] := 'Date'

			elseif	aStruct [ i ] [ 2 ] == 'L'

				aStruct [ i ] [ 2 ] := 'Logical'

			elseif	aStruct [ i ] [ 2 ] == 'M'

				aStruct [ i ] [ 2 ] := 'Memo'

			endif

		next i


		TABLEVIEW.GRID_1.DELETEALLITEMS

		for i := 1 to nFieldCount
			TABLEVIEW.GRID_1.ADDITEM ( { aStruct [ i ] [ 1 ] , aStruct [ i ] [ 2 ] , STR ( aStruct [ i ] [ 3 ] ) , STR ( aStruct [ i ] [ 4 ] ) } )
		next i


	else


		* Tables

		nTables := ADIR( "*.dbf" )
		ASIZE ( aTables , nTables )
		ADIR( "*.dbf" , aTables )
		aTables := ASORT ( aTables )

		Project.tables.deleteallitems

		v := 0

		For i := 1 To nTables
			Project.tables.AddItem ( aTables [i] )
			if ALLTRIM(HMG_UPPER(cFileName)) == ALLTRIM(HMG_UPPER(aTables [i]))
				v := i
			endif
		Next i

		if i <> 0
			Project.tables.value := v
		endif

	endif


	ThisWindow.Release


return


*------------------------------------------------------------------------------*
Procedure Newtable()
*------------------------------------------------------------------------------*
Local Result
Local i
Local cProgram := ''

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf

	Result := ALLTRIM ( InputBox ( aMsgs [ 152 ] , aMsgs [ 096 ]  , '' ) )


	If _HMG_SYSDATA [ 257 ] == .T.
		If _IsWindowDefined ( DesignForm )
			SelectControl (SelectedControlName)
			DrawGrid()
		endif
		Return
	EndIf

	If Empty ( Result )
		If _IsWindowDefined ( DesignForm )
			SelectControl (SelectedControlName)
			DrawGrid()
		endif
		Return
	EndIf

	Result := ALLTRIM (Result)

	If HMG_UPPER ( HB_URIGHT ( Result,4 ) ) != '.DBF'
		Result := Result + '.dbf'
	EndIf

	For i := 1 To Project.tables.ItemCount
		if ALLTRIM( HMG_UPPER(Project.tables.Item(i)) ) == ALLTRIM( HMG_UPPER(result) )
			MsgStop( aMsgs [ 097 ]  , 'HMG IDE' )
			Return
		endif
	next i


	If File ( Result )

		If ! MsgYesNo ( Result + ' ' + aMsgs [ 227 ] )

			Return

		EndIf

	EndIf

	Project.Tab_1.Value := 7

	TableModify ( Result )

	if _IsWindowDefined ( DesignForm )
		SelectControl (SelectedControlName)
		DrawGrid()
	endif

Return

*------------------------------------------------------------------------------*
Procedure AddItem
*------------------------------------------------------------------------------*
Local ProjectFolder
Local FileFolder
// Local Item
Local lAborted
Local FileName
Local Result
Local BaseFileName
Local lLocalPrg
Local i

	If Empty ( Projectname )
		MsgStop ( aMsgs [ 085 ] ,'HMG IDE')
		Return
	EndIf


	Result := Getfile ( { {'Modules (*.prg)','*.prg'} , {'Forms (*.fmg)','*.fmg'} , {'Includes (*.ch)','*.ch'} , {'Reports (*.rmg)','*.rmg'} , {'Reports (*.rpt)','*.rpt'}, {'Tables (*.dbf)','*.dbf'} , {'Icons (*.ico)','*.ico'} , {'Images (*.bmp)','*.bmp'} , {'Images (*.gif)','*.gif'} , {'Images (*.jpg)','*.jpg'} , {'Cursors (*.cur)','*.cur'} , {'Audio (*.wav)','*.wav'} , {'Video (*.avi)','*.avi'} } , aMsgs [ 027 ]  , , .f. , .t. )


	If Empty ( Result )
		Return
	EndIf

	Result := ALLTRIM (Result)

	FileName :=  HB_URIGHT ( Result , HMG_LEN(Result) - HB_UTF8RAT ('\',Result) )

	ProjectFolder := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Projectname , HB_UTF8RAT ('\' , ProjectName ) ) ) )
	FileFolder := HMG_UPPER ( ALLTRIM ( HB_ULEFT ( Result , HB_UTF8RAT ('\' ,Result ) ) ) )


	if	ProjectFolder == FileFolder			;
		.and.						;
		HMG_UPPER ( HB_URIGHT ( FileName ,4 ) ) != '.PRG'

		MsgStop ( aMsgs [ 163 ] , 'HMG-IDE' )

		return

	endif

	if	ProjectFolder == FileFolder			;
		.and.						;
		HMG_UPPER ( HB_URIGHT ( FileName ,4 ) ) == '.PRG'

		lLocalPrg := .T.

	else

		lLocalPrg := .F.

	endif


	if lLocalPrg == .F.

		if file ( ProjectFolder + FileName )

			If ! MsgYesNo ( aMsgs [ 227 ] , 'HMG-IDE' )
				return
			endif

		endif

		BaseFileName := HB_ULEFT ( ALLTRIM(FileName) , HMG_LEN(ALLTRIM(FileName)) - 4 )

		COPY FILE ( FileFolder + FileName ) TO ( ProjectFolder + FileName )

		if HMG_UPPER ( HB_URIGHT ( FileName , 4 ) ) == '.DBF'

			if file ( FileFolder + BaseFileName + '.dbt' )

				COPY FILE ( FileFolder + BaseFileName + '.dbt' ) TO ( ProjectFolder + BaseFileName + '.dbt' )

			endif

			if file ( FileFolder + BaseFileName + '.fpt' )

				COPY FILE ( FileFolder + BaseFileName + '.fpt' ) TO ( ProjectFolder + BaseFileName + '.fpt' )

			endif

		endif

	endif


	lAborted := .F.

	If HMG_UPPER ( HB_URIGHT ( FileName ,4 ) ) == '.PRG'

		For i := 1 To Project.List_1.ItemCount

			if	HMG_LOWER( ALLTRIM( Project.List_1.Item (i) )) == HMG_LOWER(ALLTRIM(FileName))			;
				.or.											;
				HMG_LOWER( ALLTRIM( Project.List_1.Item (i) )) == HMG_LOWER(ALLTRIM(FileName)) + ' (main)'	;

				MsgStop ( aMsgs [165] , 'HMG-IDE' )

				lAborted := .T.

				exit

			endif


		Next i

		if lAborted == .F.

			Project.List_1.AddItem ( FileName )

			If  Project.List_1.ItemCount == 1
				Project.List_1.Item (1) := Project.List_1.Item (1) +' (Main)'
			else
				SortModuleList()
			Endif

		endif

	EndIf

	refreshproject()

	SaveProject()

Return



Function MyMemoLine( cString , nLineLength , nLineNumber )
Local p
Local c
Local q
Local d


	p := MLCTOPOS( cString , nLineLength , nLineNumber , 0 , 8 )

	c := HB_USUBSTR ( cString , p , 1024 )

	q := HB_UAT ( chr(13) , c )

	if q == 0

		d :=  c

	else

		d := HB_ULEFT ( c , q - 1 )

	endif

Return d


