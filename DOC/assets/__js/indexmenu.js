/* Here is where all the magic happens.  
   Just enter as many additional pages that you want to search, 
   then fill in the additional listings for each page.
   
   "Page Name","Path","Page Title","Many,Key,Words","Descriptive comments"
*/


function addmenuitem()
{
var item = new Array();
c=0; item[c]=new Array("Building_HMG_applications.htm","","Building HMG Applications","","Build.Bat / HMG-IDE","Basics");
c++; item[c]=new Array("tutorial.htm","","Tutorial (English)","","Sample Files: ..\SAMPLES\Basics\TUTORIAL","Basics");
c++; item[c]=new Array("tutorial_es.htm","","Tutorial (Español)","","Ejemplos:  ..\SAMPLES\Basics\TUTORIAL","Basics");
c++; item[c]=new Array("faq.htm","","FAQ","","Common questions","Basics");
c++; item[c]=new Array("idebasics.htm","","Basics","","Basics","HMG IDE");
c++; item[c]=new Array("idequickstart.htm","","Quick Start","","Quick Start","HMG IDE");
c++; item[c]=new Array("idesample.htm","","Sample","","Sample","HMG IDE");
c++; item[c]=new Array("activatewindowall.htm","","Activate Window All","","Activates All Defined Windows","Windows");
c++; item[c]=new Array("declarewindow.htm","","Declare Window","","Declares a Window Name","Windows");
c++; item[c]=new Array("definewindow.htm","","Define Window","","Creates a Window Definition","Windows");
c++; item[c]=new Array("loadwindow.htm","","Load Window","","Load a window definition from a HMG window definition file","Windows");
c++; item[c]=new Array("thiswindow.htm","","ThisWindow Object","","Semi-OOP system object","Windows");
c++; item[c]=new Array("activex.htm","","Activex","","Creates an Activex container control","Controls");
c++; item[c]=new Array("animatebox.htm","","AnimateBox","","Creates an AnimateBox control","Controls");
c++; item[c]=new Array("browse.htm","","Browse","","Creates a browse control","Controls");
c++; item[c]=new Array("button.htm","","Button","","Creates a button control","Controls");
c++; item[c]=new Array("checkbox.htm","","CheckBox","","Creates a checkbox control","Controls");
c++; item[c]=new Array("checkbutton.htm","","CheckButton","","Creates a CheckButton control","Controls");
c++; item[c]=new Array("combobox.htm","","ComboBox","","Creates a ComboBox control","Controls");
c++; item[c]=new Array("contextmenu.htm","","Context Menu","","Creates a Context Menu definition","Controls");
c++; item[c]=new Array("controlcontextmenu.htm","","Control Context Menu","","Add a Context Menu to a Control","Controls");
c++; item[c]=new Array("datepicker.htm","","DatePicker","","Creates a DatePicker control","Controls");
c++; item[c]=new Array("dropdownmenu.htm","","DropDown Menu","","Creates a dropdown menu definition","Controls");
c++; item[c]=new Array("editbox.htm","","EditBox","","Creates an EditBox control","Controls");
c++; item[c]=new Array("frame.htm","","Frame","","Creates a frame control","Controls");
c++; item[c]=new Array("grid.htm","","Grid","","Creates a grid control","Controls");
c++; item[c]=new Array("hyperlink.htm","","HyperLink","","Creates an hyperlink control","Controls");
c++; item[c]=new Array("image.htm","","Image","","Creates an image control","Controls");
c++; item[c]=new Array("ipaddress.htm","","IpAddress","","Creates an IpAddress control","Controls");
c++; item[c]=new Array("label.htm","","Label","","Creates a label control","Controls");
c++; item[c]=new Array("listbox.htm","","ListBox","","Creates a ListBox control","Controls");
c++; item[c]=new Array("mainmenu.htm","","Main Menu","","Creates a Main Menu definition","Controls");
c++; item[c]=new Array("monthcalendar.htm","","MonthCalendar","","Creates a MonthCalendar control","Controls");
c++; item[c]=new Array("notifymenu.htm","","Notify Menu","","Creates a notify menu definition","Controls");
c++; item[c]=new Array("player.htm","","Player","","Creates a Player control","Controls");
c++; item[c]=new Array("progressbar.htm","","ProgressBar","","Creates a ProgressBar control","Controls");
c++; item[c]=new Array("radiogroup.htm","","RadioGroup","","Creates a RadioGroup Control","Controls");
c++; item[c]=new Array("richeditbox.htm","","RichEditBox","","Creates a RichEditBox Control","Controls");
c++; item[c]=new Array("slider.htm","","Slider","","Creates a Slider Control","Controls");
c++; item[c]=new Array("spinner.htm","","Spinner","","Creates a Spinner Control","Controls");
c++; item[c]=new Array("splitbox.htm","","SplitBox","","Creates a SplitBox Control","Controls");
c++; item[c]=new Array("statusbar.htm","","StatusBar","","Creates a StatusBar Control","Controls");
c++; item[c]=new Array("tab.htm","","Tab","","Creates a Tab Control","Controls");
c++; item[c]=new Array("textbox.htm","","TextBox","","Creates a TextBox Control","Controls");
c++; item[c]=new Array("this.htm","","This Object","","Semi-OOP system Object","Controls");
c++; item[c]=new Array("timer.htm","","Timer","","Creates a Timer Control","Controls");
c++; item[c]=new Array("TimePicker.htm","","TimePicker","","Creates a TimePicker control","Controls");
c++; item[c]=new Array("tree.htm","","Tree","","Creates a Tree Control","Controls");
c++; item[c]=new Array("toolbar.htm","","ToolBar","","Creates a ToolBar Control","Controls");
c++; item[c]=new Array("address.htm","","address","","Sets / Get the address in an HyperLink control","Properties");
c++; item[c]=new Array("alignment.htm","","alignment","","Specifies how a label or hyperlink control content should be aligned","Properties");
c++; item[c]=new Array("allowappend.htm","","allowappend","","Specifies whether new records can be added to a table within a data-bound Grid control. (Available at control definition)","Properties");
c++; item[c]=new Array("allowdelete.htm","","allowdelete","","Specifies whether records can be deleted from a table within a browse control (Available at control definition)","Properties");
c++; item[c]=new Array("allowedit.htm","","allowedit","","Specifies whether records can be edited from a table within a browse control (Available at control definition)","Properties");
c++; item[c]=new Array("autoplay.htm","","autoplay","","Specifies whether an AnimateBox control starts playing automatically","Properties");
c++; item[c]=new Array("autosize.htm","","autosize","","Specifies whether a GUI object must be sized automatically","Properties");
c++; item[c]=new Array("autosizemovie.htm","","autosizemovie","","Specifies whether a Player control will automatically resize its content","Properties");
c++; item[c]=new Array("autosizewindow.htm","","autosizewindow","","Specifies whether a Player control will automatically resize its own window","Properties");
c++; item[c]=new Array("backcolor.htm","","backcolor","","Specifies the background color for a GUI object","Properties");
c++; item[c]=new Array("bordercolor.htm","","bordercolor","","Specifies the text color of the border of a MonthCalendar object","Properties");
c++; item[c]=new Array("both.htm","","both","","Specifies whether tickmarks will be shown on both sides of a slider control","Properties");
c++; item[c]=new Array("bottom.htm","","bottom","","Specifies whether a ToolBar o SplitBox control should be shown at the bottom of a window","Properties");
c++; item[c]=new Array("break.htm","","break","","Specifies when a splitchild GUI object should be displayed in a new band","Properties");
c++; item[c]=new Array("buttons.htm","","buttons","","Specifies when buttons should be used instead tabs in a Tab control","Properties");
c++; item[c]=new Array("buttonwidth.htm","","buttonwidth","","Specifies the button width for a ToolBar control","Properties");
c++; item[c]=new Array("buttonheight.htm","","buttonheight","","Specifies the button height for a ToolBar control","Properties");
c++; item[c]=new Array("caseconvert.htm","","caseconvert","","Specifies whether a caracter TextBox input will be automatically converted to lowercase or uppercase","Properties");
c++; item[c]=new Array("caption.htm","","caption","","Set / Gets caption of a gui object","Properties");
c++; item[c]=new Array("caretpos.htm","","caretpos","","Set / Gets the caret position of a textbox control","Properties");
c++; item[c]=new Array("cell.htm","","cell","","Specifies or retrieves the content of a Grid cell","Properties");
c++; item[c]=new Array("cellnavigation.htm","","cellnavigation","","Specifies whether individual cells can be selected in Grid control","Properties");
c++; item[c]=new Array("centerproperty.htm","","center","","Specifies whether a AnimateBox control content should be aligned to center","Properties");
c++; item[c]=new Array("centeralign.htm","","centeralign","","Specifies whether a label or hyperlink control content should be alignet to center","Properties");
c++; item[c]=new Array("check.htm","","check","","Specifies whether a ToolBar button should work as a CheckButton","Properties");
c++; item[c]=new Array("checked.htm","","checked","","Set / Gets check state of a menu item","Properties");
c++; item[c]=new Array("col.htm","","col","","Set / Gets column position of a gui object","Properties");
c++; item[c]=new Array("columncontrols.htm","","columncontrols","","Specifies controls to be used for each column in a Grid Control","Properties");
c++; item[c]=new Array("columnvalid.htm","","columnvalid","","Codeblock array (one element per column) is evaluated at cell editing","Properties");
c++; item[c]=new Array("columnwhen.htm","","columnwhen","","Codeblock array (one element per column) that is evaluated at cell editing","Properties");
c++; item[c]=new Array("cursor.htm","","cursor","","Specifies a cursor file or resource for a Window","Properties");
c++; item[c]=new Array("datatype.htm","","datatype","","Specifies data type for a TextBox control","Properties");
c++; item[c]=new Array("date.htm","","date","","Specifies whether a TextBox will be used for entering date data","Properties");
c++; item[c]=new Array("disabledbackcolor.htm","","disabledbackcolor","","Specifies the background color for a disabled/read-only GUI object","Properties");
c++; item[c]=new Array("disabledfontcolor.htm","","disabledfontcolor","","Specifies the text color for a disabled/read-only GUI object","Properties");
c++; item[c]=new Array("displayedit.htm","","displayedit","","Specified whether a CoboBox control can be edited","Properties");
c++; item[c]=new Array("displayitems.htm","","displayitems","","Set data display in Browse Control","Properties");
c++; item[c]=new Array("displayvalue.htm","","displayvalue","","Specifies or retrieves the value for the editable part of a ComboBox control","Properties");
c++; item[c]=new Array("dragitems.htm","","dragitems","","Specifies whether the items in a ListBox can be arranged by the user","Properties");
c++; item[c]=new Array("dropdown.htm","","dropdown","","Specifies whether a Toolbar button will be used to open a dropdown menu","Properties");
c++; item[c]=new Array("droppedwidth.htm","","droppedwidth","","Specifies the width of the list dropped when a ComboBox control arrow is clicked","Properties");
c++; item[c]=new Array("dynamicbackcolor.htm","","dynamicbackcolor","","Dynamically Set The Background Color For a Grid Or Browse Cell","Properties");
c++; item[c]=new Array("dynamicdisplay.htm","","dynamicdisplay","","Specifies a code block array containing field dysplay-processing data for a data-bound Grid control.","Properties");
c++; item[c]=new Array("dynamicforecolor.htm","","dynamicforecolor","","Dynamically Set The Foreground Color For a Grid Or Browse Cell","Properties");
c++; item[c]=new Array("enabled.htm","","enabled","","Set / Gets enabled state of a control","Properties");
c++; item[c]=new Array("errordlg.htm","","errordlg","","Inhibits or allows displaying of player errors to users","Properties");
c++; item[c]=new Array("field.htm","","field","","Links controls (RICHEDITBOX, TEXTBOX, EDITBOX, CHECKBOX and DATEPICKER) to a table field.","Properties");
c++; item[c]=new Array("fields.htm","","fields","","A character array (one element per column) specifying  fields for a Browse control","Properties");
c++; item[c]=new Array("file.htm","","file","","Specifies the file name (as a character string) for a Player or AnimateBox control","Properties");
c++; item[c]=new Array("flat.htm","","flat","","Set 'Flat' Style For GUI Objects","Properties");
c++; item[c]=new Array("focusedcontrol.htm","","focusedcontrol","","Retrieves the focused control name of a Window","Properties");
c++; item[c]=new Array("fontname.htm","","fontname","","Set / Gets gui object's font name","Properties");
c++; item[c]=new Array("fontsize.htm","","fontsize","","Set / Gets gui object's font size","Properties");
c++; item[c]=new Array("fontbold.htm","","fontbold","","Set / Gets gui object's font bold flag","Properties");
c++; item[c]=new Array("fontcolor.htm","","fontcolor","","Specifies the text color for a GUI object","Properties");
c++; item[c]=new Array("fontitalic.htm","","fontitalic","","Set / Gets gui object's font italic flag","Properties");
c++; item[c]=new Array("fontunderline.htm","","fontunderline","","Set / Gets gui object's font underline flag","Properties");
c++; item[c]=new Array("fontstrikeout.htm","","fontstrikeout","","Set / Gets gui object's font strikeout flag","Properties");
c++; item[c]=new Array("format.htm","","format","","Specifies the edit format string for a TextBox|TimePicker control","Properties");
c++; item[c]=new Array("grippertext.htm","","grippertext","","Specifies the text of the Gripper for a SplitChild GUI object","Properties");
c++; item[c]=new Array("group.htm","","group","","Specifies whether toolbar buttons should be work as radio buttons","Properties");
c++; item[c]=new Array("handcursor.htm","","handcursor","","Specifies whether a hand cursor will be used in an Hyperlink control","Properties");
c++; item[c]=new Array("header.htm","","header","","Sets/gets the header for a Grid or Browse control specific column","Properties"); 
c++; item[c]=new Array("headers.htm","","headers","","Set the headers for a Grid or Browse control","Properties");
c++; item[c]=new Array("headerimages.htm","","headerimages","","Specifies images for Grid and Browse headers","Properties");
c++; item[c]=new Array("height.htm","","height","","Set / Gets height of a gui object","Properties");
c++; item[c]=new Array("helpid.htm","","helpid","","Allows to set the help id for context help","Properties");
c++; item[c]=new Array("horizontal.htm","","horizontal","","Specifies whether gripper in a SplitBox is horizontal","Properties");
c++; item[c]=new Array("hottrack.htm","","hottrack","","Specifies Hot tracking of Tab pages","Properties");
c++; item[c]=new Array("hscrollbar.htm","","hscrollbar","","Specifies whether a horizontal scrollbar will be included in an Edit control","Properties");
c++; item[c]=new Array("icon.htm","","icon","","Specifies an icon for a StatusBar item","Properties");
c++; item[c]=new Array("imageproperty.htm","","image","","Specifies a character array containing image filenames or resourcenames to be used with Browse, ComboBox, Grid and Tree controls (a character string for MenuItems)","Properties");
c++; item[c]=new Array("imagewidth.htm","","imagewidth","","Specifies image width for toolbar buttons","Properties");
c++; item[c]=new Array("imageheight.htm","","imageheight","","Specifies image  height for toolbar buttons","Properties");
c++; item[c]=new Array("increment.htm","","increment","","Specifies numeric increment (when the user clicks up and down arrows) in a Spinner control","Properties");
c++; item[c]=new Array("inputitems.htm","","inputitems","","Allows to control data input in the Browse control","Properties");
c++; item[c]=new Array("inputmask.htm","","inputmask","","Specifies the edit mask for a TextBox control","Properties");
c++; item[c]=new Array("interval.htm","","interval","","Specifies interval in milliseconds for timer control","Properties");
c++; item[c]=new Array("item.htm","","item","","Set / Get item text in a listbox, combobox, grid and Statusbar controls","Properties");
c++; item[c]=new Array("items.htm","","items","","Set items for a ComboBox at control definition","Properties");
c++; item[c]=new Array("itemcount.htm","","itemcount","","Get item count in a listbox, combobox or grid","Properties");
c++; item[c]=new Array("itemimages.htm","","itemimages","","Specifies Item Images For a Tree Item","Properties");
c++; item[c]=new Array("itemsource.htm","","itemsource","","Links a ComboBox control to a table field","Properties");
c++; item[c]=new Array("justify.htm","","justify","","Numeric array (one element for each column) containing justification constants for Browse and Grid controls","Properties");
c++; item[c]=new Array("left.htm","","left","","Specifies whether the content of a GUI object will be left aligned","Properties");
c++; item[c]=new Array("lines.htm","","lines","","Specifies whether lines are shown in a Grid or Browse control","Properties");
c++; item[c]=new Array("lock.htm","","lock","","Specifies whether Browse control should lock records when saving changes made interactively by the user","Properties");
c++; item[c]=new Array("lowercase.htm","","lowercase","","Specifies whether a caracter TextBox input will be automatically converted to lowercase","Properties");
c++; item[c]=new Array("maxlength.htm","","maxlength","","Specifies the maximun input length for a TextBox control","Properties");
c++; item[c]=new Array("menu.htm","","menu","","Shows or Hides the Menu button from view on the Player control toolbar","Properties");
c++; item[c]=new Array("multiline.htm","","multiline","","For buttons, specifies whether the Button should wraps the text to multiple lines when the text is too long to fit on a single line. For Tab control, specified how the tabs are shown when not fit in","Properties");
c++; item[c]=new Array("multiselect.htm","","multiselect","","Specifies whether multiple selection is allowed in ListBox and Grid controls","Properties");
c++; item[c]=new Array("name.htm","","name","","Retrieves the name of a GUI object","Properties");
c++; item[c]=new Array("notifyicon.htm","","notifyicon","","Specifies a notification icon to be shown in the system tray","Properties");
c++; item[c]=new Array("notifytooltip.htm","","notifytooltip","","Specifies a tooltip text to be shown in the system tray","Properties");
c++; item[c]=new Array("nodeimages.htm","","nodeimages","","Specifies Node Images For a Tree Control","Properties");
c++; item[c]=new Array("numeric.htm","","numeric","","Specifies whether a TextBox will be used for entering numeric data","Properties");
c++; item[c]=new Array("openproperty.htm","","open","","Shows or Hides the open and close commands from the Player menu;","Properties");
c++; item[c]=new Array("playbar.htm","","playbar","","Shows or Hides the Player toolbar","Properties");
c++; item[c]=new Array("object.htm","","object","","This property provides Access to an object linked to an Activex control","Properties");
c++; item[c]=new Array("options.htm","","options","","Set items for a RadioGroup control","Properties");
c++; item[c]=new Array("outerfontcolor.htm","","trailingfontcolor","","Specifies the text color of days before and after the current month in a MonthCalendar object","Properties");
c++; item[c]=new Array("ownerbutton.htm","","ownerbutton","","Specifies the parent button name for a DropDow Menu object","Properties");
c++; item[c]=new Array("parent.htm","","parent","","Specifies the parent window name for a GUI object","Properties");
c++; item[c]=new Array("pictalignment.htm","","pictalignment","","Specifies the image alignment in a Button control","Properties");
c++; item[c]=new Array("picture.htm","","picture","","Set / Gets image name of a gui object","Properties");
c++; item[c]=new Array("rangemax.htm","","rangemax","","Specifies the maximun value that can be entered in a MonthCalendar, ProgressBar, Slider, or Spinner control","Properties");
c++; item[c]=new Array("rangemin.htm","","rangemin","","Specifies the minimum value that can be entered in a MonthCalendar, ProgressBar, Slider, or Spinner control","Properties");
c++; item[c]=new Array("readonly.htm","","readonly","","Specifies whether a GUI object is read-only","Properties");
c++; item[c]=new Array("readonlyfields.htm","","readonlyfields","","Specifies read-only columns on a Browse control as a logical array","Properties");
c++; item[c]=new Array("recno.htm","","recno","","Set / Gets selected item in a data-bound Grid control based on its physical record number.","Properties");
c++; item[c]=new Array("rightalign.htm","","rightalign","","Specifies whether the content of a GUI object will be right aligned","Properties");
c++; item[c]=new Array("righttext.htm","","righttext","","Specifies whether the buttons in a ToolBar control should be right aligned","Properties");
c++; item[c]=new Array("rowsource.htm","","rowsource","","Specifies workarea name for a Grid COntrol","Properties");
c++; item[c]=new Array("rootbutton.htm","","rootbutton","","Specifies whether a button should be shown for root element in a Tree control","Properties");
c++; item[c]=new Array("row.htm","","row","","Set / Gets row position of a gui object","Properties");
c++; item[c]=new Array("rowsperpage.htm","","rowsperpage","","Retrieves the number of rows visible within a Grid object","Properties");
c++; item[c]=new Array("separator.htm","","separator","","Specifies whether a ToolBar button includes a separator","Properties");
c++; item[c]=new Array("showall.htm","","showall","","Specifies whether all interface elements should be shown in a Player control","Properties");
c++; item[c]=new Array("showheaders.htm","","showheaders","","Specifies whether headers should be shown in a Grid control","Properties");
c++; item[c]=new Array("shownone.htm","","shownone","","Specifies whether entering null date|time is allowed in a DatePicker|TimePicker control","Properties");
c++; item[c]=new Array("showposition.htm","","showposition","","Determines whether the current position within the content of the Player control should be shown","Properties");
c++; item[c]=new Array("sizable.htm","","sizable","","Specifies whether the border of a window allows size it","Properties");
c++; item[c]=new Array("smooth.htm","","smooth","","Determines whether an altérnate style should be used to show the ProgressBar control","Properties");
c++; item[c]=new Array("sort.htm","","sort","","Specifies whether a ComboBox or ListBox should be automatically sorted","Properties");
c++; item[c]=new Array("spacing.htm","","spacing","","Sets the spacing between ítems in a RadioGroup control","Properties");
c++; item[c]=new Array("stretch.htm","","stretch","","Specifies if the content of an Image control should be stretched to completely fill the control area","Properties");
c++; item[c]=new Array("strictwidth.htm","","strictwidth","","Forces ToolBar control buttons width, preventing automatic width changes","Properties");
c++; item[c]=new Array("style.htm","","style","","Specified Whether  'Flat' or 'Raised' Style Should be Used for StatusItem  Objects","Properties");
c++; item[c]=new Array("tabstop.htm","","tabstop","","Spevifies whether a GUI object should receive the focus when the user changes it using the [Tab] key","Properties");
c++; item[c]=new Array("tickmarks.htm","","tickmarks","","Specifies whether TickMarks are shown in Slider control","Properties");
c++; item[c]=new Array("title.htm","","title","","Set / Gets title of a window","Properties");
c++; item[c]=new Array("titlebackcolor.htm","","titlebackcolor","","Specifies the background color of the title of a MonthCalendar object","Properties");
c++; item[c]=new Array("titlefontcolor.htm","","titlefontcolor","","Specifies the text color of the title of a MonthCalendar object","Properties");
c++; item[c]=new Array("today.htm","","today","","Specifies whether the today date should be shown in a MonthCalendar control","Properties");
c++; item[c]=new Array("todaycircle.htm","","todaycircle","","Specifies whether the today date should be circled in a MonthCalendar control","Properties");
c++; item[c]=new Array("tooltip.htm","","tooltip","","Set / Gets gui object's tooltip text","Properties");
c++; item[c]=new Array("top.htm","","top","","Specifies whether Slider control TickMarks are located at the top of control","Properties");
c++; item[c]=new Array("transparent.htm","","transparent","","Specifies whether the background of a GUI object should be transparent","Properties");
c++; item[c]=new Array("updown.htm","","updown","","Specifies whether up and down arrows should be included in a DatePicker control","Properties");
c++; item[c]=new Array("uppercase.htm","","uppercase","","Specifies whether a caracter TextBox input will be automatically converted to uppercase","Properties");
c++; item[c]=new Array("valid.htm","","valid","","Codeblock array (one element per column) that is evaluated after field editing for Browse control","Properties");
c++; item[c]=new Array("validmessages.htm","","validmessages","","Character array (one element per column) with messages to show when valid procedure returns .F.","Properties");
c++; item[c]=new Array("value.htm","","value","","Sets / Gets gui object's value","Properties");
c++; item[c]=new Array("valuesource.htm","","valuesource","","Setting VALUESOURCE property to a fieldname, its containt is returned instead the physical record number","Properties");
c++; item[c]=new Array("vertical.htm","","vertical","","Specifies vertical orientation for ProgressBar, Slider and Tab controls","Properties");
c++; item[c]=new Array("view.htm","","view","","Specifies the initial view of a MonthCalendar control","Properties");
c++; item[c]=new Array("virtual.htm","","virtual","","Specifies whether a Grid control allow virtual rows","Properties");
c++; item[c]=new Array("visible.htm","","visible","","Specifies whether a GUI object is visible","Properties");
c++; item[c]=new Array("visiblemin.htm","","visiblemin","","Returns the earliest date that is currently visible in a MonthCalendar object","Properties");
c++; item[c]=new Array("visiblemax.htm","","visiblemax","","Returns the latest date that is currently visible in a MonthCalendar object","Properties");
c++; item[c]=new Array("vscrollbar.htm","","vscrollbar","","Specifies whether a vertical scrollbar will be included in an Edit or Browse control","Properties");
c++; item[c]=new Array("weeknumbers.htm","","weeknumbers","","Specifies whether week numbers are shown for MonthCalendar control","Properties");
c++; item[c]=new Array("when.htm","","when","","Codeblock array (one element per column) that is evaluated prior to field editing for Browse control","Properties");
c++; item[c]=new Array("wholedropdown.htm","","wholedropdown","","Specifies whether a Toolbar button will be used to open a dropdown menu","Properties");
c++; item[c]=new Array("width.htm","","width","","Set / Gets width of a gui object","Properties");
c++; item[c]=new Array("widths.htm","","widths","","Specifies column widths for Browse and Grid controls. It must be specified as a numeric array containing one element for each column in the control","Properties");
c++; item[c]=new Array("windowtype.htm","","windowtype","","Set The  Window","Properties");
c++; item[c]=new Array("workarea.htm","","workarea","","Specifies the workarea for a Browse control","Properties");
c++; item[c]=new Array("wrap.htm","","wrap","","Specifies whether Spinner control content can be wrapped","Properties");
c++; item[c]=new Array("colorarray.htm","","Color Array","","Specifies a color for a color property","Properties");
c++; item[c]=new Array("action.htm","","action","","Occurs When The User Clicks On The Control","Events");
c++; item[c]=new Array("onchange.htm","","onchange","","Occurs When The Content Of a Control Changes","Events");
c++; item[c]=new Array("onclick.htm","","onclick","","Occurs when the user clicks on the control","Events");
c++; item[c]=new Array("oncloseup.htm","","oncloseup","","Occurs when the user closes the dropdown list of a ComboBox control","Events");
c++; item[c]=new Array("ondblclick.htm","","ondblclick","","Occurs when the user double clicks on the control","Events");
c++; item[c]=new Array("ondisplaychange.htm","","ondisplaychange","","Occurs when the data in an editable ComboBox control is changed","Events");
c++; item[c]=new Array("ondropdown.htm","","ondropdown","","Occurs when the user open the dropdown list of a ComboBox control","Events");
c++; item[c]=new Array("onenter.htm","","onenter","","Occurs when the user press the Enter key in a control with the input focus","Events");
c++; item[c]=new Array("ongetbolddays.htm","","ongetbolddays","","Occurs when a MonthCalendar control can accept a list of dates to be bolded in the control","Events");
c++; item[c]=new Array("ongotfocus.htm","","ongotfocus","","Occurs when a control or window gains the input focus","Events");
c++; item[c]=new Array("onheadclick.htm","","onheadclick","","Occurs when a Grid or Browse header is clicked","Events");
c++; item[c]=new Array("onhscrollbox.htm","","onhscrollbox","","Occurs when the horizontal scrollbar button of a virtual dimensioned window is dragged","Events");
c++; item[c]=new Array("oninit.htm","","oninit","","Occurs when a Window is initialized","Events");
c++; item[c]=new Array("oninteractiveclose.htm","","oninteractiveclose","","Occurs when a Window is about to be closed by pressing the [X] button","Events");
c++; item[c]=new Array("onlostfocus.htm","","onlostfocus","","Occurs when a control or window had lost the input focus","Events");
c++; item[c]=new Array("onmaximize.htm","","onmaximize","","Occurs when a Window is maximized","Events");
c++; item[c]=new Array("onminimize.htm","","onminimize","","Occurs when a Window is minimized","Events");
c++; item[c]=new Array("onmouseclick.htm","","onmouseclick","","Occurs when the user click a Window","Events");
c++; item[c]=new Array("onmousedrag.htm","","onmousedrag","","Occurs when the user drag in a Window","Events");
c++; item[c]=new Array("onmousemove.htm","","onmousemove","","Occurs when the user moves the mouse over a Window","Events");
c++; item[c]=new Array("onnotifyclick.htm","","onnotifyclick","","Occurs when a notify icon is clicked","Events");
c++; item[c]=new Array("onquerydata.htm","","onquerydata","","Occurs when a virtual Grid control requires data to display a cell","Events");
c++; item[c]=new Array("onpaint.htm","","onpaint","","Occurs when a Window is painted by the system","Events");
c++; item[c]=new Array("onrelease.htm","","onrelease","","Occurs when a Window is released","Events");
c++; item[c]=new Array("onsave.htm","","onsave","","Occurs when a data-bound Grid control is saved","Events");
c++; item[c]=new Array("onscrolldown.htm","","onscrolldown","","Occurs when a virtual dimensioned window is scrolled down","Events");
c++; item[c]=new Array("onscrollleft.htm","","onscrollleft","","Occurs when a virtual dimensioned window is scrolled left","Events");
c++; item[c]=new Array("onscrollright.htm","","onscrollright","","Occurs when a virtual dimensioned window is scrolled right","Events");
c++; item[c]=new Array("onscrollup.htm","","onscrollup","","Occurs when a virtual dimensioned window is scrolled up","Events");
c++; item[c]=new Array("onsize.htm","","onsize","","Occurs when a Window is sized","Events");
c++; item[c]=new Array("onvscrollbox.htm","","onvscrollbox","","Occurs when the vertical scrollbar button of a virtual dimensioned window is dragged","Events");
c++; item[c]=new Array("activate.htm","","activate","","Activate a Window","Methods");
c++; item[c]=new Array("append.htm","","append","","Add a record to a data-bound Grid control.","Methods");
c++; item[c]=new Array("addcolumn.htm","","addcolumn","","Add a New Column To a Grid Control","Methods");
c++; item[c]=new Array("addcontrol.htm","","addcontrol","","Adds a control to a Tab control page","Methods");
c++; item[c]=new Array("additem.htm","","additem","","Adds a New Item To a ListBox, COmboBox Or Grid","Methods");
c++; item[c]=new Array("addpage.htm","","addpage","","Adds a new page to a Tab control","Methods");
c++; item[c]=new Array("capture.htm","","capture","","Capture a Window As a Bitmap File And Save It","Methods");
c++; item[c]=new Array("center.htm","","center","","","Methods");
c++; item[c]=new Array("clearbuffer.htm","","clearbuffer","","Empty the record buffer in a Grid control undoing all non-saved changes since the last call to 'Save' method.","Methods");
c++; item[c]=new Array("close.htm","","close","","Closes a File In An AnimateBox Or a Player Control","Methods");
c++; item[c]=new Array("delete.htm","","delete","","Marks for deletion selected record in a data-bound Grid control.","Methods");
c++; item[c]=new Array("deletecolumn.htm","","deletecolumn","","Deletes a Column From a Grid Control","Methods");
c++; item[c]=new Array("deleteitem.htm","","deleteitem","","Deletes An Item From a ListBox, ComboBox Or Grid","Methods");
c++; item[c]=new Array("deletepage.htm","","deletepage","","Deletes a page from a Tab control","Methods");
c++; item[c]=new Array("eject.htm","","eject","","Ejects The Medium For a Player Control","Methods");
c++; item[c]=new Array("hide.htm","","hide","","Hide a GUI Object","Methods");
c++; item[c]=new Array("maximize.htm","","maximize","","Maximize a Window","Methods");
c++; item[c]=new Array("minimize.htm","","minimize","","Minimize a Window","Methods");
c++; item[c]=new Array("open.htm","","open","","Opens a File On An AnimateBox Or Player Control","Methods");
c++; item[c]=new Array("pause.htm","","pause","","Pauses Execution On a Player Control","Methods");
c++; item[c]=new Array("play.htm","","play","","Start Playing on AnimateBox And Player Control*","Methods");
c++; item[c]=new Array("playreverse.htm","","playreverse","","Start Reverse Playing Content in a Player Control","Methods");
c++; item[c]=new Array("print.htm","","print","","Print The Content Of a Window","Methods");
c++; item[c]=new Array("recall.htm","","recall","","Recalls a current selected record in a data-bound Grid control.","Methods");
c++; item[c]=new Array("refresh.htm","","refresh","","Refresh Content For a Data-Bound Control","Methods");
c++; item[c]=new Array("release.htm","","release","","Release GUI Objects From Memory","Methods");
c++; item[c]=new Array("resume.htm","","resume","","Resumes Playing In a Player Control","Methods");
c++; item[c]=new Array("restore.htm","","restore","","Restore a Window","Methods");
c++; item[c]=new Array("save.htm","","save","","Saves The Content Of a Data-Bound Control","Methods");
c++; item[c]=new Array("seek.htm","","seek","","Change Playing Position In An AnimateBox Control","Methods");
c++; item[c]=new Array("setfocus.htm","","setfocus","","Gives The Focus a Control Or a Window","Methods");
c++; item[c]=new Array("show.htm","","show","","Show a GUI Object","Methods");
c++; item[c]=new Array("stop.htm","","stop","","Stop Execution On AnimateBox And Player Controls","Methods");
c++; item[c]=new Array("compressfiles.htm","","CompressFiles","","Creates a Zip File","Functions");
c++; item[c]=new Array("createfolder.htm","","CreateFolder","","Creates a Folder Based Upon Given Parameters","Functions");
c++; item[c]=new Array("domethod.htm","","DoMethod","","Executes a Method","Functions");
c++; item[c]=new Array("FindTextDialog.htm","","FindTextDialog","","Opens the System Find Text Dialog and Returns Selected Find Options","Functions");
c++; item[c]=new Array("getcolor.htm","","GetColor","","Opens The System Color Selection Dialog And Returns Selected Color","Functions");
c++; item[c]=new Array("GetComputerName.htm","","GetComputerName","","Retrieve the NetBIOS name of the local computer","Functions");
c++; item[c]=new Array("getcurrentfolder.htm","","GetCurrentFolder","","Returns The Current Folder As a Character String","Functions");
c++; item[c]=new Array("getdata.htm","","GetData","","Gets Data From Another HMG Application","Functions");
c++; item[c]=new Array("getfile.htm","","GetFile","","Opens The 'Open File' System Dialog And Returns Selected Filename","Functions");
c++; item[c]=new Array("getfolder.htm","","GetFolder","","Opens The 'Browse For Folder' System Dialog And Returns Selected Folder Path","Functions");
c++; item[c]=new Array("getfont.htm","","GetFont","","Opens The 'Font Selection' System Dialog And Returns The Font Name, Size And Style Selected","Functions");
c++; item[c]=new Array("GetFontList.htm","","GetFontList","","Returns An Array With All Available Fonts","Functions");
c++; item[c]=new Array("getdesktopfolder.htm","","GetDesktopFolder","","Returns The System Desktop Folder Path","Functions");
c++; item[c]=new Array("getdesktopheight.htm","","GetDesktopHeight","","Returns The Desktop Height In Pixels","Functions");
c++; item[c]=new Array("getdesktopwidth.htm","","GetDesktopWidth","","Returns The Desktop Width In Pixels","Functions");
c++; item[c]=new Array("getmydocumentsfolder.htm","","GetMyDocumentsFolder","","Return 'My Documents' Folder Path","Functions");
c++; item[c]=new Array("getprogramfilesfolder.htm","","GetProgramFilesFolder","","Returns 'Program Files' Folder Path","Functions");
c++; item[c]=new Array("getproperty.htm","","GetProperty","","Retrieves a Window Or Control Property Value","Functions");
c++; item[c]=new Array("getstartupfolder.htm","","GetStartupFolder","","Returns The Application Startup Folder Path","Functions");
c++; item[c]=new Array("getsystemfolder.htm","","GetSystemFolder","","Returns The System Folder Path","Functions");
c++; item[c]=new Array("gettempfolder.htm","","GetTempFolder","","Returns System Temporary Folder Path","Functions");
c++; item[c]=new Array("GetUserName.htm","","GetUserName","","Retrieve the name of the user associated with the current thread","Functions");
c++; item[c]=new Array("getwindowsfolder.htm","","GetWindowsFolder","","Returns The Windows Folder Path","Functions");
c++; item[c]=new Array("HMG_CallDLL.htm","","HMG_CallDLL","","Calls a ANSI/Unicode DLL Function","Functions");
c++; item[c]=new Array("HMG_GetImageInfo.htm","","HMG_GetImageInfo","","Get Information an Image","Functions");
c++; item[c]=new Array("HMG_GetLanguage.htm","","HMG_GetLanguage","","Get Select Language For Interface Messages","Functions");
c++; item[c]=new Array("HMG_LoadResourceRawFile.htm","","HMG_LoadResourceRawFile","","Gets Raw Data From Resources","Functions");
c++; item[c]=new Array("HMGversion.htm","","HMGVersion","","Return the current version of HMG","Functions");
c++; item[c]=new Array("inputbox.htm","","InputBox","","Displays a modal window used for input Of a single string","Functions");
c++; item[c]=new Array("inputwindow.htm","","InputWindow","","Creates an Editing Window Automatically Based Upon Given Values","Functions");
c++; item[c]=new Array("iscontroldefined.htm","","IsControlDefined","","Determine If a Control Is Defined","Functions");
c++; item[c]=new Array("iswindowactive.htm","","IsWindowActive","","Determine If a Window Is Active","Functions");
c++; item[c]=new Array("iswindowdefined.htm","","IsWindowDefined","","Determine If a WIndow Is Defined","Functions");
c++; item[c]=new Array("isinsertactive.htm","","IsInsertActive","","Returns a Logical Value Indicating [INSERT] Key Status","Functions");
c++; item[c]=new Array("iscapslockactive.htm","","IsCapslockActive","","Returns a Logical Value Indicating [CAPSLOCK] Key Status","Functions");
c++; item[c]=new Array("isscrolllockactive.htm","","IsScrolllockActive","","Returns a Logical Value Indicating Insert [SCROLLLOCK] Key Status","Functions");
c++; item[c]=new Array("isnumlockactive.htm","","IsNumlockActive","","Returns a Logical Value Indicating [NUMLOCK] Key Status","Functions");
c++; item[c]=new Array("memorystatus.htm","","MemoryStatus","","Determines The Amount Of Available Free Memory","Functions");
c++; item[c]=new Array("MessageBoxTimeout.htm","","MessageBoxTimeout","","Shows a Message Box with Timeout","Functions");
c++; item[c]=new Array("msgbox.htm","","MsgBox","","Shows a Message Box","Functions");
c++; item[c]=new Array("msgdebug.htm","","MsgDebug","","Shows a Message Box With An Debugging Information","Functions");
c++; item[c]=new Array("msgexclamation.htm","","MsgExclamation","","Shows a Message Box With An Exclamation Icon","Functions");
c++; item[c]=new Array("msginfo.htm","","MsgInfo","","Shows a Message Box With An Information Icon","Functions");
c++; item[c]=new Array("msgokcancel.htm","","MsgOkCancel","","Shows a Message Box With [Ok] And [Cancel] Buttons","Functions");
c++; item[c]=new Array("msgretrycancel.htm","","MsgRetryCancel","","Shows a Message Box With [Retry] And [Cancel] Buttons","Functions");
c++; item[c]=new Array("msgstop.htm","","MsgStop","","Shows a Message Box With An Stop Icon","Functions");
c++; item[c]=new Array("msgyesno.htm","","MsgYesNo","","Shows a Message Box With [Yes] And [No] Buttons","Functions");
c++; item[c]=new Array("playasterisk.htm","","PlayAsterisk","","Plays System 'Asterisk' Sound","Functions");
c++; item[c]=new Array("playbeep.htm","","PlayBeep","","Plays System 'Beep' Sound","Functions");
c++; item[c]=new Array("playexclamation.htm","","PlayExclamation","","Plays System 'Exclamation' Sound","Functions");
c++; item[c]=new Array("playhand.htm","","PlayHand","","Plays System 'Hand' Sound","Functions");
c++; item[c]=new Array("playok.htm","","PlayOk","","Plays System 'Ok' Sound","Functions");
c++; item[c]=new Array("playquestion.htm","","PlayQuestion","","Plays System 'Question' Sound","Functions");
c++; item[c]=new Array("putfile.htm","","PutFile","","Opens 'Save As' System Dialog And Returns The Saved Filename","Functions");
c++; item[c]=new Array("random.htm","","Random","","Returns a Randomly Generated Number","Functions");
c++; item[c]=new Array("registryread.htm","","RegistryRead","","Reads Registry Data","Functions");
c++; item[c]=new Array("registrywrite.htm","","RegistryWrite","","Writes Data To System Registry","Functions");
c++; item[c]=new Array("removefolder.htm","","RemoveFolder","","Removes Specified Folder","Functions");
c++; item[c]=new Array("ReplaceTextDialog.htm","","ReplaceTextDialog","","Opens the System Replace Text Dialog and Returns Selected Replace Options","Functions");
c++; item[c]=new Array("senddata.htm","","SendData","","Send Data To Another HMG Application","Functions");
c++; item[c]=new Array("SetDialogBoxPosition.htm","","Set DialogBox Position","","Sets the Position of the Dialog Boxes in the Screen (FindTextDialog, GetColor, GetFile, GetFolder, GetFont, MessageBoxTimeout, MsgXXX, PutFile, ReplaceTextDialog, SELECT PRINTER, etc.)","Functions");
c++; item[c]=new Array("setproperty.htm","","SetProperty","","Sets Window/Control Property Value","Functions");
c++; item[c]=new Array("SetComputerName.htm","","SetComputerName","","Set a new NetBIOS name for the local computer","Functions");
c++; item[c]=new Array("setcurrentfolder.htm","","SetCurrentFolder","","Sets The Default Folder","Functions");
c++; item[c]=new Array("shellabout.htm","","ShellAbout","","Shows The System About Window","Functions");
c++; item[c]=new Array("uncompressfiles.htm","","UnCompressFiles","","Uncompress a Zip File","Functions");
c++; item[c]=new Array("VirtualKeyboard.htm","","VirtualKeyboard","","","Functions");
c++; item[c]=new Array("waitwindow.htm","","WaitWindow","","Shows a Message Window","Functions");
c++; item[c]=new Array("windowsversion.htm","","WindowsVersion","","Returns an three element array with the name of the used operating system, the service pack and the build number","Functions");
c++; item[c]=new Array("compress.htm","","Compress","","Creates a Zip File","Misc. Commands");
c++; item[c]=new Array("decode.htm","","Decode","","Decodes Database Records Or Files","Misc. Commands");
c++; item[c]=new Array("displayhelp.htm","","Display Help","","Display Windows Help","Misc. Commands");
c++; item[c]=new Array("doevents.htm","","Do Events","","Forces System Event Processing","Misc. Commands");
c++; item[c]=new Array("doreport.htm","","Do Report","","Creates a Report Based Upon Given Parameters","Misc. Commands");
c++; item[c]=new Array("doreportform.htm","","Do Report Form","","Executes a Report From a Given Report Definition File","Misc. Commands");
c++; item[c]=new Array("draw.htm","","Draw/Erase/Print Graph","","Drawing Commands","Misc. Commands");
c++; item[c]=new Array("edit.htm","","Edit","","Edits Database Records In The Specified WorkArea","Misc. Commands");
c++; item[c]=new Array("encode.htm","","Encode","","Encodes Database Records Or Files","Misc. Commands");
c++; item[c]=new Array("execute.htm","","Execute","","Opens Or Prints Specified Files","Misc. Commands");
c++; item[c]=new Array("onkey.htm","","On Key","","Defines a Keyboard Shortcut","Misc. Commands");
c++; item[c]=new Array("playwave.htm","","Play Wave","","Plays a Wave From File Or Resource","Misc. Commands");
c++; item[c]=new Array("releasekey.htm","","Release Key","","Releases a Key Defined Via ON KEY Command","Misc. Commands");
c++; item[c]=new Array("setautoscroll.htm","","Set AutoScroll","","Configure AutoScroll Global Setting","Misc. Commands");
c++; item[c]=new Array("setbrowsesync.htm","","Set BrowseSync","","Configures BrowseSync Globel Setting","Misc. Commands");
c++; item[c]=new Array("setcodepage.htm","","Set CodePage","","Sets The Current CodePage","Misc. Commands");
c++; item[c]=new Array("setcompath.htm","","Set CommPath","","Sets The Common Path For Inter-Application Communication","Misc. Commands");
c++; item[c]=new Array("SetEdge.htm","","Set Edge","","Set edges in the controls","Misc. Commands");
c++; item[c]=new Array("setfont.htm","","Set Font","","Sets The Default Font For Controls","Misc. Commands");
c++; item[c]=new Array("sethelpfile.htm","","Set HelpFile","","Sets The Default Help File For a HMG Application","Misc. Commands");
c++; item[c]=new Array("setinteractiveclose.htm","","Set InteractiveClose","","Configure InteractiveClose Global Setting","Misc. Commands");
c++; item[c]=new Array("setlanguage.htm","","Set Language","","Selects Language For Interface Messages","Misc. Commands");
c++; item[c]=new Array("setmultiple.htm","","Set Multiple","","Impedes Attempts To Run Multiple Instances Of The Application","Misc. Commands");
c++; item[c]=new Array("setnavigation.htm","","Set Navigation","","Configures Navigation Global Setting","Misc. Commands");
c++; item[c]=new Array("setregion.htm","","Set Region","","Sets The Shape Of a Window Based Upon Given Points Coordinates","Misc. Commands");
c++; item[c]=new Array("setscroll.htm","","Set Scroll","","Set scroll amount for horizontal and vertical scrollbars in virtual dimensioned windows","Misc. Commands");
c++; item[c]=new Array("setstationname.htm","","Set StationName","","Sets The Station Name For Inter-Application Communication","Misc. Commands");
c++; item[c]=new Array("settooltipbackcolor.htm","","Set ToolTipBackColor","","Set ToolTip Background Color","Misc. Commands");
c++; item[c]=new Array("settooltipforecolor.htm","","Set ToolTipForeColor","","Set Tooltip Foreground Color","Misc. Commands");
c++; item[c]=new Array("SetToolTipCustomDraw.htm","","Set ToolTipCustomDraw","","Set Form/Control ToolTip Custom Draw","Misc. Commands");
c++; item[c]=new Array("settooltipstyle.htm","","Set ToolTipStyle","","Set Tooltip Style (Standard Or Balloon)","Misc. Commands");
c++; item[c]=new Array("storekey.htm","","Store Key","","Stores Action Block Define Via ON KEY Command To a Variable","Misc. Commands");
c++; item[c]=new Array("systemobject.htm","","System Object","","Give Acces To Operating System Properties","Misc. Commands");
c++; item[c]=new Array("uncompress.htm","","Uncompress","","Uncompress a Zip File","Misc. Commands");
c++; item[c]=new Array("waitwindowcommand.htm","","Wait Window","","Shows a Message Window","Misc. Commands");
c++; item[c]=new Array("selectprinter.htm","","SELECT PRINTER","","Selects a Printer","Print System");
c++; item[c]=new Array("startprintdoc.htm","","START PRINTDOC","","Starts a Print Job","Print System");
c++; item[c]=new Array("startprintpage.htm","","START PRINTPAGE","","Prepares The Printer Driver To Accept Data","Print System");
c++; item[c]=new Array("endprintpage.htm","","END PRINTPAGE","","Tells The Device That The Application Finished Writing To a Page","Print System");
c++; item[c]=new Array("endprintdoc.htm","","END PRINTDOC","","Ends a Print Job","Print System");
c++; item[c]=new Array("abortprintdoc.htm","","ABORT PRINTDOC","","Stops The Current Print Job","Print System");
c++; item[c]=new Array("printdata.htm","","PRINT DATA","","Prints Data","Print System");
c++; item[c]=new Array("printimage.htm","","PRINT IMAGE","","Prints an Image From File Or Resource","Print System");
c++; item[c]=new Array("printline.htm","","PRINT LINE","Prints a Line","Prints a Line","Print System");
c++; item[c]=new Array("printrectangle.htm","","PRINT RECTANGLE","","Prints a Rectangle","Print System");
c++; item[c]=new Array("getprintableareawidth.htm","","GetPrintableAreaWidth()","","Returns The Current Printable Area Width in Milimeters","Print System");
c++; item[c]=new Array("getprintableareaheight.htm","","GetPrintableAreaHeight()","","Returns The Printable Area Height In Milimeters","Print System");
c++; item[c]=new Array("getprintableareahorizontaloffset.htm","","GetPrintableAreaHorizontalOffset()","","Returns The Current Printable Area Horizontal Offset","Print System");
c++; item[c]=new Array("getprintableareaverticaloffset.htm","","GetPrintableAreaVerticalOffset()","","Returns The Current Printable Area Vertical Offset","Print System");
c++; item[c]=new Array("getprinter.htm","","GetPrinter()","","Returns The Selected Printer Name From a Selection Window","Print System");
c++; item[c]=new Array("aprinters.htm","","aPrinters()","","Returns An Array With All Available Printers","Print System");
c++; item[c]=new Array("getdefaultprinter.htm","","GetDefaultPrinter()","","Returns The Default Printer Name","Print System");
c++; item[c]=new Array("reportwriter.htm","","Reference","","Writes a report to printer, PDF file or HTML file.","Report Writer");
c++; item[c]=new Array("../HMG HPDF/HMG_HPDF Introduction.htm","","Introduction",""," Library to create PDF documents","HMG HPDF");
c++; item[c]=new Array("../HMG HPDF/HMG_HPDF_Document_Handling.htm","","Document Handling","","SELECT HPDFDOC / START HPDFDOC / END HPDFDOC / ABORT HPDFDOC","HMG HPDF");
c++; item[c]=new Array("../HMG HPDF/HPDFINFO.htm","","HPDFINFO","","SET HPDFINFO / GET HPDFINFO","HMG HPDF");
c++; item[c]=new Array("../HMG HPDF/HMG_HPDFMiscelleaneous.htm","","Miscelleaneous","","COMPRESS / PERMISSION / PAGEMODE / PASSWORD / PAGENUMBERING / ENCODING","HMG HPDF");
c++; item[c]=new Array("../HMG HPDF/HMG_HPDFOutline.htm","","Outline","","ROOTOUTLINE / PAGEOUTLINE","HMG HPDF");
c++; item[c]=new Array("../HMG HPDF/HMG_HPDFPage_Handling.htm","","Page Handling","","START / END / INSERT / SELECT / PAGENO / PAGECOUNT","HMG HPDF");
c++; item[c]=new Array("../HMG HPDF/HMG_HPDFContent_Handling.htm","","Content Handling","","Text / Graphics / Image / ToolTip / Page Link / URL Link","HMG HPDF");
c++; item[c]=new Array("../BosTaurus/BosTaurus-FunctionsReferenceGuide.htm","","Reference Guide","BT_InfoName BT_InfoVersion BT_InfoAuthor BT_GetDesktopHandle BT_DesktopWidth BT_DesktopHeight BT_WindowWidth BT_WindowHeight BT_ClientAreaWidth BT_ClientAreaHeight BT_StatusBarWidth BT_StatusBarHeight BT_ClientAreaInvalidateAll BT_ClientAreaInvalidateRect BT_BitmapLoadFile BT_BitmapLoadEMF BT_BitmapSaveFile BT_BitmapRelease BT_BitmapWidth BT_BitmapHeight BT_BitmapBitsPerPixel BT_BitmapCreateNew BT_BitmapClone BT_BitmapCopyAndResize BT_BitmapPaste BT_BitmapPasteTransparent BT_BitmapPasteAlphaBlend BT_BitmapInvert BT_BitmapGrayness BT_BitmapBrightness BT_BitmapContrast BT_BitmapModifyColor BT_BitmapGammaCorrect BT_BitmapConvolutionFilter3x3 BT_BitmapTransform T_BitmapCaptureDesktop BT_BitmapCaptureWindow BT_BitmapCaptureClientArea BT_BitmapClipboardGet BT_BitmapClipboardPut BT_BitmapClipboardClean BT_BitmapClipboardIsEmpty BT_CreateDC BT_DeleteDC BT_DrawGetPixel BT_DrawSetPixel BT_DrawBitmap BT_DrawBitmapTransparent BT_DrawBitmapAlphaBlend BT_DrawDCtoDC BT_DrawDCtoDCTransparent BT_DrawDCtoDCAlphaBlend BT_DrawGradientFillHorizontal BT_DrawGradientFillVertical BT_DrawText BT_DrawPolyLine BT_DrawLine BT_DrawRectangle BT_DrawEllipse BT_DrawFillRectangle BT_DrawFillEllipse BT_DrawFillRoundRect BT_DrawFillFlood BT_HMGGetImage BT_HMGCloneImage BT_HMGSetImage","Graphics functions","Bos Taurus");
c++; item[c]=new Array("DISABLE_EVENT.htm","","Disable/Enable Events","","Prevents re-entry while processing the events","Advanced");
c++; item[c]=new Array("CREATE_EVENT.htm","","Create Event","","Commands and Functions for Manage Events","Advanced");
c++; item[c]=new Array("READ_KEYBOARD_MOUSE.htm","","Read Keyboard and Mouse","HMG_GetLastVirtualKeyDown HMG_GetLastVirtualKeyUp HMG_GetLastCharacter HMG_CleanLastVirtualKeyDown HMG_CleanLastVirtualKeyUp HMG_CleanLastCharacter HMG_GetLastVirtualKeyName HMG_VirtualKeyIsPressed GetKeyState HMG_SendCharacter HMG_GetLastMouseMessage HMG_CleanLastMouseMessage HMG_GetCursorPos HMG_SetCursorPos SET CONTROL ONKEYEVENT SET ONKEYEVENT HMG_GetOnKeyControlIndex SET CONTROL ONMOUSEEVENT SET ONMOUSEEVENT HMG_GetOnMouseControlIndex GetFormNameByHandle GetControlNameByHandle","Keyboard and Mouse functions","Advanced");
c++; item[c]=new Array("user-components.htm","","User Components","","Standard Interface To Allow HMG Users Create Its Own Components","Advanced");
c++; item[c]=new Array("http://www.itlnet.net/programming/program/Reference/c53g01c/menu.html","","Guide To CA-Clipper 5.3","","Clipper commands/functions","External Guides and Tutorials");
c++; item[c]=new Array("http://www.elektrosoft.it/tutorials/hmg/hmg.asp","","HMG Tutorial","","HMG commands/functions","External Guides and Tutorials");
c++; item[c]=new Array("http://www.hmgforum.com/wiki","","HMG Wiki","","Wikipedia site for HMG","External Guides and Tutorials");
c++; item[c]=new Array("https://www.youtube.com/embed/OkxvxV6s97Q?list=PLLXM-dmzOsPdv4wnb5UaAx0rQ6Ii_Ibvq","","HMG in YouTube","","HMG channel in YouTube","External Guides and Tutorials");
c++; item[c]=new Array("http://vivaclipper.wordpress.com/category/hmg/","","HMG - Viva Clipper","","Complementary guide for xBase","External Guides and Tutorials");
c++; item[c]=new Array("HFCL_Intro.htm","","Introduction","","HMG Forum Component Library collection","HFCL");
c++; item[c]=new Array("HFCL_AutoFill.htm","","AutoFill","","Add auto filling feature to a TextBox Control","HFCL");
c++; item[c]=new Array("HFCL_COMBOSEARCHBOX.htm","","ComboSearchBox","","Define a Combined Search Box Control","HFCL");
c++; item[c]=new Array("HFCL_gridprint.htm","","GridPrint","","Print interface","HFCL");
c++; item[c]=new Array("HFCL_MakeShortcut.htm","","MakeShortcut","","Make a file, folder or internet shortcut","HFCL");
c++; item[c]=new Array("HFCL_QHTM.htm","","QHTM","","HTML library","HFCL");
c++; item[c]=new Array("HMGSQL.htm","","HMG SQL","","SQL Bridge for MySQL, PostgreSQL, SQLite","HFCL");
c++; item[c]=new Array("Update_HMG_Unicode.htm","","HMG-UNICODE Documentation","","Unicode Commands/Function","HMG UNICODE");
c++; item[c]=new Array("HB_Unicode_Strings.htm","","Ansi/Unicode Strings Functions","","string functions that support ANSI and UNICODE","HMG UNICODE");
c++; item[c]=new Array("HB_Ansi_Strings.htm","","Ansi Only Strings Functions","","string functions for ANSI","HMG UNICODE");
c++; item[c]=new Array("HMG-64bits.htm","","HMG 64-bits Documentation ","","64 bit Building and considerations","HMG 64-bits");
return item;
}
